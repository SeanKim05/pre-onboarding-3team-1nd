import {
  require_prop_types
} from "./chunk-HJSNJYOX.js";
import {
  __commonJS,
  require_checkPropTypes,
  require_object_assign,
  require_react
} from "./chunk-HMERU7RN.js";

// node_modules/fbjs/lib/invariant.js
var require_invariant = __commonJS({
  "node_modules/fbjs/lib/invariant.js"(exports, module) {
    "use strict";
    var validateFormat = function validateFormat2(format) {
    };
    if (true) {
      validateFormat = function validateFormat2(format) {
        if (format === void 0) {
          throw new Error("invariant requires an error message argument");
        }
      };
    }
    function invariant(condition, format, a, b, c, d, e, f) {
      validateFormat(format);
      if (!condition) {
        var error;
        if (format === void 0) {
          error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function() {
            return args[argIndex++];
          }));
          error.name = "Invariant Violation";
        }
        error.framesToPop = 1;
        throw error;
      }
    }
    module.exports = invariant;
  }
});

// node_modules/fbjs/lib/ExecutionEnvironment.js
var require_ExecutionEnvironment = __commonJS({
  "node_modules/fbjs/lib/ExecutionEnvironment.js"(exports, module) {
    "use strict";
    var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
    var ExecutionEnvironment = {
      canUseDOM,
      canUseWorkers: typeof Worker !== "undefined",
      canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
      canUseViewport: canUseDOM && !!window.screen,
      isInWorker: !canUseDOM
    };
    module.exports = ExecutionEnvironment;
  }
});

// node_modules/fbjs/lib/emptyFunction.js
var require_emptyFunction = __commonJS({
  "node_modules/fbjs/lib/emptyFunction.js"(exports, module) {
    "use strict";
    function makeEmptyFunction(arg) {
      return function() {
        return arg;
      };
    }
    var emptyFunction = function emptyFunction2() {
    };
    emptyFunction.thatReturns = makeEmptyFunction;
    emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
    emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
    emptyFunction.thatReturnsNull = makeEmptyFunction(null);
    emptyFunction.thatReturnsThis = function() {
      return this;
    };
    emptyFunction.thatReturnsArgument = function(arg) {
      return arg;
    };
    module.exports = emptyFunction;
  }
});

// node_modules/fbjs/lib/EventListener.js
var require_EventListener = __commonJS({
  "node_modules/fbjs/lib/EventListener.js"(exports, module) {
    "use strict";
    var emptyFunction = require_emptyFunction();
    var EventListener = {
      listen: function listen(target, eventType, callback) {
        if (target.addEventListener) {
          target.addEventListener(eventType, callback, false);
          return {
            remove: function remove() {
              target.removeEventListener(eventType, callback, false);
            }
          };
        } else if (target.attachEvent) {
          target.attachEvent("on" + eventType, callback);
          return {
            remove: function remove() {
              target.detachEvent("on" + eventType, callback);
            }
          };
        }
      },
      capture: function capture(target, eventType, callback) {
        if (target.addEventListener) {
          target.addEventListener(eventType, callback, true);
          return {
            remove: function remove() {
              target.removeEventListener(eventType, callback, true);
            }
          };
        } else {
          if (true) {
            console.error("Attempted to listen to events during the capture phase on a browser that does not support the capture phase. Your application will not receive some events.");
          }
          return {
            remove: emptyFunction
          };
        }
      },
      registerDefault: function registerDefault() {
      }
    };
    module.exports = EventListener;
  }
});

// node_modules/fbjs/lib/warning.js
var require_warning = __commonJS({
  "node_modules/fbjs/lib/warning.js"(exports, module) {
    "use strict";
    var emptyFunction = require_emptyFunction();
    var warning = emptyFunction;
    if (true) {
      printWarning = function printWarning2(format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        var argIndex = 0;
        var message = "Warning: " + format.replace(/%s/g, function() {
          return args[argIndex++];
        });
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
      warning = function warning2(condition, format) {
        if (format === void 0) {
          throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
        }
        if (format.indexOf("Failed Composite propType: ") === 0) {
          return;
        }
        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }
          printWarning.apply(void 0, [format].concat(args));
        }
      };
    }
    var printWarning;
    module.exports = warning;
  }
});

// node_modules/fbjs/lib/hyphenate.js
var require_hyphenate = __commonJS({
  "node_modules/fbjs/lib/hyphenate.js"(exports, module) {
    "use strict";
    var _uppercasePattern = /([A-Z])/g;
    function hyphenate(string) {
      return string.replace(_uppercasePattern, "-$1").toLowerCase();
    }
    module.exports = hyphenate;
  }
});

// node_modules/fbjs/lib/hyphenateStyleName.js
var require_hyphenateStyleName = __commonJS({
  "node_modules/fbjs/lib/hyphenateStyleName.js"(exports, module) {
    "use strict";
    var hyphenate = require_hyphenate();
    var msPattern = /^ms-/;
    function hyphenateStyleName(string) {
      return hyphenate(string).replace(msPattern, "-ms-");
    }
    module.exports = hyphenateStyleName;
  }
});

// node_modules/fbjs/lib/camelize.js
var require_camelize = __commonJS({
  "node_modules/fbjs/lib/camelize.js"(exports, module) {
    "use strict";
    var _hyphenPattern = /-(.)/g;
    function camelize(string) {
      return string.replace(_hyphenPattern, function(_, character) {
        return character.toUpperCase();
      });
    }
    module.exports = camelize;
  }
});

// node_modules/fbjs/lib/camelizeStyleName.js
var require_camelizeStyleName = __commonJS({
  "node_modules/fbjs/lib/camelizeStyleName.js"(exports, module) {
    "use strict";
    var camelize = require_camelize();
    var msPattern = /^-ms-/;
    function camelizeStyleName(string) {
      return camelize(string.replace(msPattern, "ms-"));
    }
    module.exports = camelizeStyleName;
  }
});

// node_modules/fbjs/lib/performance.js
var require_performance = __commonJS({
  "node_modules/fbjs/lib/performance.js"(exports, module) {
    "use strict";
    var ExecutionEnvironment = require_ExecutionEnvironment();
    var performance2;
    if (ExecutionEnvironment.canUseDOM) {
      performance2 = window.performance || window.msPerformance || window.webkitPerformance;
    }
    module.exports = performance2 || {};
  }
});

// node_modules/fbjs/lib/performanceNow.js
var require_performanceNow = __commonJS({
  "node_modules/fbjs/lib/performanceNow.js"(exports, module) {
    "use strict";
    var performance2 = require_performance();
    var performanceNow;
    if (performance2.now) {
      performanceNow = function performanceNow2() {
        return performance2.now();
      };
    } else {
      performanceNow = function performanceNow2() {
        return Date.now();
      };
    }
    module.exports = performanceNow;
  }
});

// node_modules/fbjs/lib/emptyObject.js
var require_emptyObject = __commonJS({
  "node_modules/fbjs/lib/emptyObject.js"(exports, module) {
    "use strict";
    var emptyObject = {};
    if (true) {
      Object.freeze(emptyObject);
    }
    module.exports = emptyObject;
  }
});

// node_modules/fbjs/lib/shallowEqual.js
var require_shallowEqual = __commonJS({
  "node_modules/fbjs/lib/shallowEqual.js"(exports, module) {
    "use strict";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function is(x, y) {
      if (x === y) {
        return x !== 0 || y !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }
    function shallowEqual(objA, objB) {
      if (is(objA, objB)) {
        return true;
      }
      if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return false;
      }
      for (var i = 0; i < keysA.length; i++) {
        if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }
      return true;
    }
    module.exports = shallowEqual;
  }
});

// node_modules/fbjs/lib/isNode.js
var require_isNode = __commonJS({
  "node_modules/fbjs/lib/isNode.js"(exports, module) {
    "use strict";
    function isNode(object) {
      var doc = object ? object.ownerDocument || object : document;
      var defaultView = doc.defaultView || window;
      return !!(object && (typeof defaultView.Node === "function" ? object instanceof defaultView.Node : typeof object === "object" && typeof object.nodeType === "number" && typeof object.nodeName === "string"));
    }
    module.exports = isNode;
  }
});

// node_modules/fbjs/lib/isTextNode.js
var require_isTextNode = __commonJS({
  "node_modules/fbjs/lib/isTextNode.js"(exports, module) {
    "use strict";
    var isNode = require_isNode();
    function isTextNode(object) {
      return isNode(object) && object.nodeType == 3;
    }
    module.exports = isTextNode;
  }
});

// node_modules/fbjs/lib/containsNode.js
var require_containsNode = __commonJS({
  "node_modules/fbjs/lib/containsNode.js"(exports, module) {
    "use strict";
    var isTextNode = require_isTextNode();
    function containsNode(outerNode, innerNode) {
      if (!outerNode || !innerNode) {
        return false;
      } else if (outerNode === innerNode) {
        return true;
      } else if (isTextNode(outerNode)) {
        return false;
      } else if (isTextNode(innerNode)) {
        return containsNode(outerNode, innerNode.parentNode);
      } else if ("contains" in outerNode) {
        return outerNode.contains(innerNode);
      } else if (outerNode.compareDocumentPosition) {
        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
      } else {
        return false;
      }
    }
    module.exports = containsNode;
  }
});

// node_modules/fbjs/lib/focusNode.js
var require_focusNode = __commonJS({
  "node_modules/fbjs/lib/focusNode.js"(exports, module) {
    "use strict";
    function focusNode(node) {
      try {
        node.focus();
      } catch (e) {
      }
    }
    module.exports = focusNode;
  }
});

// node_modules/fbjs/lib/getActiveElement.js
var require_getActiveElement = __commonJS({
  "node_modules/fbjs/lib/getActiveElement.js"(exports, module) {
    "use strict";
    function getActiveElement(doc) {
      doc = doc || (typeof document !== "undefined" ? document : void 0);
      if (typeof doc === "undefined") {
        return null;
      }
      try {
        return doc.activeElement || doc.body;
      } catch (e) {
        return doc.body;
      }
    }
    module.exports = getActiveElement;
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports, module) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var react = require_react();
        var invariant = require_invariant();
        var ExecutionEnvironment = require_ExecutionEnvironment();
        var _assign = require_object_assign();
        var EventListener = require_EventListener();
        var require$$0 = require_warning();
        var hyphenateStyleName = require_hyphenateStyleName();
        var emptyFunction = require_emptyFunction();
        var camelizeStyleName = require_camelizeStyleName();
        var performanceNow = require_performanceNow();
        var propTypes = require_prop_types();
        var emptyObject = require_emptyObject();
        var checkPropTypes = require_checkPropTypes();
        var shallowEqual = require_shallowEqual();
        var containsNode = require_containsNode();
        var focusNode = require_focusNode();
        var getActiveElement = require_getActiveElement();
        !react ? invariant(false, "ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.") : void 0;
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        var Namespaces = {
          html: HTML_NAMESPACE,
          mathml: MATH_NAMESPACE,
          svg: SVG_NAMESPACE
        };
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace$1(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var Namespaces_1 = Namespaces;
        var getIntrinsicNamespace_1 = getIntrinsicNamespace;
        var getChildNamespace_1 = getChildNamespace$1;
        var DOMNamespaces = {
          Namespaces: Namespaces_1,
          getIntrinsicNamespace: getIntrinsicNamespace_1,
          getChildNamespace: getChildNamespace_1
        };
        var eventPluginOrder = null;
        var namesToPlugins = {};
        function recomputePluginOrdering() {
          if (!eventPluginOrder) {
            return;
          }
          for (var pluginName in namesToPlugins) {
            var pluginModule = namesToPlugins[pluginName];
            var pluginIndex = eventPluginOrder.indexOf(pluginName);
            !(pluginIndex > -1) ? invariant(false, "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.", pluginName) : void 0;
            if (EventPluginRegistry.plugins[pluginIndex]) {
              continue;
            }
            !pluginModule.extractEvents ? invariant(false, "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.", pluginName) : void 0;
            EventPluginRegistry.plugins[pluginIndex] = pluginModule;
            var publishedEvents = pluginModule.eventTypes;
            for (var eventName in publishedEvents) {
              !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName) : void 0;
            }
          }
        }
        function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
          !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, "EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.", eventName) : void 0;
          EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
          if (phasedRegistrationNames) {
            for (var phaseName in phasedRegistrationNames) {
              if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                var phasedRegistrationName = phasedRegistrationNames[phaseName];
                publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
              }
            }
            return true;
          } else if (dispatchConfig.registrationName) {
            publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
            return true;
          }
          return false;
        }
        function publishRegistrationName(registrationName, pluginModule, eventName) {
          !!EventPluginRegistry.registrationNameModules[registrationName] ? invariant(false, "EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.", registrationName) : void 0;
          EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
          EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
            }
          }
        }
        var EventPluginRegistry = {
          plugins: [],
          eventNameDispatchConfigs: {},
          registrationNameModules: {},
          registrationNameDependencies: {},
          possibleRegistrationNames: {},
          injectEventPluginOrder: function(injectedEventPluginOrder) {
            !!eventPluginOrder ? invariant(false, "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.") : void 0;
            eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
            recomputePluginOrdering();
          },
          injectEventPluginsByName: function(injectedNamesToPlugins) {
            var isOrderingDirty = false;
            for (var pluginName in injectedNamesToPlugins) {
              if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                continue;
              }
              var pluginModule = injectedNamesToPlugins[pluginName];
              if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
                !!namesToPlugins[pluginName] ? invariant(false, "EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.", pluginName) : void 0;
                namesToPlugins[pluginName] = pluginModule;
                isOrderingDirty = true;
              }
            }
            if (isOrderingDirty) {
              recomputePluginOrdering();
            }
          }
        };
        var EventPluginRegistry_1 = EventPluginRegistry;
        var RESERVED_PROPS = {
          children: true,
          dangerouslySetInnerHTML: true,
          autoFocus: true,
          defaultValue: true,
          defaultChecked: true,
          innerHTML: true,
          suppressContentEditableWarning: true,
          style: true
        };
        function checkMask(value, bitmask) {
          return (value & bitmask) === bitmask;
        }
        var DOMPropertyInjection = {
          MUST_USE_PROPERTY: 1,
          HAS_BOOLEAN_VALUE: 4,
          HAS_NUMERIC_VALUE: 8,
          HAS_POSITIVE_NUMERIC_VALUE: 16 | 8,
          HAS_OVERLOADED_BOOLEAN_VALUE: 32,
          HAS_STRING_BOOLEAN_VALUE: 64,
          injectDOMPropertyConfig: function(domPropertyConfig) {
            var Injection = DOMPropertyInjection;
            var Properties = domPropertyConfig.Properties || {};
            var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
            var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
            var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
            for (var propName in Properties) {
              !!DOMProperty.properties.hasOwnProperty(propName) ? invariant(false, "injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.", propName) : void 0;
              var lowerCased = propName.toLowerCase();
              var propConfig = Properties[propName];
              var propertyInfo = {
                attributeName: lowerCased,
                attributeNamespace: null,
                propertyName: propName,
                mutationMethod: null,
                mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
                hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
                hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
                hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
                hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE),
                hasStringBooleanValue: checkMask(propConfig, Injection.HAS_STRING_BOOLEAN_VALUE)
              };
              !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? invariant(false, "DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s", propName) : void 0;
              if (DOMAttributeNames.hasOwnProperty(propName)) {
                var attributeName = DOMAttributeNames[propName];
                propertyInfo.attributeName = attributeName;
              }
              if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
                propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
              }
              if (DOMMutationMethods.hasOwnProperty(propName)) {
                propertyInfo.mutationMethod = DOMMutationMethods[propName];
              }
              DOMProperty.properties[propName] = propertyInfo;
            }
          }
        };
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var DOMProperty = {
          ID_ATTRIBUTE_NAME: "data-reactid",
          ROOT_ATTRIBUTE_NAME: "data-reactroot",
          ATTRIBUTE_NAME_START_CHAR,
          ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",
          properties: {},
          shouldSetAttribute: function(name, value) {
            if (DOMProperty.isReservedProp(name)) {
              return false;
            }
            if ((name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return false;
            }
            if (value === null) {
              return true;
            }
            switch (typeof value) {
              case "boolean":
                return DOMProperty.shouldAttributeAcceptBooleanValue(name);
              case "undefined":
              case "number":
              case "string":
              case "object":
                return true;
              default:
                return false;
            }
          },
          getPropertyInfo: function(name) {
            return DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
          },
          shouldAttributeAcceptBooleanValue: function(name) {
            if (DOMProperty.isReservedProp(name)) {
              return true;
            }
            var propertyInfo = DOMProperty.getPropertyInfo(name);
            if (propertyInfo) {
              return propertyInfo.hasBooleanValue || propertyInfo.hasStringBooleanValue || propertyInfo.hasOverloadedBooleanValue;
            }
            var prefix = name.toLowerCase().slice(0, 5);
            return prefix === "data-" || prefix === "aria-";
          },
          isReservedProp: function(name) {
            return RESERVED_PROPS.hasOwnProperty(name);
          },
          injection: DOMPropertyInjection
        };
        var DOMProperty_1 = DOMProperty;
        var ReactDOMComponentFlags = {
          hasCachedChildNodes: 1 << 0
        };
        var ReactDOMComponentFlags_1 = ReactDOMComponentFlags;
        var ReactTypeOfWork = {
          IndeterminateComponent: 0,
          FunctionalComponent: 1,
          ClassComponent: 2,
          HostRoot: 3,
          HostPortal: 4,
          HostComponent: 5,
          HostText: 6,
          CoroutineComponent: 7,
          CoroutineHandlerPhase: 8,
          YieldComponent: 9,
          Fragment: 10
        };
        var HTMLNodeType = {
          ELEMENT_NODE: 1,
          TEXT_NODE: 3,
          COMMENT_NODE: 8,
          DOCUMENT_NODE: 9,
          DOCUMENT_FRAGMENT_NODE: 11
        };
        var HTMLNodeType_1 = HTMLNodeType;
        var HostComponent = ReactTypeOfWork.HostComponent;
        var HostText = ReactTypeOfWork.HostText;
        var ELEMENT_NODE$1 = HTMLNodeType_1.ELEMENT_NODE;
        var COMMENT_NODE$1 = HTMLNodeType_1.COMMENT_NODE;
        var ATTR_NAME = DOMProperty_1.ID_ATTRIBUTE_NAME;
        var Flags = ReactDOMComponentFlags_1;
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactInternalInstance$" + randomKey;
        var internalEventHandlersKey = "__reactEventHandlers$" + randomKey;
        function shouldPrecacheNode(node, nodeID) {
          return node.nodeType === ELEMENT_NODE$1 && node.getAttribute(ATTR_NAME) === "" + nodeID || node.nodeType === COMMENT_NODE$1 && node.nodeValue === " react-text: " + nodeID + " " || node.nodeType === COMMENT_NODE$1 && node.nodeValue === " react-empty: " + nodeID + " ";
        }
        function getRenderedHostOrTextFromComponent(component) {
          var rendered;
          while (rendered = component._renderedComponent) {
            component = rendered;
          }
          return component;
        }
        function precacheNode(inst, node) {
          var hostInst = getRenderedHostOrTextFromComponent(inst);
          hostInst._hostNode = node;
          node[internalInstanceKey] = hostInst;
        }
        function precacheFiberNode$1(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function uncacheNode(inst) {
          var node = inst._hostNode;
          if (node) {
            delete node[internalInstanceKey];
            inst._hostNode = null;
          }
        }
        function precacheChildNodes(inst, node) {
          if (inst._flags & Flags.hasCachedChildNodes) {
            return;
          }
          var children = inst._renderedChildren;
          var childNode = node.firstChild;
          outer:
            for (var name in children) {
              if (!children.hasOwnProperty(name)) {
                continue;
              }
              var childInst = children[name];
              var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
              if (childID === 0) {
                continue;
              }
              for (; childNode !== null; childNode = childNode.nextSibling) {
                if (shouldPrecacheNode(childNode, childID)) {
                  precacheNode(childInst, childNode);
                  continue outer;
                }
              }
              invariant(false, "Unable to find element with ID %s.", childID);
            }
          inst._flags |= Flags.hasCachedChildNodes;
        }
        function getClosestInstanceFromNode(node) {
          if (node[internalInstanceKey]) {
            return node[internalInstanceKey];
          }
          var parents = [];
          while (!node[internalInstanceKey]) {
            parents.push(node);
            if (node.parentNode) {
              node = node.parentNode;
            } else {
              return null;
            }
          }
          var closest;
          var inst = node[internalInstanceKey];
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst;
          }
          for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
            closest = inst;
            if (parents.length) {
              precacheChildNodes(inst, node);
            }
          }
          return closest;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst;
            } else if (inst._hostNode === node) {
              return inst;
            } else {
              return null;
            }
          }
          inst = getClosestInstanceFromNode(node);
          if (inst != null && inst._hostNode === node) {
            return inst;
          } else {
            return null;
          }
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          !(inst._hostNode !== void 0) ? invariant(false, "getNodeFromInstance: Invalid argument.") : void 0;
          if (inst._hostNode) {
            return inst._hostNode;
          }
          var parents = [];
          while (!inst._hostNode) {
            parents.push(inst);
            !inst._hostParent ? invariant(false, "React DOM tree root should always have a node reference.") : void 0;
            inst = inst._hostParent;
          }
          for (; parents.length; inst = parents.pop()) {
            precacheChildNodes(inst, inst._hostNode);
          }
          return inst._hostNode;
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalEventHandlersKey] || null;
        }
        function updateFiberProps$1(node, props) {
          node[internalEventHandlersKey] = props;
        }
        var ReactDOMComponentTree = {
          getClosestInstanceFromNode,
          getInstanceFromNode,
          getNodeFromInstance,
          precacheChildNodes,
          precacheNode,
          uncacheNode,
          precacheFiberNode: precacheFiberNode$1,
          getFiberCurrentPropsFromNode,
          updateFiberProps: updateFiberProps$1
        };
        var ReactDOMComponentTree_1 = ReactDOMComponentTree;
        var ReactInstanceMap = {
          remove: function(key) {
            key._reactInternalFiber = void 0;
          },
          get: function(key) {
            return key._reactInternalFiber;
          },
          has: function(key) {
            return key._reactInternalFiber !== void 0;
          },
          set: function(key, value) {
            key._reactInternalFiber = value;
          }
        };
        var ReactInstanceMap_1 = ReactInstanceMap;
        var ReactInternals = react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var ReactGlobalSharedState = {
          ReactCurrentOwner: ReactInternals.ReactCurrentOwner
        };
        {
          _assign(ReactGlobalSharedState, {
            ReactComponentTreeHook: ReactInternals.ReactComponentTreeHook,
            ReactDebugCurrentFrame: ReactInternals.ReactDebugCurrentFrame
          });
        }
        var ReactGlobalSharedState_1 = ReactGlobalSharedState;
        function getComponentName(instanceOrFiber) {
          if (typeof instanceOrFiber.getName === "function") {
            var instance = instanceOrFiber;
            return instance.getName();
          }
          if (typeof instanceOrFiber.tag === "number") {
            var fiber = instanceOrFiber;
            var type = fiber.type;
            if (typeof type === "string") {
              return type;
            }
            if (typeof type === "function") {
              return type.displayName || type.name;
            }
          }
          return null;
        }
        var getComponentName_1 = getComponentName;
        var ReactTypeOfSideEffect = {
          NoEffect: 0,
          PerformedWork: 1,
          Placement: 2,
          Update: 4,
          PlacementAndUpdate: 6,
          Deletion: 8,
          ContentReset: 16,
          Callback: 32,
          Err: 64,
          Ref: 128
        };
        var ReactCurrentOwner = ReactGlobalSharedState_1.ReactCurrentOwner;
        {
          var warning$1 = require$$0;
        }
        var ClassComponent = ReactTypeOfWork.ClassComponent;
        var HostComponent$1 = ReactTypeOfWork.HostComponent;
        var HostRoot$1 = ReactTypeOfWork.HostRoot;
        var HostPortal = ReactTypeOfWork.HostPortal;
        var HostText$1 = ReactTypeOfWork.HostText;
        var NoEffect = ReactTypeOfSideEffect.NoEffect;
        var Placement = ReactTypeOfSideEffect.Placement;
        var MOUNTING = 1;
        var MOUNTED = 2;
        var UNMOUNTED = 3;
        function isFiberMountedImpl(fiber) {
          var node = fiber;
          if (!fiber.alternate) {
            if ((node.effectTag & Placement) !== NoEffect) {
              return MOUNTING;
            }
            while (node["return"]) {
              node = node["return"];
              if ((node.effectTag & Placement) !== NoEffect) {
                return MOUNTING;
              }
            }
          } else {
            while (node["return"]) {
              node = node["return"];
            }
          }
          if (node.tag === HostRoot$1) {
            return MOUNTED;
          }
          return UNMOUNTED;
        }
        var isFiberMounted = function(fiber) {
          return isFiberMountedImpl(fiber) === MOUNTED;
        };
        var isMounted = function(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              warning$1(instance._warnedAboutRefsInRender, "%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName_1(ownerFiber) || "A component");
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = ReactInstanceMap_1.get(component);
          if (!fiber) {
            return false;
          }
          return isFiberMountedImpl(fiber) === MOUNTED;
        };
        function assertIsMounted(fiber) {
          !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, "Unable to find node on an unmounted component.") : void 0;
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var state = isFiberMountedImpl(fiber);
            !(state !== UNMOUNTED) ? invariant(false, "Unable to find node on an unmounted component.") : void 0;
            if (state === MOUNTING) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a["return"];
            var parentB = parentA ? parentA.alternate : null;
            if (!parentA || !parentB) {
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              invariant(false, "Unable to find node on an unmounted component.");
            }
            if (a["return"] !== b["return"]) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                !didFindChild ? invariant(false, "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.") : void 0;
              }
            }
            !(a.alternate === b) ? invariant(false, "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.") : void 0;
          }
          !(a.tag === HostRoot$1) ? invariant(false, "Unable to find node on an unmounted component.") : void 0;
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        var findCurrentFiberUsingSlowPath_1 = findCurrentFiberUsingSlowPath;
        var findCurrentHostFiber = function(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent$1 || node.tag === HostText$1) {
              return node;
            } else if (node.child) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node["return"] || node["return"] === currentParent) {
                return null;
              }
              node = node["return"];
            }
            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
          return null;
        };
        var findCurrentHostFiberWithNoPortals = function(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent$1 || node.tag === HostText$1) {
              return node;
            } else if (node.child && node.tag !== HostPortal) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node["return"] || node["return"] === currentParent) {
                return null;
              }
              node = node["return"];
            }
            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
          return null;
        };
        var ReactFiberTreeReflection = {
          isFiberMounted,
          isMounted,
          findCurrentFiberUsingSlowPath: findCurrentFiberUsingSlowPath_1,
          findCurrentHostFiber,
          findCurrentHostFiberWithNoPortals
        };
        var ReactErrorUtils = {
          _caughtError: null,
          _hasCaughtError: false,
          _rethrowError: null,
          _hasRethrowError: false,
          injection: {
            injectErrorUtils: function(injectedErrorUtils) {
              !(typeof injectedErrorUtils.invokeGuardedCallback === "function") ? invariant(false, "Injected invokeGuardedCallback() must be a function.") : void 0;
              invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
            }
          },
          invokeGuardedCallback: function(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(ReactErrorUtils, arguments);
          },
          invokeGuardedCallbackAndCatchFirstError: function(name, func, context, a, b, c, d, e, f) {
            ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);
            if (ReactErrorUtils.hasCaughtError()) {
              var error = ReactErrorUtils.clearCaughtError();
              if (!ReactErrorUtils._hasRethrowError) {
                ReactErrorUtils._hasRethrowError = true;
                ReactErrorUtils._rethrowError = error;
              }
            }
          },
          rethrowCaughtError: function() {
            return rethrowCaughtError.apply(ReactErrorUtils, arguments);
          },
          hasCaughtError: function() {
            return ReactErrorUtils._hasCaughtError;
          },
          clearCaughtError: function() {
            if (ReactErrorUtils._hasCaughtError) {
              var error = ReactErrorUtils._caughtError;
              ReactErrorUtils._caughtError = null;
              ReactErrorUtils._hasCaughtError = false;
              return error;
            } else {
              invariant(false, "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        };
        var invokeGuardedCallback = function(name, func, context, a, b, c, d, e, f) {
          ReactErrorUtils._hasCaughtError = false;
          ReactErrorUtils._caughtError = null;
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error) {
            ReactErrorUtils._caughtError = error;
            ReactErrorUtils._hasCaughtError = true;
          }
        };
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            var invokeGuardedCallbackDev = function(name, func, context, a, b, c, d, e, f) {
              var didError = true;
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback() {
                fakeNode.removeEventListener(evtType, callCallback, false);
                func.apply(context, funcArgs);
                didError = false;
              }
              var error = void 0;
              var didSetError = false;
              var isCrossOriginError = false;
              function onError(event) {
                error = event.error;
                didSetError = true;
                if (error === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", onError);
              fakeNode.addEventListener(evtType, callCallback, false);
              var evt = document.createEvent("Event");
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (didError) {
                if (!didSetError) {
                  error = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://fb.me/react-crossorigin-error for more information.");
                }
                ReactErrorUtils._hasCaughtError = true;
                ReactErrorUtils._caughtError = error;
              } else {
                ReactErrorUtils._hasCaughtError = false;
                ReactErrorUtils._caughtError = null;
              }
              window.removeEventListener("error", onError);
            };
            invokeGuardedCallback = invokeGuardedCallbackDev;
          }
        }
        var rethrowCaughtError = function() {
          if (ReactErrorUtils._hasRethrowError) {
            var error = ReactErrorUtils._rethrowError;
            ReactErrorUtils._rethrowError = null;
            ReactErrorUtils._hasRethrowError = false;
            throw error;
          }
        };
        var ReactErrorUtils_1 = ReactErrorUtils;
        {
          var warning$2 = require$$0;
        }
        var ComponentTree;
        var injection = {
          injectComponentTree: function(Injected) {
            ComponentTree = Injected;
            {
              warning$2(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, "EventPluginUtils.injection.injectComponentTree(...): Injected module is missing getNodeFromInstance or getInstanceFromNode.");
            }
          }
        };
        function isEndish(topLevelType) {
          return topLevelType === "topMouseUp" || topLevelType === "topTouchEnd" || topLevelType === "topTouchCancel";
        }
        function isMoveish(topLevelType) {
          return topLevelType === "topMouseMove" || topLevelType === "topTouchMove";
        }
        function isStartish(topLevelType) {
          return topLevelType === "topMouseDown" || topLevelType === "topTouchStart";
        }
        var validateEventDispatches;
        {
          validateEventDispatches = function(event) {
            var dispatchListeners = event._dispatchListeners;
            var dispatchInstances = event._dispatchInstances;
            var listenersIsArr = Array.isArray(dispatchListeners);
            var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
            var instancesIsArr = Array.isArray(dispatchInstances);
            var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
            warning$2(instancesIsArr === listenersIsArr && instancesLen === listenersLen, "EventPluginUtils: Invalid `event`.");
          };
        }
        function executeDispatch(event, simulated, listener, inst) {
          var type = event.type || "unknown-event";
          event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
          ReactErrorUtils_1.invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function executeDispatchesInOrder(event, simulated) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchInstances = event._dispatchInstances;
          {
            validateEventDispatches(event);
          }
          if (Array.isArray(dispatchListeners)) {
            for (var i = 0; i < dispatchListeners.length; i++) {
              if (event.isPropagationStopped()) {
                break;
              }
              executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
            }
          } else if (dispatchListeners) {
            executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
          }
          event._dispatchListeners = null;
          event._dispatchInstances = null;
        }
        function executeDispatchesInOrderStopAtTrueImpl(event) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchInstances = event._dispatchInstances;
          {
            validateEventDispatches(event);
          }
          if (Array.isArray(dispatchListeners)) {
            for (var i = 0; i < dispatchListeners.length; i++) {
              if (event.isPropagationStopped()) {
                break;
              }
              if (dispatchListeners[i](event, dispatchInstances[i])) {
                return dispatchInstances[i];
              }
            }
          } else if (dispatchListeners) {
            if (dispatchListeners(event, dispatchInstances)) {
              return dispatchInstances;
            }
          }
          return null;
        }
        function executeDispatchesInOrderStopAtTrue(event) {
          var ret = executeDispatchesInOrderStopAtTrueImpl(event);
          event._dispatchInstances = null;
          event._dispatchListeners = null;
          return ret;
        }
        function executeDirectDispatch(event) {
          {
            validateEventDispatches(event);
          }
          var dispatchListener = event._dispatchListeners;
          var dispatchInstance = event._dispatchInstances;
          !!Array.isArray(dispatchListener) ? invariant(false, "executeDirectDispatch(...): Invalid `event`.") : void 0;
          event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
          var res = dispatchListener ? dispatchListener(event) : null;
          event.currentTarget = null;
          event._dispatchListeners = null;
          event._dispatchInstances = null;
          return res;
        }
        function hasDispatches(event) {
          return !!event._dispatchListeners;
        }
        var EventPluginUtils = {
          isEndish,
          isMoveish,
          isStartish,
          executeDirectDispatch,
          executeDispatchesInOrder,
          executeDispatchesInOrderStopAtTrue,
          hasDispatches,
          getFiberCurrentPropsFromNode: function(node) {
            return ComponentTree.getFiberCurrentPropsFromNode(node);
          },
          getInstanceFromNode: function(node) {
            return ComponentTree.getInstanceFromNode(node);
          },
          getNodeFromInstance: function(node) {
            return ComponentTree.getNodeFromInstance(node);
          },
          injection
        };
        var EventPluginUtils_1 = EventPluginUtils;
        var fiberHostComponent = null;
        var ReactControlledComponentInjection = {
          injectFiberControlledHostComponent: function(hostComponentImpl) {
            fiberHostComponent = hostComponentImpl;
          }
        };
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = EventPluginUtils_1.getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (typeof internalInstance.tag === "number") {
            !(fiberHostComponent && typeof fiberHostComponent.restoreControlledState === "function") ? invariant(false, "Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.") : void 0;
            var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(internalInstance.stateNode);
            fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
            return;
          }
          !(typeof internalInstance.restoreControlledState === "function") ? invariant(false, "The internal instance must be a React host component. This error is likely caused by a bug in React. Please file an issue.") : void 0;
          internalInstance.restoreControlledState();
        }
        var ReactControlledComponent = {
          injection: ReactControlledComponentInjection,
          enqueueStateRestore: function(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          },
          restoreStateIfNeeded: function() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
        };
        var ReactControlledComponent_1 = ReactControlledComponent;
        var stackBatchedUpdates = function(fn, a, b, c, d, e) {
          return fn(a, b, c, d, e);
        };
        var fiberBatchedUpdates = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        function performFiberBatchedUpdates(fn, bookkeeping) {
          return fiberBatchedUpdates(fn, bookkeeping);
        }
        function batchedUpdates(fn, bookkeeping) {
          return stackBatchedUpdates(performFiberBatchedUpdates, fn, bookkeeping);
        }
        var isNestingBatched = false;
        function batchedUpdatesWithControlledComponents(fn, bookkeeping) {
          if (isNestingBatched) {
            return batchedUpdates(fn, bookkeeping);
          }
          isNestingBatched = true;
          try {
            return batchedUpdates(fn, bookkeeping);
          } finally {
            isNestingBatched = false;
            ReactControlledComponent_1.restoreStateIfNeeded();
          }
        }
        var ReactGenericBatchingInjection = {
          injectStackBatchedUpdates: function(_batchedUpdates) {
            stackBatchedUpdates = _batchedUpdates;
          },
          injectFiberBatchedUpdates: function(_batchedUpdates) {
            fiberBatchedUpdates = _batchedUpdates;
          }
        };
        var ReactGenericBatching = {
          batchedUpdates: batchedUpdatesWithControlledComponents,
          injection: ReactGenericBatchingInjection
        };
        var ReactGenericBatching_1 = ReactGenericBatching;
        var TEXT_NODE$1 = HTMLNodeType_1.TEXT_NODE;
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE$1 ? target.parentNode : target;
        }
        var getEventTarget_1 = getEventTarget;
        var HostRoot = ReactTypeOfWork.HostRoot;
        var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
        var callbackBookkeepingPool = [];
        function findRootContainerNode(inst) {
          if (typeof inst.tag === "number") {
            while (inst["return"]) {
              inst = inst["return"];
            }
            if (inst.tag !== HostRoot) {
              return null;
            }
            return inst.stateNode.containerInfo;
          } else {
            while (inst._hostParent) {
              inst = inst._hostParent;
            }
            var rootNode = ReactDOMComponentTree_1.getNodeFromInstance(inst);
            return rootNode.parentNode;
          }
        }
        function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
          if (callbackBookkeepingPool.length) {
            var instance = callbackBookkeepingPool.pop();
            instance.topLevelType = topLevelType;
            instance.nativeEvent = nativeEvent;
            instance.targetInst = targetInst;
            return instance;
          }
          return {
            topLevelType,
            nativeEvent,
            targetInst,
            ancestors: []
          };
        }
        function releaseTopLevelCallbackBookKeeping(instance) {
          instance.topLevelType = null;
          instance.nativeEvent = null;
          instance.targetInst = null;
          instance.ancestors.length = 0;
          if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
            callbackBookkeepingPool.push(instance);
          }
        }
        function handleTopLevelImpl(bookKeeping) {
          var targetInst = bookKeeping.targetInst;
          var ancestor = targetInst;
          do {
            if (!ancestor) {
              bookKeeping.ancestors.push(ancestor);
              break;
            }
            var root = findRootContainerNode(ancestor);
            if (!root) {
              break;
            }
            bookKeeping.ancestors.push(ancestor);
            ancestor = ReactDOMComponentTree_1.getClosestInstanceFromNode(root);
          } while (ancestor);
          for (var i = 0; i < bookKeeping.ancestors.length; i++) {
            targetInst = bookKeeping.ancestors[i];
            ReactDOMEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget_1(bookKeeping.nativeEvent));
          }
        }
        var ReactDOMEventListener = {
          _enabled: true,
          _handleTopLevel: null,
          setHandleTopLevel: function(handleTopLevel) {
            ReactDOMEventListener._handleTopLevel = handleTopLevel;
          },
          setEnabled: function(enabled) {
            ReactDOMEventListener._enabled = !!enabled;
          },
          isEnabled: function() {
            return ReactDOMEventListener._enabled;
          },
          trapBubbledEvent: function(topLevelType, handlerBaseName, element) {
            if (!element) {
              return null;
            }
            return EventListener.listen(element, handlerBaseName, ReactDOMEventListener.dispatchEvent.bind(null, topLevelType));
          },
          trapCapturedEvent: function(topLevelType, handlerBaseName, element) {
            if (!element) {
              return null;
            }
            return EventListener.capture(element, handlerBaseName, ReactDOMEventListener.dispatchEvent.bind(null, topLevelType));
          },
          dispatchEvent: function(topLevelType, nativeEvent) {
            if (!ReactDOMEventListener._enabled) {
              return;
            }
            var nativeEventTarget = getEventTarget_1(nativeEvent);
            var targetInst = ReactDOMComponentTree_1.getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null && typeof targetInst.tag === "number" && !ReactFiberTreeReflection.isFiberMounted(targetInst)) {
              targetInst = null;
            }
            var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);
            try {
              ReactGenericBatching_1.batchedUpdates(handleTopLevelImpl, bookKeeping);
            } finally {
              releaseTopLevelCallbackBookKeeping(bookKeeping);
            }
          }
        };
        var ReactDOMEventListener_1 = ReactDOMEventListener;
        function accumulateInto(current, next) {
          !(next != null) ? invariant(false, "accumulateInto(...): Accumulated items must not be null or undefined.") : void 0;
          if (current == null) {
            return next;
          }
          if (Array.isArray(current)) {
            if (Array.isArray(next)) {
              current.push.apply(current, next);
              return current;
            }
            current.push(next);
            return current;
          }
          if (Array.isArray(next)) {
            return [current].concat(next);
          }
          return [current, next];
        }
        var accumulateInto_1 = accumulateInto;
        function forEachAccumulated(arr, cb, scope) {
          if (Array.isArray(arr)) {
            arr.forEach(cb, scope);
          } else if (arr) {
            cb.call(scope, arr);
          }
        }
        var forEachAccumulated_1 = forEachAccumulated;
        var eventQueue = null;
        var executeDispatchesAndRelease = function(event, simulated) {
          if (event) {
            EventPluginUtils_1.executeDispatchesInOrder(event, simulated);
            if (!event.isPersistent()) {
              event.constructor.release(event);
            }
          }
        };
        var executeDispatchesAndReleaseSimulated = function(e) {
          return executeDispatchesAndRelease(e, true);
        };
        var executeDispatchesAndReleaseTopLevel = function(e) {
          return executeDispatchesAndRelease(e, false);
        };
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        var EventPluginHub = {
          injection: {
            injectEventPluginOrder: EventPluginRegistry_1.injectEventPluginOrder,
            injectEventPluginsByName: EventPluginRegistry_1.injectEventPluginsByName
          },
          getListener: function(inst, registrationName) {
            var listener;
            if (typeof inst.tag === "number") {
              var stateNode = inst.stateNode;
              if (!stateNode) {
                return null;
              }
              var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(stateNode);
              if (!props) {
                return null;
              }
              listener = props[registrationName];
              if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
                return null;
              }
            } else {
              var currentElement = inst._currentElement;
              if (typeof currentElement === "string" || typeof currentElement === "number") {
                return null;
              }
              if (!inst._rootNodeID) {
                return null;
              }
              var _props = currentElement.props;
              listener = _props[registrationName];
              if (shouldPreventMouseEvent(registrationName, currentElement.type, _props)) {
                return null;
              }
            }
            !(!listener || typeof listener === "function") ? invariant(false, "Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener) : void 0;
            return listener;
          },
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var events;
            var plugins = EventPluginRegistry_1.plugins;
            for (var i = 0; i < plugins.length; i++) {
              var possiblePlugin = plugins[i];
              if (possiblePlugin) {
                var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
                if (extractedEvents) {
                  events = accumulateInto_1(events, extractedEvents);
                }
              }
            }
            return events;
          },
          enqueueEvents: function(events) {
            if (events) {
              eventQueue = accumulateInto_1(eventQueue, events);
            }
          },
          processEventQueue: function(simulated) {
            var processingEventQueue = eventQueue;
            eventQueue = null;
            if (simulated) {
              forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseSimulated);
            } else {
              forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseTopLevel);
            }
            !!eventQueue ? invariant(false, "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.") : void 0;
            ReactErrorUtils_1.rethrowCaughtError();
          }
        };
        var EventPluginHub_1 = EventPluginHub;
        function runEventQueueInBatch(events) {
          EventPluginHub_1.enqueueEvents(events);
          EventPluginHub_1.processEventQueue(false);
        }
        var ReactEventEmitterMixin = {
          handleTopLevel: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var events = EventPluginHub_1.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            runEventQueueInBatch(events);
          }
        };
        var ReactEventEmitterMixin_1 = ReactEventEmitterMixin;
        var useHasFeature;
        if (ExecutionEnvironment.canUseDOM) {
          useHasFeature = document.implementation && document.implementation.hasFeature && document.implementation.hasFeature("", "") !== true;
        }
        function isEventSupported(eventNameSuffix, capture) {
          if (!ExecutionEnvironment.canUseDOM || capture && !("addEventListener" in document)) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          if (!isSupported && useHasFeature && eventNameSuffix === "wheel") {
            isSupported = document.implementation.hasFeature("Events.wheel", "3.0");
          }
          return isSupported;
        }
        var isEventSupported_1 = isEventSupported;
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          prefixes2["ms" + styleProp] = "MS" + eventName;
          prefixes2["O" + styleProp] = "o" + eventName.toLowerCase();
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (ExecutionEnvironment.canUseDOM) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return "";
        }
        var getVendorPrefixedEventName_1 = getVendorPrefixedEventName;
        var topLevelTypes$1 = {
          topAbort: "abort",
          topAnimationEnd: getVendorPrefixedEventName_1("animationend") || "animationend",
          topAnimationIteration: getVendorPrefixedEventName_1("animationiteration") || "animationiteration",
          topAnimationStart: getVendorPrefixedEventName_1("animationstart") || "animationstart",
          topBlur: "blur",
          topCancel: "cancel",
          topCanPlay: "canplay",
          topCanPlayThrough: "canplaythrough",
          topChange: "change",
          topClick: "click",
          topClose: "close",
          topCompositionEnd: "compositionend",
          topCompositionStart: "compositionstart",
          topCompositionUpdate: "compositionupdate",
          topContextMenu: "contextmenu",
          topCopy: "copy",
          topCut: "cut",
          topDoubleClick: "dblclick",
          topDrag: "drag",
          topDragEnd: "dragend",
          topDragEnter: "dragenter",
          topDragExit: "dragexit",
          topDragLeave: "dragleave",
          topDragOver: "dragover",
          topDragStart: "dragstart",
          topDrop: "drop",
          topDurationChange: "durationchange",
          topEmptied: "emptied",
          topEncrypted: "encrypted",
          topEnded: "ended",
          topError: "error",
          topFocus: "focus",
          topInput: "input",
          topKeyDown: "keydown",
          topKeyPress: "keypress",
          topKeyUp: "keyup",
          topLoadedData: "loadeddata",
          topLoad: "load",
          topLoadedMetadata: "loadedmetadata",
          topLoadStart: "loadstart",
          topMouseDown: "mousedown",
          topMouseMove: "mousemove",
          topMouseOut: "mouseout",
          topMouseOver: "mouseover",
          topMouseUp: "mouseup",
          topPaste: "paste",
          topPause: "pause",
          topPlay: "play",
          topPlaying: "playing",
          topProgress: "progress",
          topRateChange: "ratechange",
          topScroll: "scroll",
          topSeeked: "seeked",
          topSeeking: "seeking",
          topSelectionChange: "selectionchange",
          topStalled: "stalled",
          topSuspend: "suspend",
          topTextInput: "textInput",
          topTimeUpdate: "timeupdate",
          topToggle: "toggle",
          topTouchCancel: "touchcancel",
          topTouchEnd: "touchend",
          topTouchMove: "touchmove",
          topTouchStart: "touchstart",
          topTransitionEnd: getVendorPrefixedEventName_1("transitionend") || "transitionend",
          topVolumeChange: "volumechange",
          topWaiting: "waiting",
          topWheel: "wheel"
        };
        var BrowserEventConstants = {
          topLevelTypes: topLevelTypes$1
        };
        var BrowserEventConstants_1 = BrowserEventConstants;
        var topLevelTypes = BrowserEventConstants_1.topLevelTypes;
        var alreadyListeningTo = {};
        var reactTopListenersCounter = 0;
        var topListenersIDKey = "_reactListenersID" + ("" + Math.random()).slice(2);
        function getListeningForDocument(mountAt) {
          if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
            mountAt[topListenersIDKey] = reactTopListenersCounter++;
            alreadyListeningTo[mountAt[topListenersIDKey]] = {};
          }
          return alreadyListeningTo[mountAt[topListenersIDKey]];
        }
        var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin_1, {
          setEnabled: function(enabled) {
            if (ReactDOMEventListener_1) {
              ReactDOMEventListener_1.setEnabled(enabled);
            }
          },
          isEnabled: function() {
            return !!(ReactDOMEventListener_1 && ReactDOMEventListener_1.isEnabled());
          },
          listenTo: function(registrationName, contentDocumentHandle) {
            var mountAt = contentDocumentHandle;
            var isListening = getListeningForDocument(mountAt);
            var dependencies = EventPluginRegistry_1.registrationNameDependencies[registrationName];
            for (var i = 0; i < dependencies.length; i++) {
              var dependency = dependencies[i];
              if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
                if (dependency === "topWheel") {
                  if (isEventSupported_1("wheel")) {
                    ReactDOMEventListener_1.trapBubbledEvent("topWheel", "wheel", mountAt);
                  } else if (isEventSupported_1("mousewheel")) {
                    ReactDOMEventListener_1.trapBubbledEvent("topWheel", "mousewheel", mountAt);
                  } else {
                    ReactDOMEventListener_1.trapBubbledEvent("topWheel", "DOMMouseScroll", mountAt);
                  }
                } else if (dependency === "topScroll") {
                  ReactDOMEventListener_1.trapCapturedEvent("topScroll", "scroll", mountAt);
                } else if (dependency === "topFocus" || dependency === "topBlur") {
                  ReactDOMEventListener_1.trapCapturedEvent("topFocus", "focus", mountAt);
                  ReactDOMEventListener_1.trapCapturedEvent("topBlur", "blur", mountAt);
                  isListening.topBlur = true;
                  isListening.topFocus = true;
                } else if (dependency === "topCancel") {
                  if (isEventSupported_1("cancel", true)) {
                    ReactDOMEventListener_1.trapCapturedEvent("topCancel", "cancel", mountAt);
                  }
                  isListening.topCancel = true;
                } else if (dependency === "topClose") {
                  if (isEventSupported_1("close", true)) {
                    ReactDOMEventListener_1.trapCapturedEvent("topClose", "close", mountAt);
                  }
                  isListening.topClose = true;
                } else if (topLevelTypes.hasOwnProperty(dependency)) {
                  ReactDOMEventListener_1.trapBubbledEvent(dependency, topLevelTypes[dependency], mountAt);
                }
                isListening[dependency] = true;
              }
            }
          },
          isListeningToAllDependencies: function(registrationName, mountAt) {
            var isListening = getListeningForDocument(mountAt);
            var dependencies = EventPluginRegistry_1.registrationNameDependencies[registrationName];
            for (var i = 0; i < dependencies.length; i++) {
              var dependency = dependencies[i];
              if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
                return false;
              }
            }
            return true;
          },
          trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
            return ReactDOMEventListener_1.trapBubbledEvent(topLevelType, handlerBaseName, handle);
          },
          trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
            return ReactDOMEventListener_1.trapCapturedEvent(topLevelType, handlerBaseName, handle);
          }
        });
        var ReactBrowserEventEmitter_1 = ReactBrowserEventEmitter;
        var ReactDOMFeatureFlags = {
          fiberAsyncScheduling: false,
          useFiber: true
        };
        var ReactDOMFeatureFlags_1 = ReactDOMFeatureFlags;
        var isUnitlessNumber = {
          animationIterationCount: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix, key) {
          return prefix + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix) {
            isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
          });
        });
        var shorthandPropertyExpansions = {
          background: {
            backgroundAttachment: true,
            backgroundColor: true,
            backgroundImage: true,
            backgroundPositionX: true,
            backgroundPositionY: true,
            backgroundRepeat: true
          },
          backgroundPosition: {
            backgroundPositionX: true,
            backgroundPositionY: true
          },
          border: {
            borderWidth: true,
            borderStyle: true,
            borderColor: true
          },
          borderBottom: {
            borderBottomWidth: true,
            borderBottomStyle: true,
            borderBottomColor: true
          },
          borderLeft: {
            borderLeftWidth: true,
            borderLeftStyle: true,
            borderLeftColor: true
          },
          borderRight: {
            borderRightWidth: true,
            borderRightStyle: true,
            borderRightColor: true
          },
          borderTop: {
            borderTopWidth: true,
            borderTopStyle: true,
            borderTopColor: true
          },
          font: {
            fontStyle: true,
            fontVariant: true,
            fontWeight: true,
            fontSize: true,
            lineHeight: true,
            fontFamily: true
          },
          outline: {
            outlineWidth: true,
            outlineStyle: true,
            outlineColor: true
          }
        };
        var CSSProperty = {
          isUnitlessNumber,
          shorthandPropertyExpansions
        };
        var CSSProperty_1 = CSSProperty;
        var isUnitlessNumber$1 = CSSProperty_1.isUnitlessNumber;
        function dangerousStyleValue(name, value, isCustomProperty) {
          var isEmpty2 = value == null || typeof value === "boolean" || value === "";
          if (isEmpty2) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber$1.hasOwnProperty(name) && isUnitlessNumber$1[name])) {
            return value + "px";
          }
          return ("" + value).trim();
        }
        var dangerousStyleValue_1 = dangerousStyleValue;
        var describeComponentFrame = function(name, source, ownerName) {
          return "\n    in " + (name || "Unknown") + (source ? " (at " + source.fileName.replace(/^.*[\\\/]/, "") + ":" + source.lineNumber + ")" : ownerName ? " (created by " + ownerName + ")" : "");
        };
        var IndeterminateComponent = ReactTypeOfWork.IndeterminateComponent;
        var FunctionalComponent = ReactTypeOfWork.FunctionalComponent;
        var ClassComponent$1 = ReactTypeOfWork.ClassComponent;
        var HostComponent$2 = ReactTypeOfWork.HostComponent;
        function describeFiber(fiber) {
          switch (fiber.tag) {
            case IndeterminateComponent:
            case FunctionalComponent:
            case ClassComponent$1:
            case HostComponent$2:
              var owner = fiber._debugOwner;
              var source = fiber._debugSource;
              var name = getComponentName_1(fiber);
              var ownerName = null;
              if (owner) {
                ownerName = getComponentName_1(owner);
              }
              return describeComponentFrame(name, source, ownerName);
            default:
              return "";
          }
        }
        function getStackAddendumByWorkInProgressFiber$1(workInProgress) {
          var info = "";
          var node = workInProgress;
          do {
            info += describeFiber(node);
            node = node["return"];
          } while (node);
          return info;
        }
        var ReactFiberComponentTreeHook = {
          getStackAddendumByWorkInProgressFiber: getStackAddendumByWorkInProgressFiber$1
        };
        var ReactDebugCurrentFrame = ReactGlobalSharedState_1.ReactDebugCurrentFrame;
        {
          var getComponentName$3 = getComponentName_1;
          var _require2$2 = ReactFiberComponentTreeHook, getStackAddendumByWorkInProgressFiber = _require2$2.getStackAddendumByWorkInProgressFiber;
        }
        function getCurrentFiberOwnerName$2() {
          {
            var fiber = ReactDebugCurrentFiber.current;
            if (fiber === null) {
              return null;
            }
            if (fiber._debugOwner != null) {
              return getComponentName$3(fiber._debugOwner);
            }
          }
          return null;
        }
        function getCurrentFiberStackAddendum$1() {
          {
            var fiber = ReactDebugCurrentFiber.current;
            if (fiber === null) {
              return null;
            }
            return getStackAddendumByWorkInProgressFiber(fiber);
          }
          return null;
        }
        function resetCurrentFiber() {
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFiber.current = null;
          ReactDebugCurrentFiber.phase = null;
        }
        function setCurrentFiber(fiber, phase) {
          ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum$1;
          ReactDebugCurrentFiber.current = fiber;
          ReactDebugCurrentFiber.phase = phase;
        }
        var ReactDebugCurrentFiber = {
          current: null,
          phase: null,
          resetCurrentFiber,
          setCurrentFiber,
          getCurrentFiberOwnerName: getCurrentFiberOwnerName$2,
          getCurrentFiberStackAddendum: getCurrentFiberStackAddendum$1
        };
        var ReactDebugCurrentFiber_1 = ReactDebugCurrentFiber;
        var warnValidStyle$1 = emptyFunction;
        {
          var camelizeStyleName$1 = camelizeStyleName;
          var getComponentName$2 = getComponentName_1;
          var warning$4 = require$$0;
          var _require$3 = ReactDebugCurrentFiber_1, getCurrentFiberOwnerName$1 = _require$3.getCurrentFiberOwnerName;
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var warnHyphenatedStyleName = function(name, owner) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            warning$4(false, "Unsupported style property %s. Did you mean %s?%s", name, camelizeStyleName$1(name), checkRenderMessage(owner));
          };
          var warnBadVendoredStyleName = function(name, owner) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            warning$4(false, "Unsupported vendor-prefixed style property %s. Did you mean %s?%s", name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner));
          };
          var warnStyleValueWithSemicolon = function(name, value, owner) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            warning$4(false, `Style property values shouldn't contain a semicolon.%s Try "%s: %s" instead.`, checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value, owner) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            warning$4(false, "`NaN` is an invalid value for the `%s` css style property.%s", name, checkRenderMessage(owner));
          };
          var warnStyleValueIsInfinity = function(name, value, owner) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            warning$4(false, "`Infinity` is an invalid value for the `%s` css style property.%s", name, checkRenderMessage(owner));
          };
          var checkRenderMessage = function(owner) {
            var ownerName;
            if (owner != null) {
              ownerName = getComponentName$2(owner);
            } else {
              ownerName = getCurrentFiberOwnerName$1();
            }
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          };
          warnValidStyle$1 = function(name, value, component) {
            var owner;
            if (component) {
              owner = component._currentElement._owner;
            }
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name, owner);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name, owner);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value, owner);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value, owner);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value, owner);
              }
            }
          };
        }
        var warnValidStyle_1 = warnValidStyle$1;
        {
          var hyphenateStyleName$1 = hyphenateStyleName;
          var warnValidStyle = warnValidStyle_1;
        }
        var hasShorthandPropertyBug = false;
        if (ExecutionEnvironment.canUseDOM) {
          var tempStyle = document.createElement("div").style;
          try {
            tempStyle.font = "";
          } catch (e) {
            hasShorthandPropertyBug = true;
          }
        }
        var CSSPropertyOperations = {
          createDangerousStringForStyles: function(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + hyphenateStyleName$1(styleName) + ":";
                  serialized += dangerousStyleValue_1(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          },
          setValueForStyles: function(node, styles, component) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle(styleName, styles[styleName], component);
                }
              }
              var styleValue = dangerousStyleValue_1(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else if (styleValue) {
                style2[styleName] = styleValue;
              } else {
                var expansion = hasShorthandPropertyBug && CSSProperty_1.shorthandPropertyExpansions[styleName];
                if (expansion) {
                  for (var individualStyleName in expansion) {
                    style2[individualStyleName] = "";
                  }
                } else {
                  style2[styleName] = "";
                }
              }
            }
          }
        };
        var CSSPropertyOperations_1 = CSSPropertyOperations;
        var ReactInvalidSetStateWarningHook = {};
        {
          var warning$7 = require$$0;
          var processingChildContext = false;
          var warnInvalidSetState = function() {
            warning$7(!processingChildContext, "setState(...): Cannot call setState() inside getChildContext()");
          };
          ReactInvalidSetStateWarningHook = {
            onBeginProcessingChildContext: function() {
              processingChildContext = true;
            },
            onEndProcessingChildContext: function() {
              processingChildContext = false;
            },
            onSetState: function() {
              warnInvalidSetState();
            }
          };
        }
        var ReactInvalidSetStateWarningHook_1 = ReactInvalidSetStateWarningHook;
        var ReactHostOperationHistoryHook = null;
        {
          var history = [];
          ReactHostOperationHistoryHook = {
            onHostOperation: function(operation) {
              history.push(operation);
            },
            clearHistory: function() {
              if (ReactHostOperationHistoryHook._preventClearing) {
                return;
              }
              history = [];
            },
            getHistory: function() {
              return history;
            }
          };
        }
        var ReactHostOperationHistoryHook_1 = ReactHostOperationHistoryHook;
        var ReactComponentTreeHook = ReactGlobalSharedState_1.ReactComponentTreeHook;
        {
          var warning$6 = require$$0;
        }
        var ReactDebugTool$1 = null;
        {
          var hooks = [];
          var didHookThrowForEvent = {};
          var callHook = function(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
            try {
              fn.call(context, arg1, arg2, arg3, arg4, arg5);
            } catch (e) {
              warning$6(didHookThrowForEvent[event], "Exception thrown by hook while handling %s: %s", event, e + "\n" + e.stack);
              didHookThrowForEvent[event] = true;
            }
          };
          var emitEvent = function(event, arg1, arg2, arg3, arg4, arg5) {
            for (var i = 0; i < hooks.length; i++) {
              var hook = hooks[i];
              var fn = hook[event];
              if (fn) {
                callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
              }
            }
          };
          var isProfiling = false;
          var flushHistory = [];
          var lifeCycleTimerStack = [];
          var currentFlushNesting = 0;
          var currentFlushMeasurements = [];
          var currentFlushStartTime = 0;
          var currentTimerDebugID = null;
          var currentTimerStartTime = 0;
          var currentTimerNestedFlushDuration = 0;
          var currentTimerType = null;
          var lifeCycleTimerHasWarned = false;
          var clearHistory = function() {
            ReactComponentTreeHook.purgeUnmountedComponents();
            ReactHostOperationHistoryHook_1.clearHistory();
          };
          var getTreeSnapshot = function(registeredIDs) {
            return registeredIDs.reduce(function(tree, id) {
              var ownerID = ReactComponentTreeHook.getOwnerID(id);
              var parentID = ReactComponentTreeHook.getParentID(id);
              tree[id] = {
                displayName: ReactComponentTreeHook.getDisplayName(id),
                text: ReactComponentTreeHook.getText(id),
                updateCount: ReactComponentTreeHook.getUpdateCount(id),
                childIDs: ReactComponentTreeHook.getChildIDs(id),
                ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
                parentID
              };
              return tree;
            }, {});
          };
          var resetMeasurements = function() {
            var previousStartTime = currentFlushStartTime;
            var previousMeasurements = currentFlushMeasurements;
            var previousOperations = ReactHostOperationHistoryHook_1.getHistory();
            if (currentFlushNesting === 0) {
              currentFlushStartTime = 0;
              currentFlushMeasurements = [];
              clearHistory();
              return;
            }
            if (previousMeasurements.length || previousOperations.length) {
              var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
              flushHistory.push({
                duration: performanceNow() - previousStartTime,
                measurements: previousMeasurements || [],
                operations: previousOperations || [],
                treeSnapshot: getTreeSnapshot(registeredIDs)
              });
            }
            clearHistory();
            currentFlushStartTime = performanceNow();
            currentFlushMeasurements = [];
          };
          var checkDebugID = function(debugID) {
            var allowRoot = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
            if (allowRoot && debugID === 0) {
              return;
            }
            if (!debugID) {
              warning$6(false, "ReactDebugTool: debugID may not be empty.");
            }
          };
          var beginLifeCycleTimer = function(debugID, timerType) {
            if (currentFlushNesting === 0) {
              return;
            }
            if (currentTimerType && !lifeCycleTimerHasWarned) {
              warning$6(false, "There is an internal error in the React performance measurement code.\n\nDid not expect %s timer to start while %s timer is still in progress for %s instance.", timerType, currentTimerType || "no", debugID === currentTimerDebugID ? "the same" : "another");
              lifeCycleTimerHasWarned = true;
            }
            currentTimerStartTime = performanceNow();
            currentTimerNestedFlushDuration = 0;
            currentTimerDebugID = debugID;
            currentTimerType = timerType;
          };
          var endLifeCycleTimer = function(debugID, timerType) {
            if (currentFlushNesting === 0) {
              return;
            }
            if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
              warning$6(false, "There is an internal error in the React performance measurement code. We did not expect %s timer to stop while %s timer is still in progress for %s instance. Please report this as a bug in React.", timerType, currentTimerType || "no", debugID === currentTimerDebugID ? "the same" : "another");
              lifeCycleTimerHasWarned = true;
            }
            if (isProfiling) {
              currentFlushMeasurements.push({
                timerType,
                instanceID: debugID,
                duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
              });
            }
            currentTimerStartTime = 0;
            currentTimerNestedFlushDuration = 0;
            currentTimerDebugID = null;
            currentTimerType = null;
          };
          var pauseCurrentLifeCycleTimer = function() {
            var currentTimer = {
              startTime: currentTimerStartTime,
              nestedFlushStartTime: performanceNow(),
              debugID: currentTimerDebugID,
              timerType: currentTimerType
            };
            lifeCycleTimerStack.push(currentTimer);
            currentTimerStartTime = 0;
            currentTimerNestedFlushDuration = 0;
            currentTimerDebugID = null;
            currentTimerType = null;
          };
          var resumeCurrentLifeCycleTimer = function() {
            var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(), startTime = _lifeCycleTimerStack$.startTime, nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime, debugID = _lifeCycleTimerStack$.debugID, timerType = _lifeCycleTimerStack$.timerType;
            var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
            currentTimerStartTime = startTime;
            currentTimerNestedFlushDuration += nestedFlushDuration;
            currentTimerDebugID = debugID;
            currentTimerType = timerType;
          };
          var lastMarkTimeStamp = 0;
          var canUsePerformanceMeasure = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
          var shouldMark = function(debugID) {
            if (!isProfiling || !canUsePerformanceMeasure) {
              return false;
            }
            var element = ReactComponentTreeHook.getElement(debugID);
            if (element == null || typeof element !== "object") {
              return false;
            }
            var isHostElement = typeof element.type === "string";
            if (isHostElement) {
              return false;
            }
            return true;
          };
          var markBegin = function(debugID, markType) {
            if (!shouldMark(debugID)) {
              return;
            }
            var markName = debugID + "::" + markType;
            lastMarkTimeStamp = performanceNow();
            performance.mark(markName);
          };
          var markEnd = function(debugID, markType) {
            if (!shouldMark(debugID)) {
              return;
            }
            var markName = debugID + "::" + markType;
            var displayName = ReactComponentTreeHook.getDisplayName(debugID) || "Unknown";
            var timeStamp = performanceNow();
            if (timeStamp - lastMarkTimeStamp > 0.1) {
              var measurementName = displayName + " [" + markType + "]";
              performance.measure(measurementName, markName);
            }
            performance.clearMarks(markName);
            if (measurementName) {
              performance.clearMeasures(measurementName);
            }
          };
          ReactDebugTool$1 = {
            addHook: function(hook) {
              hooks.push(hook);
            },
            removeHook: function(hook) {
              for (var i = 0; i < hooks.length; i++) {
                if (hooks[i] === hook) {
                  hooks.splice(i, 1);
                  i--;
                }
              }
            },
            isProfiling: function() {
              return isProfiling;
            },
            beginProfiling: function() {
              if (isProfiling) {
                return;
              }
              isProfiling = true;
              flushHistory.length = 0;
              resetMeasurements();
              ReactDebugTool$1.addHook(ReactHostOperationHistoryHook_1);
            },
            endProfiling: function() {
              if (!isProfiling) {
                return;
              }
              isProfiling = false;
              resetMeasurements();
              ReactDebugTool$1.removeHook(ReactHostOperationHistoryHook_1);
            },
            getFlushHistory: function() {
              return flushHistory;
            },
            onBeginFlush: function() {
              currentFlushNesting++;
              resetMeasurements();
              pauseCurrentLifeCycleTimer();
              emitEvent("onBeginFlush");
            },
            onEndFlush: function() {
              resetMeasurements();
              currentFlushNesting--;
              resumeCurrentLifeCycleTimer();
              emitEvent("onEndFlush");
            },
            onBeginLifeCycleTimer: function(debugID, timerType) {
              checkDebugID(debugID);
              emitEvent("onBeginLifeCycleTimer", debugID, timerType);
              markBegin(debugID, timerType);
              beginLifeCycleTimer(debugID, timerType);
            },
            onEndLifeCycleTimer: function(debugID, timerType) {
              checkDebugID(debugID);
              endLifeCycleTimer(debugID, timerType);
              markEnd(debugID, timerType);
              emitEvent("onEndLifeCycleTimer", debugID, timerType);
            },
            onBeginProcessingChildContext: function() {
              emitEvent("onBeginProcessingChildContext");
            },
            onEndProcessingChildContext: function() {
              emitEvent("onEndProcessingChildContext");
            },
            onHostOperation: function(operation) {
              checkDebugID(operation.instanceID);
              emitEvent("onHostOperation", operation);
            },
            onSetState: function() {
              emitEvent("onSetState");
            },
            onSetChildren: function(debugID, childDebugIDs) {
              checkDebugID(debugID);
              childDebugIDs.forEach(checkDebugID);
              emitEvent("onSetChildren", debugID, childDebugIDs);
            },
            onBeforeMountComponent: function(debugID, element, parentDebugID) {
              checkDebugID(debugID);
              checkDebugID(parentDebugID, true);
              emitEvent("onBeforeMountComponent", debugID, element, parentDebugID);
              markBegin(debugID, "mount");
            },
            onMountComponent: function(debugID) {
              checkDebugID(debugID);
              markEnd(debugID, "mount");
              emitEvent("onMountComponent", debugID);
            },
            onBeforeUpdateComponent: function(debugID, element) {
              checkDebugID(debugID);
              emitEvent("onBeforeUpdateComponent", debugID, element);
              markBegin(debugID, "update");
            },
            onUpdateComponent: function(debugID) {
              checkDebugID(debugID);
              markEnd(debugID, "update");
              emitEvent("onUpdateComponent", debugID);
            },
            onBeforeUnmountComponent: function(debugID) {
              checkDebugID(debugID);
              emitEvent("onBeforeUnmountComponent", debugID);
              markBegin(debugID, "unmount");
            },
            onUnmountComponent: function(debugID) {
              checkDebugID(debugID);
              markEnd(debugID, "unmount");
              emitEvent("onUnmountComponent", debugID);
            },
            onTestEvent: function() {
              emitEvent("onTestEvent");
            }
          };
          ReactDebugTool$1.addHook(ReactInvalidSetStateWarningHook_1);
          ReactDebugTool$1.addHook(ReactComponentTreeHook);
          var url = ExecutionEnvironment.canUseDOM && window.location.href || "";
          if (/[?&]react_perf\b/.test(url)) {
            ReactDebugTool$1.beginProfiling();
          }
        }
        var ReactDebugTool_1 = ReactDebugTool$1;
        var debugTool = null;
        {
          var ReactDebugTool = ReactDebugTool_1;
          debugTool = ReactDebugTool;
        }
        var ReactInstrumentation = { debugTool };
        {
          var warning$5 = require$$0;
        }
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + DOMProperty_1.ATTRIBUTE_NAME_START_CHAR + "][" + DOMProperty_1.ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
            return true;
          }
          if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            warning$5(false, "Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreValue(propertyInfo, value) {
          return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
        }
        var DOMPropertyOperations = {
          setAttributeForID: function(node, id) {
            node.setAttribute(DOMProperty_1.ID_ATTRIBUTE_NAME, id);
          },
          setAttributeForRoot: function(node) {
            node.setAttribute(DOMProperty_1.ROOT_ATTRIBUTE_NAME, "");
          },
          getValueForProperty: function(node, name, expected) {
            {
              var propertyInfo = DOMProperty_1.getPropertyInfo(name);
              if (propertyInfo) {
                var mutationMethod = propertyInfo.mutationMethod;
                if (mutationMethod || propertyInfo.mustUseProperty) {
                  return node[propertyInfo.propertyName];
                } else {
                  var attributeName = propertyInfo.attributeName;
                  var stringValue = null;
                  if (propertyInfo.hasOverloadedBooleanValue) {
                    if (node.hasAttribute(attributeName)) {
                      var value = node.getAttribute(attributeName);
                      if (value === "") {
                        return true;
                      }
                      if (shouldIgnoreValue(propertyInfo, expected)) {
                        return value;
                      }
                      if (value === "" + expected) {
                        return expected;
                      }
                      return value;
                    }
                  } else if (node.hasAttribute(attributeName)) {
                    if (shouldIgnoreValue(propertyInfo, expected)) {
                      return node.getAttribute(attributeName);
                    }
                    if (propertyInfo.hasBooleanValue) {
                      return expected;
                    }
                    stringValue = node.getAttribute(attributeName);
                  }
                  if (shouldIgnoreValue(propertyInfo, expected)) {
                    return stringValue === null ? expected : stringValue;
                  } else if (stringValue === "" + expected) {
                    return expected;
                  } else {
                    return stringValue;
                  }
                }
              }
            }
          },
          getValueForAttribute: function(node, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          },
          setValueForProperty: function(node, name, value) {
            var propertyInfo = DOMProperty_1.getPropertyInfo(name);
            if (propertyInfo && DOMProperty_1.shouldSetAttribute(name, value)) {
              var mutationMethod = propertyInfo.mutationMethod;
              if (mutationMethod) {
                mutationMethod(node, value);
              } else if (shouldIgnoreValue(propertyInfo, value)) {
                DOMPropertyOperations.deleteValueForProperty(node, name);
                return;
              } else if (propertyInfo.mustUseProperty) {
                node[propertyInfo.propertyName] = value;
              } else {
                var attributeName = propertyInfo.attributeName;
                var namespace = propertyInfo.attributeNamespace;
                if (namespace) {
                  node.setAttributeNS(namespace, attributeName, "" + value);
                } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
                  node.setAttribute(attributeName, "");
                } else {
                  node.setAttribute(attributeName, "" + value);
                }
              }
            } else {
              DOMPropertyOperations.setValueForAttribute(node, name, DOMProperty_1.shouldSetAttribute(name, value) ? value : null);
              return;
            }
            {
              var payload = {};
              payload[name] = value;
              ReactInstrumentation.debugTool.onHostOperation({
                instanceID: ReactDOMComponentTree_1.getInstanceFromNode(node)._debugID,
                type: "update attribute",
                payload
              });
            }
          },
          setValueForAttribute: function(node, name, value) {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (value == null) {
              node.removeAttribute(name);
            } else {
              node.setAttribute(name, "" + value);
            }
            {
              var payload = {};
              payload[name] = value;
              ReactInstrumentation.debugTool.onHostOperation({
                instanceID: ReactDOMComponentTree_1.getInstanceFromNode(node)._debugID,
                type: "update attribute",
                payload
              });
            }
          },
          deleteValueForAttribute: function(node, name) {
            node.removeAttribute(name);
            {
              ReactInstrumentation.debugTool.onHostOperation({
                instanceID: ReactDOMComponentTree_1.getInstanceFromNode(node)._debugID,
                type: "remove attribute",
                payload: name
              });
            }
          },
          deleteValueForProperty: function(node, name) {
            var propertyInfo = DOMProperty_1.getPropertyInfo(name);
            if (propertyInfo) {
              var mutationMethod = propertyInfo.mutationMethod;
              if (mutationMethod) {
                mutationMethod(node, void 0);
              } else if (propertyInfo.mustUseProperty) {
                var propName = propertyInfo.propertyName;
                if (propertyInfo.hasBooleanValue) {
                  node[propName] = false;
                } else {
                  node[propName] = "";
                }
              } else {
                node.removeAttribute(propertyInfo.attributeName);
              }
            } else {
              node.removeAttribute(name);
            }
            {
              ReactInstrumentation.debugTool.onHostOperation({
                instanceID: ReactDOMComponentTree_1.getInstanceFromNode(node)._debugID,
                type: "remove attribute",
                payload: name
              });
            }
          }
        };
        var DOMPropertyOperations_1 = DOMPropertyOperations;
        var ReactControlledValuePropTypes = {
          checkPropTypes: null
        };
        {
          var warning$9 = require$$0;
          var emptyFunction$2 = emptyFunction;
          var PropTypes = propTypes;
          var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
          ReactControlledValuePropTypes.checkPropTypes = emptyFunction$2;
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          var propTypes$1 = {
            value: function(props, propName, componentName) {
              if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
                return null;
              }
              return new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            },
            checked: function(props, propName, componentName) {
              if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
                return null;
              }
              return new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            },
            onChange: PropTypes.func
          };
          var loggedTypeFailures = {};
          ReactControlledValuePropTypes.checkPropTypes = function(tagName, props, getStack) {
            for (var propName in propTypes$1) {
              if (propTypes$1.hasOwnProperty(propName)) {
                var error = propTypes$1[propName](props, propName, tagName, "prop", null, ReactPropTypesSecret);
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                warning$9(false, "Failed form propType: %s%s", error.message, getStack());
              }
            }
          };
        }
        var ReactControlledValuePropTypes_1 = ReactControlledValuePropTypes;
        var getCurrentFiberOwnerName$3 = ReactDebugCurrentFiber_1.getCurrentFiberOwnerName;
        {
          var _require2$3 = ReactDebugCurrentFiber_1, getCurrentFiberStackAddendum$2 = _require2$3.getCurrentFiberStackAddendum;
          var warning$8 = require$$0;
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        var ReactDOMInput = {
          getHostProps: function(element, props) {
            var node = element;
            var value = props.value;
            var checked = props.checked;
            var hostProps = _assign({
              type: void 0,
              step: void 0,
              min: void 0,
              max: void 0
            }, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: value != null ? value : node._wrapperState.initialValue,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          },
          initWrapperState: function(element, props) {
            {
              ReactControlledValuePropTypes_1.checkPropTypes("input", props, getCurrentFiberStackAddendum$2);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                warning$8(false, "%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerName$3() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                warning$8(false, "%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerName$3() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var defaultValue = props.defaultValue;
            var node = element;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: props.value != null ? props.value : defaultValue,
              controlled: isControlled(props)
            };
          },
          updateWrapper: function(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                warning$8(false, "A component is changing an uncontrolled input of type %s to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s", props.type, getCurrentFiberStackAddendum$2());
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                warning$8(false, "A component is changing a controlled input of type %s to be uncontrolled. Input elements should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s", props.type, getCurrentFiberStackAddendum$2());
                didWarnControlledToUncontrolled = true;
              }
            }
            var checked = props.checked;
            if (checked != null) {
              DOMPropertyOperations_1.setValueForProperty(node, "checked", checked || false);
            }
            var value = props.value;
            if (value != null) {
              if (value === 0 && node.value === "") {
                node.value = "0";
              } else if (props.type === "number") {
                var valueAsNumber = parseFloat(node.value) || 0;
                if (value != valueAsNumber || value == valueAsNumber && node.value != value) {
                  node.value = "" + value;
                }
              } else if (node.value !== "" + value) {
                node.value = "" + value;
              }
            } else {
              if (props.value == null && props.defaultValue != null) {
                if (node.defaultValue !== "" + props.defaultValue) {
                  node.defaultValue = "" + props.defaultValue;
                }
              }
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          },
          postMountWrapper: function(element, props) {
            var node = element;
            switch (props.type) {
              case "submit":
              case "reset":
                break;
              case "color":
              case "date":
              case "datetime":
              case "datetime-local":
              case "month":
              case "time":
              case "week":
                node.value = "";
                node.value = node.defaultValue;
                break;
              default:
                node.value = node.value;
                break;
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !node.defaultChecked;
            if (name !== "") {
              node.name = name;
            }
          },
          restoreControlledState: function(element, props) {
            var node = element;
            ReactDOMInput.updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
        };
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i = 0; i < group.length; i++) {
              var otherNode = group[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = ReactDOMComponentTree_1.getFiberCurrentPropsFromNode(otherNode);
              !otherProps ? invariant(false, "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.") : void 0;
              ReactDOMInput.updateWrapper(otherNode, otherProps);
            }
          }
        }
        var ReactDOMFiberInput = ReactDOMInput;
        {
          var warning$10 = require$$0;
        }
        function flattenChildren(children) {
          var content = "";
          react.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            if (typeof child === "string" || typeof child === "number") {
              content += child;
            }
          });
          return content;
        }
        var ReactDOMOption = {
          validateProps: function(element, props) {
            {
              warning$10(props.selected == null, "Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            }
          },
          postMountWrapper: function(element, props) {
            if (props.value != null) {
              element.setAttribute("value", props.value);
            }
          },
          getHostProps: function(element, props) {
            var hostProps = _assign({ children: void 0 }, props);
            var content = flattenChildren(props.children);
            if (content) {
              hostProps.children = content;
            }
            return hostProps;
          }
        };
        var ReactDOMFiberOption = ReactDOMOption;
        var getCurrentFiberOwnerName$4 = ReactDebugCurrentFiber_1.getCurrentFiberOwnerName;
        {
          var didWarnValueDefaultValue$1 = false;
          var warning$11 = require$$0;
          var _require2$4 = ReactDebugCurrentFiber_1, getCurrentFiberStackAddendum$3 = _require2$4.getCurrentFiberStackAddendum;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerName$4();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          ReactControlledValuePropTypes_1.checkPropTypes("select", props, getCurrentFiberStackAddendum$3);
          for (var i = 0; i < valuePropNames.length; i++) {
            var propName = valuePropNames[i];
            if (props[propName] == null) {
              continue;
            }
            var isArray2 = Array.isArray(props[propName]);
            if (props.multiple && !isArray2) {
              warning$11(false, "The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            } else if (!props.multiple && isArray2) {
              warning$11(false, "The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
            }
          }
        }
        function updateOptions(node, multiple, propValue) {
          var options = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options[_i].value);
              if (options[_i].selected !== selected) {
                options[_i].selected = selected;
              }
            }
          } else {
            var _selectedValue = "" + propValue;
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options.length; _i2++) {
              if (options[_i2].value === _selectedValue) {
                options[_i2].selected = true;
                return;
              }
              if (defaultSelected === null && !options[_i2].disabled) {
                defaultSelected = options[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        var ReactDOMSelect = {
          getHostProps: function(element, props) {
            return _assign({}, props, {
              value: void 0
            });
          },
          initWrapperState: function(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            var value = props.value;
            node._wrapperState = {
              initialValue: value != null ? value : props.defaultValue,
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                warning$11(false, "Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://fb.me/react-controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          },
          postMountWrapper: function(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue);
            }
          },
          postUpdateWrapper: function(element, props) {
            var node = element;
            node._wrapperState.initialValue = void 0;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "");
              }
            }
          },
          restoreControlledState: function(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value);
            }
          }
        };
        var ReactDOMFiberSelect = ReactDOMSelect;
        {
          var warning$12 = require$$0;
          var _require$4 = ReactDebugCurrentFiber_1, getCurrentFiberStackAddendum$4 = _require$4.getCurrentFiberStackAddendum;
        }
        var didWarnValDefaultVal = false;
        var ReactDOMTextarea = {
          getHostProps: function(element, props) {
            var node = element;
            !(props.dangerouslySetInnerHTML == null) ? invariant(false, "`dangerouslySetInnerHTML` does not make sense on <textarea>.") : void 0;
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: "" + node._wrapperState.initialValue
            });
            return hostProps;
          },
          initWrapperState: function(element, props) {
            var node = element;
            {
              ReactControlledValuePropTypes_1.checkPropTypes("textarea", props, getCurrentFiberStackAddendum$4);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                warning$12(false, "Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://fb.me/react-controlled-components");
                didWarnValDefaultVal = true;
              }
            }
            var value = props.value;
            var initialValue = value;
            if (value == null) {
              var defaultValue = props.defaultValue;
              var children = props.children;
              if (children != null) {
                {
                  warning$12(false, "Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                !(defaultValue == null) ? invariant(false, "If you supply `defaultValue` on a <textarea>, do not pass children.") : void 0;
                if (Array.isArray(children)) {
                  !(children.length <= 1) ? invariant(false, "<textarea> can only have at most one child.") : void 0;
                  children = children[0];
                }
                defaultValue = "" + children;
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: "" + initialValue
            };
          },
          updateWrapper: function(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              var newValue = "" + value;
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null) {
                node.defaultValue = newValue;
              }
            }
            if (props.defaultValue != null) {
              node.defaultValue = props.defaultValue;
            }
          },
          postMountWrapper: function(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              node.value = textContent;
            }
          },
          restoreControlledState: function(element, props) {
            ReactDOMTextarea.updateWrapper(element, props);
          }
        };
        var ReactDOMFiberTextarea = ReactDOMTextarea;
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
        };
        var omittedCloseTags_1 = omittedCloseTags;
        var voidElementTags = _assign({
          menuitem: true
        }, omittedCloseTags_1);
        var voidElementTags_1 = voidElementTags;
        {
          var warning$13 = require$$0;
        }
        var HTML$1 = "__html";
        function getDeclarationErrorAddendum$1(getCurrentOwnerName) {
          {
            var ownerName = getCurrentOwnerName();
            if (ownerName) {
              return "\n\nThis DOM node was rendered by `" + ownerName + "`.";
            }
          }
          return "";
        }
        function assertValidProps(tag, props, getCurrentOwnerName) {
          if (!props) {
            return;
          }
          if (voidElementTags_1[tag]) {
            !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, "%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s", tag, getDeclarationErrorAddendum$1(getCurrentOwnerName)) : void 0;
          }
          if (props.dangerouslySetInnerHTML != null) {
            !(props.children == null) ? invariant(false, "Can only set one of `children` or `props.dangerouslySetInnerHTML`.") : void 0;
            !(typeof props.dangerouslySetInnerHTML === "object" && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.") : void 0;
          }
          {
            warning$13(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, "A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
          }
          !(props.style == null || typeof props.style === "object") ? invariant(false, "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.%s", getDeclarationErrorAddendum$1(getCurrentOwnerName)) : void 0;
        }
        var assertValidProps_1 = assertValidProps;
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable,
            configurable: true,
            get: function() {
              return descriptor.get.call(this);
            },
            set: function(value) {
              currentValue = "" + value;
              descriptor.set.call(this, value);
            }
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        var inputValueTracking = {
          _getTrackerFromNode: getTracker,
          track: function(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          },
          updateValueIfChanged: function(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          },
          stopTracking: function(node) {
            var tracker = getTracker(node);
            if (tracker) {
              tracker.stopTracking();
            }
          }
        };
        var inputValueTracking_1 = inputValueTracking;
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var isCustomComponent_1 = isCustomComponent;
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var createMicrosoftUnsafeLocalFunction_1 = createMicrosoftUnsafeLocalFunction;
        var Namespaces$1 = DOMNamespaces.Namespaces;
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction_1(function(node, html) {
          if (node.namespaceURI === Namespaces$1.svg && !("innerHTML" in node)) {
            reusableSVGContainer = reusableSVGContainer || document.createElement("div");
            reusableSVGContainer.innerHTML = "<svg>" + html + "</svg>";
            var svgNode = reusableSVGContainer.firstChild;
            while (svgNode.firstChild) {
              node.appendChild(svgNode.firstChild);
            }
          } else {
            node.innerHTML = html;
          }
        });
        var setInnerHTML_1 = setInnerHTML;
        var matchHtmlRegExp = /["'&<>]/;
        function escapeHtml(string) {
          var str = "" + string;
          var match = matchHtmlRegExp.exec(str);
          if (!match) {
            return str;
          }
          var escape;
          var html = "";
          var index2 = 0;
          var lastIndex = 0;
          for (index2 = match.index; index2 < str.length; index2++) {
            switch (str.charCodeAt(index2)) {
              case 34:
                escape = "&quot;";
                break;
              case 38:
                escape = "&amp;";
                break;
              case 39:
                escape = "&#x27;";
                break;
              case 60:
                escape = "&lt;";
                break;
              case 62:
                escape = "&gt;";
                break;
              default:
                continue;
            }
            if (lastIndex !== index2) {
              html += str.substring(lastIndex, index2);
            }
            lastIndex = index2 + 1;
            html += escape;
          }
          return lastIndex !== index2 ? html + str.substring(lastIndex, index2) : html;
        }
        function escapeTextContentForBrowser(text) {
          if (typeof text === "boolean" || typeof text === "number") {
            return "" + text;
          }
          return escapeHtml(text);
        }
        var escapeTextContentForBrowser_1 = escapeTextContentForBrowser;
        var TEXT_NODE$2 = HTMLNodeType_1.TEXT_NODE;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE$2) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        if (ExecutionEnvironment.canUseDOM) {
          if (!("textContent" in document.documentElement)) {
            setTextContent = function(node, text) {
              if (node.nodeType === TEXT_NODE$2) {
                node.nodeValue = text;
                return;
              }
              setInnerHTML_1(node, escapeTextContentForBrowser_1(text));
            };
          }
        }
        var setTextContent_1 = setTextContent;
        var ariaProperties = {
          "aria-current": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var validAriaProperties$1 = ariaProperties;
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + DOMProperty_1.ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + DOMProperty_1.ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        {
          var warning$14 = require$$0;
          var _require$5 = ReactGlobalSharedState_1, ReactComponentTreeHook$1 = _require$5.ReactComponentTreeHook, ReactDebugCurrentFrame$1 = _require$5.ReactDebugCurrentFrame;
          var getStackAddendumByID = ReactComponentTreeHook$1.getStackAddendumByID;
          var validAriaProperties = validAriaProperties$1;
        }
        function getStackAddendum(debugID) {
          if (debugID != null) {
            return getStackAddendumByID(debugID);
          } else {
            var stack = ReactDebugCurrentFrame$1.getStackAddendum();
            return stack != null ? stack : "";
          }
        }
        function validateProperty(tagName, name, debugID) {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
            return true;
          }
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase();
            var correctName = validAriaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null) {
              warning$14(false, "Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.%s", name, getStackAddendum(debugID));
              warnedProperties[name] = true;
              return true;
            }
            if (name !== correctName) {
              warning$14(false, "Invalid ARIA attribute `%s`. Did you mean `%s`?%s", name, correctName, getStackAddendum(debugID));
              warnedProperties[name] = true;
              return true;
            }
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = validAriaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null) {
              warnedProperties[name] = true;
              return false;
            }
            if (name !== standardName) {
              warning$14(false, "Unknown ARIA attribute `%s`. Did you mean `%s`?%s", name, standardName, getStackAddendum(debugID));
              warnedProperties[name] = true;
              return true;
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props, debugID) {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty(type, key, debugID);
            if (!isValid) {
              invalidProps.push(key);
            }
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (invalidProps.length === 1) {
            warning$14(false, "Invalid aria prop %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop%s", unknownPropString, type, getStackAddendum(debugID));
          } else if (invalidProps.length > 1) {
            warning$14(false, "Invalid aria props %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop%s", unknownPropString, type, getStackAddendum(debugID));
          }
        }
        function validateProperties(type, props, debugID) {
          if (isCustomComponent_1(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props, debugID);
        }
        var ReactDOMInvalidARIAHook$1 = {
          validateProperties,
          onBeforeMountComponent: function(debugID, element) {
            if (element != null && typeof element.type === "string") {
              validateProperties(element.type, element.props, debugID);
            }
          },
          onBeforeUpdateComponent: function(debugID, element) {
            if (element != null && typeof element.type === "string") {
              validateProperties(element.type, element.props, debugID);
            }
          }
        };
        var ReactDOMInvalidARIAHook_1 = ReactDOMInvalidARIAHook$1;
        {
          var warning$15 = require$$0;
          var _require$6 = ReactGlobalSharedState_1, ReactComponentTreeHook$2 = _require$6.ReactComponentTreeHook, ReactDebugCurrentFrame$2 = _require$6.ReactDebugCurrentFrame;
          var getStackAddendumByID$1 = ReactComponentTreeHook$2.getStackAddendumByID;
        }
        var didWarnValueNull = false;
        function getStackAddendum$1(debugID) {
          if (debugID != null) {
            return getStackAddendumByID$1(debugID);
          } else {
            var stack = ReactDebugCurrentFrame$2.getStackAddendum();
            return stack != null ? stack : "";
          }
        }
        function validateProperties$1(type, props, debugID) {
          if (type !== "input" && type !== "textarea" && type !== "select") {
            return;
          }
          if (props != null && props.value === null && !didWarnValueNull) {
            warning$15(false, "`value` prop on `%s` should not be null. Consider using the empty string to clear the component or `undefined` for uncontrolled components.%s", type, getStackAddendum$1(debugID));
            didWarnValueNull = true;
          }
        }
        var ReactDOMNullInputValuePropHook$1 = {
          validateProperties: validateProperties$1,
          onBeforeMountComponent: function(debugID, element) {
            if (element != null && typeof element.type === "string") {
              validateProperties$1(element.type, element.props, debugID);
            }
          },
          onBeforeUpdateComponent: function(debugID, element) {
            if (element != null && typeof element.type === "string") {
              validateProperties$1(element.type, element.props, debugID);
            }
          }
        };
        var ReactDOMNullInputValuePropHook_1 = ReactDOMNullInputValuePropHook$1;
        var possibleStandardNames$1 = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          allowtransparency: "allowTransparency",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          "class": "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          "default": "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          "for": "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          "in": "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          "typeof": "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var possibleStandardNames_1 = possibleStandardNames$1;
        {
          var warning$16 = require$$0;
          var _require$7 = ReactGlobalSharedState_1, ReactComponentTreeHook$3 = _require$7.ReactComponentTreeHook, ReactDebugCurrentFrame$3 = _require$7.ReactDebugCurrentFrame;
          var getStackAddendumByID$2 = ReactComponentTreeHook$3.getStackAddendumByID;
        }
        function getStackAddendum$2(debugID) {
          if (debugID != null) {
            return getStackAddendumByID$2(debugID);
          } else {
            var stack = ReactDebugCurrentFrame$3.getStackAddendum();
            return stack != null ? stack : "";
          }
        }
        {
          var warnedProperties$1 = {};
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
          var EVENT_NAME_REGEX = /^on[A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + DOMProperty_1.ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + DOMProperty_1.ATTRIBUTE_NAME_CHAR + "]*$");
          var possibleStandardNames = possibleStandardNames_1;
          var validateProperty$1 = function(tagName, name, value, debugID) {
            if (hasOwnProperty$1.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            if (EventPluginRegistry_1.registrationNameModules.hasOwnProperty(name)) {
              return true;
            }
            if (EventPluginRegistry_1.plugins.length === 0 && EVENT_NAME_REGEX.test(name)) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            var registrationName = EventPluginRegistry_1.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry_1.possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null) {
              warning$16(false, "Invalid event handler property `%s`. Did you mean `%s`?%s", name, registrationName, getStackAddendum$2(debugID));
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName.indexOf("on") === 0) {
              warning$16(false, "Unknown event handler property `%s`. It will be ignored.%s", name, getStackAddendum$2(debugID));
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              warning$16(false, "React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              warning$16(false, "Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              warning$16(false, "The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              warning$16(false, "Received a `%s` for string attribute `is`. If this is expected, cast the value to a string.%s", typeof value, getStackAddendum$2(debugID));
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              warning$16(false, "Received NaN for numeric attribute `%s`. If this is expected, cast the value to a string.%s", name, getStackAddendum$2(debugID));
              warnedProperties$1[name] = true;
              return true;
            }
            var isReserved = DOMProperty_1.isReservedProp(name);
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                warning$16(false, "Invalid DOM property `%s`. Did you mean `%s`?%s", name, standardName, getStackAddendum$2(debugID));
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              warning$16(false, "React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.%s", name, lowerCasedName, getStackAddendum$2(debugID));
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean") {
              warning$16(DOMProperty_1.shouldAttributeAcceptBooleanValue(name), "Received `%s` for non-boolean attribute `%s`. If this is expected, cast the value to a string.%s", value, name, getStackAddendum$2(debugID));
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (!DOMProperty_1.shouldSetAttribute(name, value)) {
              warnedProperties$1[name] = true;
              return false;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, debugID) {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type, key, props[key], debugID);
            if (!isValid) {
              unknownProps.push(key);
            }
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (unknownProps.length === 1) {
            warning$16(false, "Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://fb.me/react-attribute-behavior%s", unknownPropString, type, getStackAddendum$2(debugID));
          } else if (unknownProps.length > 1) {
            warning$16(false, "Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://fb.me/react-attribute-behavior%s", unknownPropString, type, getStackAddendum$2(debugID));
          }
        };
        function validateProperties$2(type, props, debugID) {
          if (isCustomComponent_1(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, debugID);
        }
        var ReactDOMUnknownPropertyHook$1 = {
          validateProperties: validateProperties$2,
          onBeforeMountComponent: function(debugID, element) {
            if (element != null && typeof element.type === "string") {
              validateProperties$2(element.type, element.props, debugID);
            }
          },
          onBeforeUpdateComponent: function(debugID, element) {
            if (element != null && typeof element.type === "string") {
              validateProperties$2(element.type, element.props, debugID);
            }
          }
        };
        var ReactDOMUnknownPropertyHook_1 = ReactDOMUnknownPropertyHook$1;
        var getCurrentFiberOwnerName = ReactDebugCurrentFiber_1.getCurrentFiberOwnerName;
        var DOCUMENT_NODE$1 = HTMLNodeType_1.DOCUMENT_NODE;
        var DOCUMENT_FRAGMENT_NODE$1 = HTMLNodeType_1.DOCUMENT_FRAGMENT_NODE;
        {
          var warning$3 = require$$0;
          var _require3$1 = ReactDebugCurrentFiber_1, getCurrentFiberStackAddendum = _require3$1.getCurrentFiberStackAddendum;
          var ReactDOMInvalidARIAHook = ReactDOMInvalidARIAHook_1;
          var ReactDOMNullInputValuePropHook = ReactDOMNullInputValuePropHook_1;
          var ReactDOMUnknownPropertyHook = ReactDOMUnknownPropertyHook_1;
          var validateARIAProperties = ReactDOMInvalidARIAHook.validateProperties;
          var validateInputProperties = ReactDOMNullInputValuePropHook.validateProperties;
          var validateUnknownProperties = ReactDOMUnknownPropertyHook.validateProperties;
        }
        var didWarnInvalidHydration = false;
        var didWarnShadyDOM = false;
        var listenTo = ReactBrowserEventEmitter_1.listenTo;
        var registrationNameModules = EventPluginRegistry_1.registrationNameModules;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML = "__html";
        var HTML_NAMESPACE$1 = DOMNamespaces.Namespaces.html;
        var getIntrinsicNamespace$1 = DOMNamespaces.getIntrinsicNamespace;
        {
          var warnedUnknownTags = {
            time: true
          };
          var validatePropertiesInDevelopment = function(type, props) {
            validateARIAProperties(type, props);
            validateInputProperties(type, props);
            validateUnknownProperties(type, props);
          };
          var warnForTextDifference = function(serverText, clientText) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            warning$3(false, 'Text content did not match. Server: "%s" Client: "%s"', serverText, clientText);
          };
          var warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            warning$3(false, "Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(serverValue), JSON.stringify(clientValue));
          };
          var warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            warning$3(false, "Extra attributes from the server: %s", names);
          };
          var warnForInvalidEventListener = function(registrationName, listener) {
            warning$3(false, "Expected `%s` listener to be a function, instead got a value of `%s` type.%s", registrationName, typeof listener, getCurrentFiberStackAddendum());
          };
          var testDocument;
          var normalizeHTML = function(parent, html) {
            if (!testDocument) {
              testDocument = document.implementation.createHTMLDocument();
            }
            var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? testDocument.createElement(parent.tagName) : testDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        function ensureListeningTo(rootContainerElement, registrationName) {
          var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE$1 || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE$1;
          var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
          listenTo(registrationName, doc);
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE$1 ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        var mediaEvents = {
          topAbort: "abort",
          topCanPlay: "canplay",
          topCanPlayThrough: "canplaythrough",
          topDurationChange: "durationchange",
          topEmptied: "emptied",
          topEncrypted: "encrypted",
          topEnded: "ended",
          topError: "error",
          topLoadedData: "loadeddata",
          topLoadedMetadata: "loadedmetadata",
          topLoadStart: "loadstart",
          topPause: "pause",
          topPlay: "play",
          topPlaying: "playing",
          topProgress: "progress",
          topRateChange: "ratechange",
          topSeeked: "seeked",
          topSeeking: "seeking",
          topStalled: "stalled",
          topSuspend: "suspend",
          topTimeUpdate: "timeupdate",
          topVolumeChange: "volumechange",
          topWaiting: "waiting"
        };
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = emptyFunction;
        }
        function setInitialDOMProperties(domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              CSSPropertyOperations_1.setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML] : void 0;
              if (nextHtml != null) {
                setInnerHTML_1(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                setTextContent_1(domElement, nextProp);
              } else if (typeof nextProp === "number") {
                setTextContent_1(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING) {
            } else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                ensureListeningTo(rootContainerElement, propKey);
              }
            } else if (isCustomComponentTag) {
              DOMPropertyOperations_1.setValueForAttribute(domElement, propKey, nextProp);
            } else if (nextProp != null) {
              DOMPropertyOperations_1.setValueForProperty(domElement, propKey, nextProp);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              CSSPropertyOperations_1.setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML_1(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent_1(domElement, propValue);
            } else if (isCustomComponentTag) {
              if (propValue != null) {
                DOMPropertyOperations_1.setValueForAttribute(domElement, propKey, propValue);
              } else {
                DOMPropertyOperations_1.deleteValueForAttribute(domElement, propKey);
              }
            } else if (propValue != null) {
              DOMPropertyOperations_1.setValueForProperty(domElement, propKey, propValue);
            } else {
              DOMPropertyOperations_1.deleteValueForProperty(domElement, propKey);
            }
          }
        }
        var ReactDOMFiberComponent = {
          createElement: function(type, props, rootContainerElement, parentNamespace) {
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace$1(type);
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                var isCustomComponentTag = isCustomComponent_1(type, props);
                warning$3(isCustomComponentTag || type === type.toLowerCase(), "<%s /> is using uppercase HTML. Always use lowercase HTML tags in React.", type);
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, { is: props.is });
              } else {
                domElement = ownerDocument.createElement(type);
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  warning$3(false, "The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          },
          createTextNode: function(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          },
          setInitialProperties: function(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent_1(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
              if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
                warning$3(false, "%s is using shady DOM. Using shady DOM with React can cause things to break subtly.", getCurrentFiberOwnerName() || "A component");
                didWarnShadyDOM = true;
              }
            }
            var props;
            switch (tag) {
              case "iframe":
              case "object":
                ReactBrowserEventEmitter_1.trapBubbledEvent("topLoad", "load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var event in mediaEvents) {
                  if (mediaEvents.hasOwnProperty(event)) {
                    ReactBrowserEventEmitter_1.trapBubbledEvent(event, mediaEvents[event], domElement);
                  }
                }
                props = rawProps;
                break;
              case "source":
                ReactBrowserEventEmitter_1.trapBubbledEvent("topError", "error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
                ReactBrowserEventEmitter_1.trapBubbledEvent("topError", "error", domElement);
                ReactBrowserEventEmitter_1.trapBubbledEvent("topLoad", "load", domElement);
                props = rawProps;
                break;
              case "form":
                ReactBrowserEventEmitter_1.trapBubbledEvent("topReset", "reset", domElement);
                ReactBrowserEventEmitter_1.trapBubbledEvent("topSubmit", "submit", domElement);
                props = rawProps;
                break;
              case "details":
                ReactBrowserEventEmitter_1.trapBubbledEvent("topToggle", "toggle", domElement);
                props = rawProps;
                break;
              case "input":
                ReactDOMFiberInput.initWrapperState(domElement, rawProps);
                props = ReactDOMFiberInput.getHostProps(domElement, rawProps);
                ReactBrowserEventEmitter_1.trapBubbledEvent("topInvalid", "invalid", domElement);
                ensureListeningTo(rootContainerElement, "onChange");
                break;
              case "option":
                ReactDOMFiberOption.validateProps(domElement, rawProps);
                props = ReactDOMFiberOption.getHostProps(domElement, rawProps);
                break;
              case "select":
                ReactDOMFiberSelect.initWrapperState(domElement, rawProps);
                props = ReactDOMFiberSelect.getHostProps(domElement, rawProps);
                ReactBrowserEventEmitter_1.trapBubbledEvent("topInvalid", "invalid", domElement);
                ensureListeningTo(rootContainerElement, "onChange");
                break;
              case "textarea":
                ReactDOMFiberTextarea.initWrapperState(domElement, rawProps);
                props = ReactDOMFiberTextarea.getHostProps(domElement, rawProps);
                ReactBrowserEventEmitter_1.trapBubbledEvent("topInvalid", "invalid", domElement);
                ensureListeningTo(rootContainerElement, "onChange");
                break;
              default:
                props = rawProps;
            }
            assertValidProps_1(tag, props, getCurrentFiberOwnerName);
            setInitialDOMProperties(domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                inputValueTracking_1.track(domElement);
                ReactDOMFiberInput.postMountWrapper(domElement, rawProps);
                break;
              case "textarea":
                inputValueTracking_1.track(domElement);
                ReactDOMFiberTextarea.postMountWrapper(domElement, rawProps);
                break;
              case "option":
                ReactDOMFiberOption.postMountWrapper(domElement, rawProps);
                break;
              case "select":
                ReactDOMFiberSelect.postMountWrapper(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          },
          diffProperties: function(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = ReactDOMFiberInput.getHostProps(domElement, lastRawProps);
                nextProps = ReactDOMFiberInput.getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "option":
                lastProps = ReactDOMFiberOption.getHostProps(domElement, lastRawProps);
                nextProps = ReactDOMFiberOption.getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = ReactDOMFiberSelect.getHostProps(domElement, lastRawProps);
                nextProps = ReactDOMFiberSelect.getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = ReactDOMFiberTextarea.getHostProps(domElement, lastRawProps);
                nextProps = ReactDOMFiberTextarea.getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps_1(tag, nextProps, getCurrentFiberOwnerName);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING) {
              } else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML] : void 0;
                var lastHtml = lastProp ? lastProp[HTML] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, "" + nextHtml);
                  }
                } else {
                }
              } else if (propKey === CHILDREN) {
                if (lastProp !== nextProp && (typeof nextProp === "string" || typeof nextProp === "number")) {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING) {
              } else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  ensureListeningTo(rootContainerElement, propKey);
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          },
          updateProperties: function(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            var wasCustomComponentTag = isCustomComponent_1(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent_1(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                ReactDOMFiberInput.updateWrapper(domElement, nextRawProps);
                inputValueTracking_1.updateValueIfChanged(domElement);
                break;
              case "textarea":
                ReactDOMFiberTextarea.updateWrapper(domElement, nextRawProps);
                break;
              case "select":
                ReactDOMFiberSelect.postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          },
          diffHydratedProperties: function(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
            {
              var isCustomComponentTag = isCustomComponent_1(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
              if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
                warning$3(false, "%s is using shady DOM. Using shady DOM with React can cause things to break subtly.", getCurrentFiberOwnerName() || "A component");
                didWarnShadyDOM = true;
              }
            }
            switch (tag) {
              case "iframe":
              case "object":
                ReactBrowserEventEmitter_1.trapBubbledEvent("topLoad", "load", domElement);
                break;
              case "video":
              case "audio":
                for (var event in mediaEvents) {
                  if (mediaEvents.hasOwnProperty(event)) {
                    ReactBrowserEventEmitter_1.trapBubbledEvent(event, mediaEvents[event], domElement);
                  }
                }
                break;
              case "source":
                ReactBrowserEventEmitter_1.trapBubbledEvent("topError", "error", domElement);
                break;
              case "img":
              case "image":
                ReactBrowserEventEmitter_1.trapBubbledEvent("topError", "error", domElement);
                ReactBrowserEventEmitter_1.trapBubbledEvent("topLoad", "load", domElement);
                break;
              case "form":
                ReactBrowserEventEmitter_1.trapBubbledEvent("topReset", "reset", domElement);
                ReactBrowserEventEmitter_1.trapBubbledEvent("topSubmit", "submit", domElement);
                break;
              case "details":
                ReactBrowserEventEmitter_1.trapBubbledEvent("topToggle", "toggle", domElement);
                break;
              case "input":
                ReactDOMFiberInput.initWrapperState(domElement, rawProps);
                ReactBrowserEventEmitter_1.trapBubbledEvent("topInvalid", "invalid", domElement);
                ensureListeningTo(rootContainerElement, "onChange");
                break;
              case "option":
                ReactDOMFiberOption.validateProps(domElement, rawProps);
                break;
              case "select":
                ReactDOMFiberSelect.initWrapperState(domElement, rawProps);
                ReactBrowserEventEmitter_1.trapBubbledEvent("topInvalid", "invalid", domElement);
                ensureListeningTo(rootContainerElement, "onChange");
                break;
              case "textarea":
                ReactDOMFiberTextarea.initWrapperState(domElement, rawProps);
                ReactBrowserEventEmitter_1.trapBubbledEvent("topInvalid", "invalid", domElement);
                ensureListeningTo(rootContainerElement, "onChange");
                break;
            }
            assertValidProps_1(tag, rawProps, getCurrentFiberOwnerName);
            {
              var extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var i = 0; i < attributes.length; i++) {
                var name = attributes[i].name.toLowerCase();
                switch (name) {
                  case "data-reactroot":
                    break;
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  ensureListeningTo(rootContainerElement, propKey);
                }
              } else {
                var serverValue;
                var propertyInfo;
                if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected") {
                } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var rawHtml = nextProp ? nextProp[HTML] || "" : "";
                  var serverHTML = domElement.innerHTML;
                  var expectedHTML = normalizeHTML(domElement, rawHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames["delete"](propKey);
                  var expectedStyle = CSSPropertyOperations_1.createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames["delete"](propKey.toLowerCase());
                  serverValue = DOMPropertyOperations_1.getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (DOMProperty_1.shouldSetAttribute(propKey, nextProp)) {
                  if (propertyInfo = DOMProperty_1.getPropertyInfo(propKey)) {
                    extraAttributeNames["delete"](propertyInfo.attributeName);
                    serverValue = DOMPropertyOperations_1.getValueForProperty(domElement, propKey, nextProp);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace$1(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames["delete"](propKey.toLowerCase());
                    } else {
                      extraAttributeNames["delete"](propKey);
                    }
                    serverValue = DOMPropertyOperations_1.getValueForAttribute(domElement, propKey, nextProp);
                  }
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
            switch (tag) {
              case "input":
                inputValueTracking_1.track(domElement);
                ReactDOMFiberInput.postMountWrapper(domElement, rawProps);
                break;
              case "textarea":
                inputValueTracking_1.track(domElement);
                ReactDOMFiberTextarea.postMountWrapper(domElement, rawProps);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          },
          diffHydratedText: function(textNode, text) {
            var isDifferent = textNode.nodeValue !== text;
            {
              if (isDifferent) {
                warnForTextDifference(textNode.nodeValue, text);
              }
            }
            return isDifferent;
          },
          warnForDeletedHydratableElement: function(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              warning$3(false, "Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          },
          warnForDeletedHydratableText: function(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              warning$3(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          },
          warnForInsertedHydratedElement: function(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              warning$3(false, "Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          },
          warnForInsertedHydratedText: function(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              warning$3(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          },
          restoreControlledState: function(domElement, tag, props) {
            switch (tag) {
              case "input":
                ReactDOMFiberInput.restoreControlledState(domElement, props);
                return;
              case "textarea":
                ReactDOMFiberTextarea.restoreControlledState(domElement, props);
                return;
              case "select":
                ReactDOMFiberSelect.restoreControlledState(domElement, props);
                return;
            }
          }
        };
        var ReactDOMFiberComponent_1 = ReactDOMFiberComponent;
        {
          var warning$17 = require$$0;
          if (ExecutionEnvironment.canUseDOM && typeof requestAnimationFrame !== "function") {
            warning$17(false, "React depends on requestAnimationFrame. Make sure that you load a polyfill in older browsers. http://fb.me/react-polyfills");
          }
        }
        var rIC = void 0;
        if (!ExecutionEnvironment.canUseDOM) {
          rIC = function(frameCallback) {
            setTimeout(function() {
              frameCallback({
                timeRemaining: function() {
                  return Infinity;
                }
              });
            });
            return 0;
          };
        } else if (typeof requestIdleCallback !== "function") {
          var scheduledRAFCallback = null;
          var scheduledRICCallback = null;
          var isIdleScheduled = false;
          var isAnimationFrameScheduled = false;
          var frameDeadline = 0;
          var previousFrameTime = 33;
          var activeFrameTime = 33;
          var frameDeadlineObject = {
            timeRemaining: typeof performance === "object" && typeof performance.now === "function" ? function() {
              return frameDeadline - performance.now();
            } : function() {
              return frameDeadline - Date.now();
            }
          };
          var messageKey = "__reactIdleCallback$" + Math.random().toString(36).slice(2);
          var idleTick = function(event) {
            if (event.source !== window || event.data !== messageKey) {
              return;
            }
            isIdleScheduled = false;
            var callback = scheduledRICCallback;
            scheduledRICCallback = null;
            if (callback !== null) {
              callback(frameDeadlineObject);
            }
          };
          window.addEventListener("message", idleTick, false);
          var animationTick = function(rafTime) {
            isAnimationFrameScheduled = false;
            var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
            if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
              if (nextFrameTime < 8) {
                nextFrameTime = 8;
              }
              activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
            } else {
              previousFrameTime = nextFrameTime;
            }
            frameDeadline = rafTime + activeFrameTime;
            if (!isIdleScheduled) {
              isIdleScheduled = true;
              window.postMessage(messageKey, "*");
            }
            var callback = scheduledRAFCallback;
            scheduledRAFCallback = null;
            if (callback !== null) {
              callback(rafTime);
            }
          };
          rIC = function(callback) {
            scheduledRICCallback = callback;
            if (!isAnimationFrameScheduled) {
              isAnimationFrameScheduled = true;
              requestAnimationFrame(animationTick);
            }
            return 0;
          };
        } else {
          rIC = requestIdleCallback;
        }
        var rIC_1 = rIC;
        var ReactDOMFrameScheduling = {
          rIC: rIC_1
        };
        var ReactFeatureFlags = {
          enableAsyncSubtreeAPI: true
        };
        var ReactFeatureFlags_1 = ReactFeatureFlags;
        var ReactPriorityLevel = {
          NoWork: 0,
          SynchronousPriority: 1,
          TaskPriority: 2,
          HighPriority: 3,
          LowPriority: 4,
          OffscreenPriority: 5
        };
        var CallbackEffect = ReactTypeOfSideEffect.Callback;
        var NoWork = ReactPriorityLevel.NoWork;
        var SynchronousPriority = ReactPriorityLevel.SynchronousPriority;
        var TaskPriority = ReactPriorityLevel.TaskPriority;
        var ClassComponent$2 = ReactTypeOfWork.ClassComponent;
        var HostRoot$2 = ReactTypeOfWork.HostRoot;
        {
          var warning$19 = require$$0;
        }
        var _queue1 = void 0;
        var _queue2 = void 0;
        function comparePriority(a, b) {
          if ((a === TaskPriority || a === SynchronousPriority) && (b === TaskPriority || b === SynchronousPriority)) {
            return 0;
          }
          if (a === NoWork && b !== NoWork) {
            return -255;
          }
          if (a !== NoWork && b === NoWork) {
            return 255;
          }
          return a - b;
        }
        function createUpdateQueue() {
          var queue = {
            first: null,
            last: null,
            hasForceUpdate: false,
            callbackList: null
          };
          {
            queue.isProcessing = false;
          }
          return queue;
        }
        function cloneUpdate(update) {
          return {
            priorityLevel: update.priorityLevel,
            partialState: update.partialState,
            callback: update.callback,
            isReplace: update.isReplace,
            isForced: update.isForced,
            isTopLevelUnmount: update.isTopLevelUnmount,
            next: null
          };
        }
        function insertUpdateIntoQueue(queue, update, insertAfter, insertBefore) {
          if (insertAfter !== null) {
            insertAfter.next = update;
          } else {
            update.next = queue.first;
            queue.first = update;
          }
          if (insertBefore !== null) {
            update.next = insertBefore;
          } else {
            queue.last = update;
          }
        }
        function findInsertionPosition(queue, update) {
          var priorityLevel = update.priorityLevel;
          var insertAfter = null;
          var insertBefore = null;
          if (queue.last !== null && comparePriority(queue.last.priorityLevel, priorityLevel) <= 0) {
            insertAfter = queue.last;
          } else {
            insertBefore = queue.first;
            while (insertBefore !== null && comparePriority(insertBefore.priorityLevel, priorityLevel) <= 0) {
              insertAfter = insertBefore;
              insertBefore = insertBefore.next;
            }
          }
          return insertAfter;
        }
        function ensureUpdateQueues(fiber) {
          var alternateFiber = fiber.alternate;
          var queue1 = fiber.updateQueue;
          if (queue1 === null) {
            queue1 = fiber.updateQueue = createUpdateQueue();
          }
          var queue2 = void 0;
          if (alternateFiber !== null) {
            queue2 = alternateFiber.updateQueue;
            if (queue2 === null) {
              queue2 = alternateFiber.updateQueue = createUpdateQueue();
            }
          } else {
            queue2 = null;
          }
          _queue1 = queue1;
          _queue2 = queue2 !== queue1 ? queue2 : null;
        }
        function insertUpdate(fiber, update) {
          ensureUpdateQueues(fiber);
          var queue1 = _queue1;
          var queue2 = _queue2;
          {
            if (queue1.isProcessing || queue2 !== null && queue2.isProcessing) {
              warning$19(false, "An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            }
          }
          var insertAfter1 = findInsertionPosition(queue1, update);
          var insertBefore1 = insertAfter1 !== null ? insertAfter1.next : queue1.first;
          if (queue2 === null) {
            insertUpdateIntoQueue(queue1, update, insertAfter1, insertBefore1);
            return null;
          }
          var insertAfter2 = findInsertionPosition(queue2, update);
          var insertBefore2 = insertAfter2 !== null ? insertAfter2.next : queue2.first;
          insertUpdateIntoQueue(queue1, update, insertAfter1, insertBefore1);
          if (insertBefore1 === insertBefore2 && insertBefore1 !== null || insertAfter1 === insertAfter2 && insertAfter1 !== null) {
            if (insertAfter2 === null) {
              queue2.first = update;
            }
            if (insertBefore2 === null) {
              queue2.last = null;
            }
            return null;
          } else {
            var update2 = cloneUpdate(update);
            insertUpdateIntoQueue(queue2, update2, insertAfter2, insertBefore2);
            return update2;
          }
        }
        function addUpdate(fiber, partialState, callback, priorityLevel) {
          var update = {
            priorityLevel,
            partialState,
            callback,
            isReplace: false,
            isForced: false,
            isTopLevelUnmount: false,
            next: null
          };
          insertUpdate(fiber, update);
        }
        var addUpdate_1 = addUpdate;
        function addReplaceUpdate(fiber, state, callback, priorityLevel) {
          var update = {
            priorityLevel,
            partialState: state,
            callback,
            isReplace: true,
            isForced: false,
            isTopLevelUnmount: false,
            next: null
          };
          insertUpdate(fiber, update);
        }
        var addReplaceUpdate_1 = addReplaceUpdate;
        function addForceUpdate(fiber, callback, priorityLevel) {
          var update = {
            priorityLevel,
            partialState: null,
            callback,
            isReplace: false,
            isForced: true,
            isTopLevelUnmount: false,
            next: null
          };
          insertUpdate(fiber, update);
        }
        var addForceUpdate_1 = addForceUpdate;
        function getUpdatePriority(fiber) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return NoWork;
          }
          if (fiber.tag !== ClassComponent$2 && fiber.tag !== HostRoot$2) {
            return NoWork;
          }
          return updateQueue.first !== null ? updateQueue.first.priorityLevel : NoWork;
        }
        var getUpdatePriority_1 = getUpdatePriority;
        function addTopLevelUpdate$1(fiber, partialState, callback, priorityLevel) {
          var isTopLevelUnmount = partialState.element === null;
          var update = {
            priorityLevel,
            partialState,
            callback,
            isReplace: false,
            isForced: false,
            isTopLevelUnmount,
            next: null
          };
          var update2 = insertUpdate(fiber, update);
          if (isTopLevelUnmount) {
            var queue1 = _queue1;
            var queue2 = _queue2;
            if (queue1 !== null && update.next !== null) {
              update.next = null;
              queue1.last = update;
            }
            if (queue2 !== null && update2 !== null && update2.next !== null) {
              update2.next = null;
              queue2.last = update;
            }
          }
        }
        var addTopLevelUpdate_1 = addTopLevelUpdate$1;
        function getStateFromUpdate(update, instance, prevState, props) {
          var partialState = update.partialState;
          if (typeof partialState === "function") {
            var updateFn = partialState;
            return updateFn.call(instance, prevState, props);
          } else {
            return partialState;
          }
        }
        function beginUpdateQueue(current, workInProgress, queue, instance, prevState, props, priorityLevel) {
          if (current !== null && current.updateQueue === queue) {
            var currentQueue = queue;
            queue = workInProgress.updateQueue = {
              first: currentQueue.first,
              last: currentQueue.last,
              callbackList: null,
              hasForceUpdate: false
            };
          }
          {
            queue.isProcessing = true;
          }
          var callbackList = queue.callbackList;
          var hasForceUpdate = queue.hasForceUpdate;
          var state = prevState;
          var dontMutatePrevState = true;
          var update = queue.first;
          while (update !== null && comparePriority(update.priorityLevel, priorityLevel) <= 0) {
            queue.first = update.next;
            if (queue.first === null) {
              queue.last = null;
            }
            var _partialState = void 0;
            if (update.isReplace) {
              state = getStateFromUpdate(update, instance, state, props);
              dontMutatePrevState = true;
            } else {
              _partialState = getStateFromUpdate(update, instance, state, props);
              if (_partialState) {
                if (dontMutatePrevState) {
                  state = _assign({}, state, _partialState);
                } else {
                  state = _assign(state, _partialState);
                }
                dontMutatePrevState = false;
              }
            }
            if (update.isForced) {
              hasForceUpdate = true;
            }
            if (update.callback !== null && !(update.isTopLevelUnmount && update.next !== null)) {
              callbackList = callbackList !== null ? callbackList : [];
              callbackList.push(update.callback);
              workInProgress.effectTag |= CallbackEffect;
            }
            update = update.next;
          }
          queue.callbackList = callbackList;
          queue.hasForceUpdate = hasForceUpdate;
          if (queue.first === null && callbackList === null && !hasForceUpdate) {
            workInProgress.updateQueue = null;
          }
          {
            queue.isProcessing = false;
          }
          return state;
        }
        var beginUpdateQueue_1 = beginUpdateQueue;
        function commitCallbacks(finishedWork, queue, context) {
          var callbackList = queue.callbackList;
          if (callbackList === null) {
            return;
          }
          queue.callbackList = null;
          for (var i = 0; i < callbackList.length; i++) {
            var _callback = callbackList[i];
            !(typeof _callback === "function") ? invariant(false, "Invalid argument passed as callback. Expected a function. Instead received: %s", _callback) : void 0;
            _callback.call(context);
          }
        }
        var commitCallbacks_1 = commitCallbacks;
        var ReactFiberUpdateQueue = {
          addUpdate: addUpdate_1,
          addReplaceUpdate: addReplaceUpdate_1,
          addForceUpdate: addForceUpdate_1,
          getUpdatePriority: getUpdatePriority_1,
          addTopLevelUpdate: addTopLevelUpdate_1,
          beginUpdateQueue: beginUpdateQueue_1,
          commitCallbacks: commitCallbacks_1
        };
        {
          var warning$21 = require$$0;
        }
        var valueStack = [];
        {
          var fiberStack = [];
        }
        var index = -1;
        var createCursor$1 = function(defaultValue) {
          return {
            current: defaultValue
          };
        };
        var isEmpty = function() {
          return index === -1;
        };
        var pop$1 = function(cursor, fiber) {
          if (index < 0) {
            {
              warning$21(false, "Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              warning$21(false, "Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        };
        var push$1 = function(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        };
        var reset = function() {
          while (index > -1) {
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
        };
        var ReactFiberStack = {
          createCursor: createCursor$1,
          isEmpty,
          pop: pop$1,
          push: push$1,
          reset
        };
        var ReactDebugFiberPerf = null;
        {
          var _require$8 = ReactTypeOfWork, HostRoot$4 = _require$8.HostRoot, HostComponent$4 = _require$8.HostComponent, HostText$2 = _require$8.HostText, HostPortal$1 = _require$8.HostPortal, YieldComponent = _require$8.YieldComponent, Fragment = _require$8.Fragment;
          var getComponentName$5 = getComponentName_1;
          var reactEmoji = "\u269B";
          var warningEmoji = "\u26D4";
          var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
          var currentFiber = null;
          var currentPhase = null;
          var currentPhaseFiber = null;
          var isCommitting = false;
          var hasScheduledUpdateInCurrentCommit = false;
          var hasScheduledUpdateInCurrentPhase = false;
          var commitCountInCurrentWorkLoop = 0;
          var effectCountInCurrentCommit = 0;
          var labelsInCurrentCommit = /* @__PURE__ */ new Set();
          var formatMarkName = function(markName) {
            return reactEmoji + " " + markName;
          };
          var formatLabel = function(label, warning2) {
            var prefix = warning2 ? warningEmoji + " " : reactEmoji + " ";
            var suffix = warning2 ? " Warning: " + warning2 : "";
            return "" + prefix + label + suffix;
          };
          var beginMark = function(markName) {
            performance.mark(formatMarkName(markName));
          };
          var clearMark = function(markName) {
            performance.clearMarks(formatMarkName(markName));
          };
          var endMark = function(label, markName, warning2) {
            var formattedMarkName = formatMarkName(markName);
            var formattedLabel = formatLabel(label, warning2);
            try {
              performance.measure(formattedLabel, formattedMarkName);
            } catch (err) {
            }
            performance.clearMarks(formattedMarkName);
            performance.clearMeasures(formattedLabel);
          };
          var getFiberMarkName = function(label, debugID) {
            return label + " (#" + debugID + ")";
          };
          var getFiberLabel = function(componentName, isMounted2, phase) {
            if (phase === null) {
              return componentName + " [" + (isMounted2 ? "update" : "mount") + "]";
            } else {
              return componentName + "." + phase;
            }
          };
          var beginFiberMark = function(fiber, phase) {
            var componentName = getComponentName$5(fiber) || "Unknown";
            var debugID = fiber._debugID;
            var isMounted2 = fiber.alternate !== null;
            var label = getFiberLabel(componentName, isMounted2, phase);
            if (isCommitting && labelsInCurrentCommit.has(label)) {
              return false;
            }
            labelsInCurrentCommit.add(label);
            var markName = getFiberMarkName(label, debugID);
            beginMark(markName);
            return true;
          };
          var clearFiberMark = function(fiber, phase) {
            var componentName = getComponentName$5(fiber) || "Unknown";
            var debugID = fiber._debugID;
            var isMounted2 = fiber.alternate !== null;
            var label = getFiberLabel(componentName, isMounted2, phase);
            var markName = getFiberMarkName(label, debugID);
            clearMark(markName);
          };
          var endFiberMark = function(fiber, phase, warning2) {
            var componentName = getComponentName$5(fiber) || "Unknown";
            var debugID = fiber._debugID;
            var isMounted2 = fiber.alternate !== null;
            var label = getFiberLabel(componentName, isMounted2, phase);
            var markName = getFiberMarkName(label, debugID);
            endMark(label, markName, warning2);
          };
          var shouldIgnoreFiber = function(fiber) {
            switch (fiber.tag) {
              case HostRoot$4:
              case HostComponent$4:
              case HostText$2:
              case HostPortal$1:
              case YieldComponent:
              case Fragment:
                return true;
              default:
                return false;
            }
          };
          var clearPendingPhaseMeasurement = function() {
            if (currentPhase !== null && currentPhaseFiber !== null) {
              clearFiberMark(currentPhaseFiber, currentPhase);
            }
            currentPhaseFiber = null;
            currentPhase = null;
            hasScheduledUpdateInCurrentPhase = false;
          };
          var pauseTimers = function() {
            var fiber = currentFiber;
            while (fiber) {
              if (fiber._debugIsCurrentlyTiming) {
                endFiberMark(fiber, null, null);
              }
              fiber = fiber["return"];
            }
          };
          var resumeTimersRecursively = function(fiber) {
            if (fiber["return"] !== null) {
              resumeTimersRecursively(fiber["return"]);
            }
            if (fiber._debugIsCurrentlyTiming) {
              beginFiberMark(fiber, null);
            }
          };
          var resumeTimers = function() {
            if (currentFiber !== null) {
              resumeTimersRecursively(currentFiber);
            }
          };
          ReactDebugFiberPerf = {
            recordEffect: function() {
              effectCountInCurrentCommit++;
            },
            recordScheduleUpdate: function() {
              if (isCommitting) {
                hasScheduledUpdateInCurrentCommit = true;
              }
              if (currentPhase !== null && currentPhase !== "componentWillMount" && currentPhase !== "componentWillReceiveProps") {
                hasScheduledUpdateInCurrentPhase = true;
              }
            },
            startWorkTimer: function(fiber) {
              if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return;
              }
              currentFiber = fiber;
              if (!beginFiberMark(fiber, null)) {
                return;
              }
              fiber._debugIsCurrentlyTiming = true;
            },
            cancelWorkTimer: function(fiber) {
              if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return;
              }
              fiber._debugIsCurrentlyTiming = false;
              clearFiberMark(fiber, null);
            },
            stopWorkTimer: function(fiber) {
              if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return;
              }
              currentFiber = fiber["return"];
              if (!fiber._debugIsCurrentlyTiming) {
                return;
              }
              fiber._debugIsCurrentlyTiming = false;
              endFiberMark(fiber, null, null);
            },
            stopFailedWorkTimer: function(fiber) {
              if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return;
              }
              currentFiber = fiber["return"];
              if (!fiber._debugIsCurrentlyTiming) {
                return;
              }
              fiber._debugIsCurrentlyTiming = false;
              var warning2 = "An error was thrown inside this error boundary";
              endFiberMark(fiber, null, warning2);
            },
            startPhaseTimer: function(fiber, phase) {
              if (!supportsUserTiming) {
                return;
              }
              clearPendingPhaseMeasurement();
              if (!beginFiberMark(fiber, phase)) {
                return;
              }
              currentPhaseFiber = fiber;
              currentPhase = phase;
            },
            stopPhaseTimer: function() {
              if (!supportsUserTiming) {
                return;
              }
              if (currentPhase !== null && currentPhaseFiber !== null) {
                var warning2 = hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null;
                endFiberMark(currentPhaseFiber, currentPhase, warning2);
              }
              currentPhase = null;
              currentPhaseFiber = null;
            },
            startWorkLoopTimer: function() {
              if (!supportsUserTiming) {
                return;
              }
              commitCountInCurrentWorkLoop = 0;
              beginMark("(React Tree Reconciliation)");
              resumeTimers();
            },
            stopWorkLoopTimer: function() {
              if (!supportsUserTiming) {
                return;
              }
              var warning2 = commitCountInCurrentWorkLoop > 1 ? "There were cascading updates" : null;
              commitCountInCurrentWorkLoop = 0;
              pauseTimers();
              endMark("(React Tree Reconciliation)", "(React Tree Reconciliation)", warning2);
            },
            startCommitTimer: function() {
              if (!supportsUserTiming) {
                return;
              }
              isCommitting = true;
              hasScheduledUpdateInCurrentCommit = false;
              labelsInCurrentCommit.clear();
              beginMark("(Committing Changes)");
            },
            stopCommitTimer: function() {
              if (!supportsUserTiming) {
                return;
              }
              var warning2 = null;
              if (hasScheduledUpdateInCurrentCommit) {
                warning2 = "Lifecycle hook scheduled a cascading update";
              } else if (commitCountInCurrentWorkLoop > 0) {
                warning2 = "Caused by a cascading update in earlier commit";
              }
              hasScheduledUpdateInCurrentCommit = false;
              commitCountInCurrentWorkLoop++;
              isCommitting = false;
              labelsInCurrentCommit.clear();
              endMark("(Committing Changes)", "(Committing Changes)", warning2);
            },
            startCommitHostEffectsTimer: function() {
              if (!supportsUserTiming) {
                return;
              }
              effectCountInCurrentCommit = 0;
              beginMark("(Committing Host Effects)");
            },
            stopCommitHostEffectsTimer: function() {
              if (!supportsUserTiming) {
                return;
              }
              var count = effectCountInCurrentCommit;
              effectCountInCurrentCommit = 0;
              endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
            },
            startCommitLifeCyclesTimer: function() {
              if (!supportsUserTiming) {
                return;
              }
              effectCountInCurrentCommit = 0;
              beginMark("(Calling Lifecycle Methods)");
            },
            stopCommitLifeCyclesTimer: function() {
              if (!supportsUserTiming) {
                return;
              }
              var count = effectCountInCurrentCommit;
              effectCountInCurrentCommit = 0;
              endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
            }
          };
        }
        var ReactDebugFiberPerf_1 = ReactDebugFiberPerf;
        var isFiberMounted$1 = ReactFiberTreeReflection.isFiberMounted;
        var ClassComponent$3 = ReactTypeOfWork.ClassComponent;
        var HostRoot$3 = ReactTypeOfWork.HostRoot;
        var createCursor = ReactFiberStack.createCursor;
        var pop = ReactFiberStack.pop;
        var push = ReactFiberStack.push;
        {
          var warning$20 = require$$0;
          var checkPropTypes$1 = checkPropTypes;
          var ReactDebugCurrentFiber$2 = ReactDebugCurrentFiber_1;
          var _require4 = ReactDebugFiberPerf_1, startPhaseTimer = _require4.startPhaseTimer, stopPhaseTimer = _require4.stopPhaseTimer;
          var warnedAboutMissingGetChildContext = {};
        }
        var contextStackCursor = createCursor(emptyObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyObject;
        function getUnmaskedContext(workInProgress) {
          var hasOwnContext = isContextProvider$1(workInProgress);
          if (hasOwnContext) {
            return previousContext;
          }
          return contextStackCursor.current;
        }
        var getUnmaskedContext_1 = getUnmaskedContext;
        function cacheContext(workInProgress, unmaskedContext, maskedContext) {
          var instance = workInProgress.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
          instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
        var cacheContext_1 = cacheContext;
        var getMaskedContext = function(workInProgress, unmaskedContext) {
          var type = workInProgress.type;
          var contextTypes = type.contextTypes;
          if (!contextTypes) {
            return emptyObject;
          }
          var instance = workInProgress.stateNode;
          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance.__reactInternalMemoizedMaskedChildContext;
          }
          var context = {};
          for (var key in contextTypes) {
            context[key] = unmaskedContext[key];
          }
          {
            var name = getComponentName_1(workInProgress) || "Unknown";
            ReactDebugCurrentFiber$2.setCurrentFiber(workInProgress, null);
            checkPropTypes$1(contextTypes, context, "context", name, ReactDebugCurrentFiber$2.getCurrentFiberStackAddendum);
            ReactDebugCurrentFiber$2.resetCurrentFiber();
          }
          if (instance) {
            cacheContext(workInProgress, unmaskedContext, context);
          }
          return context;
        };
        var hasContextChanged = function() {
          return didPerformWorkStackCursor.current;
        };
        function isContextConsumer(fiber) {
          return fiber.tag === ClassComponent$3 && fiber.type.contextTypes != null;
        }
        var isContextConsumer_1 = isContextConsumer;
        function isContextProvider$1(fiber) {
          return fiber.tag === ClassComponent$3 && fiber.type.childContextTypes != null;
        }
        var isContextProvider_1 = isContextProvider$1;
        function popContextProvider(fiber) {
          if (!isContextProvider$1(fiber)) {
            return;
          }
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
        var popContextProvider_1 = popContextProvider;
        var popTopLevelContextObject = function(fiber) {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        };
        var pushTopLevelContextObject = function(fiber, context, didChange) {
          !(contextStackCursor.cursor == null) ? invariant(false, "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.") : void 0;
          push(contextStackCursor, context, fiber);
          push(didPerformWorkStackCursor, didChange, fiber);
        };
        function processChildContext$1(fiber, parentContext, isReconciling) {
          var instance = fiber.stateNode;
          var childContextTypes = fiber.type.childContextTypes;
          if (typeof instance.getChildContext !== "function") {
            {
              var componentName = getComponentName_1(fiber) || "Unknown";
              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                warning$20(false, "%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
              }
            }
            return parentContext;
          }
          var childContext = void 0;
          {
            ReactDebugCurrentFiber$2.setCurrentFiber(fiber, "getChildContext");
            startPhaseTimer(fiber, "getChildContext");
            childContext = instance.getChildContext();
            stopPhaseTimer();
            ReactDebugCurrentFiber$2.resetCurrentFiber();
          }
          for (var contextKey in childContext) {
            !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName_1(fiber) || "Unknown", contextKey) : void 0;
          }
          {
            var name = getComponentName_1(fiber) || "Unknown";
            var workInProgress = isReconciling ? fiber : null;
            ReactDebugCurrentFiber$2.setCurrentFiber(workInProgress, null);
            checkPropTypes$1(childContextTypes, childContext, "child context", name, ReactDebugCurrentFiber$2.getCurrentFiberStackAddendum);
            ReactDebugCurrentFiber$2.resetCurrentFiber();
          }
          return _assign({}, parentContext, childContext);
        }
        var processChildContext_1 = processChildContext$1;
        var pushContextProvider = function(workInProgress) {
          if (!isContextProvider$1(workInProgress)) {
            return false;
          }
          var instance = workInProgress.stateNode;
          var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
          previousContext = contextStackCursor.current;
          push(contextStackCursor, memoizedMergedChildContext, workInProgress);
          push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
          return true;
        };
        var invalidateContextProvider = function(workInProgress, didChange) {
          var instance = workInProgress.stateNode;
          !instance ? invariant(false, "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.") : void 0;
          if (didChange) {
            var mergedContext = processChildContext$1(workInProgress, previousContext, true);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress);
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
          } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
          }
        };
        var resetContext = function() {
          previousContext = emptyObject;
          contextStackCursor.current = emptyObject;
          didPerformWorkStackCursor.current = false;
        };
        var findCurrentUnmaskedContext$1 = function(fiber) {
          !(isFiberMounted$1(fiber) && fiber.tag === ClassComponent$3) ? invariant(false, "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.") : void 0;
          var node = fiber;
          while (node.tag !== HostRoot$3) {
            if (isContextProvider$1(node)) {
              return node.stateNode.__reactInternalMemoizedMergedChildContext;
            }
            var parent = node["return"];
            !parent ? invariant(false, "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.") : void 0;
            node = parent;
          }
          return node.stateNode.context;
        };
        var ReactFiberContext = {
          getUnmaskedContext: getUnmaskedContext_1,
          cacheContext: cacheContext_1,
          getMaskedContext,
          hasContextChanged,
          isContextConsumer: isContextConsumer_1,
          isContextProvider: isContextProvider_1,
          popContextProvider: popContextProvider_1,
          popTopLevelContextObject,
          pushTopLevelContextObject,
          processChildContext: processChildContext_1,
          pushContextProvider,
          invalidateContextProvider,
          resetContext,
          findCurrentUnmaskedContext: findCurrentUnmaskedContext$1
        };
        var ReactTypeOfInternalContext = {
          NoContext: 0,
          AsyncUpdates: 1
        };
        var IndeterminateComponent$1 = ReactTypeOfWork.IndeterminateComponent;
        var ClassComponent$4 = ReactTypeOfWork.ClassComponent;
        var HostRoot$5 = ReactTypeOfWork.HostRoot;
        var HostComponent$5 = ReactTypeOfWork.HostComponent;
        var HostText$3 = ReactTypeOfWork.HostText;
        var HostPortal$2 = ReactTypeOfWork.HostPortal;
        var CoroutineComponent = ReactTypeOfWork.CoroutineComponent;
        var YieldComponent$1 = ReactTypeOfWork.YieldComponent;
        var Fragment$1 = ReactTypeOfWork.Fragment;
        var NoWork$1 = ReactPriorityLevel.NoWork;
        var NoContext = ReactTypeOfInternalContext.NoContext;
        var NoEffect$1 = ReactTypeOfSideEffect.NoEffect;
        {
          var getComponentName$6 = getComponentName_1;
          var hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        {
          var debugCounter = 1;
        }
        function FiberNode(tag, key, internalContextTag) {
          this.tag = tag;
          this.key = key;
          this.type = null;
          this.stateNode = null;
          this["return"] = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = null;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.internalContextTag = internalContextTag;
          this.effectTag = NoEffect$1;
          this.nextEffect = null;
          this.firstEffect = null;
          this.lastEffect = null;
          this.pendingWorkPriority = NoWork$1;
          this.alternate = null;
          {
            this._debugID = debugCounter++;
            this._debugSource = null;
            this._debugOwner = null;
            this._debugIsCurrentlyTiming = false;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, key, internalContextTag) {
          return new FiberNode(tag, key, internalContextTag);
        };
        function shouldConstruct(Component) {
          return !!(Component.prototype && Component.prototype.isReactComponent);
        }
        var createWorkInProgress = function(current, renderPriority) {
          var workInProgress = current.alternate;
          if (workInProgress === null) {
            workInProgress = createFiber(current.tag, current.key, current.internalContextTag);
            workInProgress.type = current.type;
            workInProgress.stateNode = current.stateNode;
            {
              workInProgress._debugID = current._debugID;
              workInProgress._debugSource = current._debugSource;
              workInProgress._debugOwner = current._debugOwner;
            }
            workInProgress.alternate = current;
            current.alternate = workInProgress;
          } else {
            workInProgress.effectTag = NoEffect$1;
            workInProgress.nextEffect = null;
            workInProgress.firstEffect = null;
            workInProgress.lastEffect = null;
          }
          workInProgress.pendingWorkPriority = renderPriority;
          workInProgress.child = current.child;
          workInProgress.memoizedProps = current.memoizedProps;
          workInProgress.memoizedState = current.memoizedState;
          workInProgress.updateQueue = current.updateQueue;
          workInProgress.sibling = current.sibling;
          workInProgress.index = current.index;
          workInProgress.ref = current.ref;
          return workInProgress;
        };
        var createHostRootFiber$1 = function() {
          var fiber = createFiber(HostRoot$5, null, NoContext);
          return fiber;
        };
        var createFiberFromElement = function(element, internalContextTag, priorityLevel) {
          var owner = null;
          {
            owner = element._owner;
          }
          var fiber = createFiberFromElementType(element.type, element.key, internalContextTag, owner);
          fiber.pendingProps = element.props;
          fiber.pendingWorkPriority = priorityLevel;
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        };
        var createFiberFromFragment = function(elements, internalContextTag, priorityLevel) {
          var fiber = createFiber(Fragment$1, null, internalContextTag);
          fiber.pendingProps = elements;
          fiber.pendingWorkPriority = priorityLevel;
          return fiber;
        };
        var createFiberFromText = function(content, internalContextTag, priorityLevel) {
          var fiber = createFiber(HostText$3, null, internalContextTag);
          fiber.pendingProps = content;
          fiber.pendingWorkPriority = priorityLevel;
          return fiber;
        };
        function createFiberFromElementType(type, key, internalContextTag, debugOwner) {
          var fiber = void 0;
          if (typeof type === "function") {
            fiber = shouldConstruct(type) ? createFiber(ClassComponent$4, key, internalContextTag) : createFiber(IndeterminateComponent$1, key, internalContextTag);
            fiber.type = type;
          } else if (typeof type === "string") {
            fiber = createFiber(HostComponent$5, key, internalContextTag);
            fiber.type = type;
          } else if (typeof type === "object" && type !== null && typeof type.tag === "number") {
            fiber = type;
          } else {
            var info = "";
            {
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in.";
              }
              var ownerName = debugOwner ? getComponentName$6(debugOwner) : null;
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
            }
            invariant(false, "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", type == null ? type : typeof type, info);
          }
          return fiber;
        }
        var createFiberFromElementType_1 = createFiberFromElementType;
        var createFiberFromHostInstanceForDeletion = function() {
          var fiber = createFiber(HostComponent$5, null, NoContext);
          fiber.type = "DELETED";
          return fiber;
        };
        var createFiberFromCoroutine = function(coroutine, internalContextTag, priorityLevel) {
          var fiber = createFiber(CoroutineComponent, coroutine.key, internalContextTag);
          fiber.type = coroutine.handler;
          fiber.pendingProps = coroutine;
          fiber.pendingWorkPriority = priorityLevel;
          return fiber;
        };
        var createFiberFromYield = function(yieldNode, internalContextTag, priorityLevel) {
          var fiber = createFiber(YieldComponent$1, null, internalContextTag);
          return fiber;
        };
        var createFiberFromPortal = function(portal, internalContextTag, priorityLevel) {
          var fiber = createFiber(HostPortal$2, portal.key, internalContextTag);
          fiber.pendingProps = portal.children || [];
          fiber.pendingWorkPriority = priorityLevel;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            implementation: portal.implementation
          };
          return fiber;
        };
        var largerPriority = function(p1, p2) {
          return p1 !== NoWork$1 && (p2 === NoWork$1 || p2 > p1) ? p1 : p2;
        };
        var ReactFiber = {
          createWorkInProgress,
          createHostRootFiber: createHostRootFiber$1,
          createFiberFromElement,
          createFiberFromFragment,
          createFiberFromText,
          createFiberFromElementType: createFiberFromElementType_1,
          createFiberFromHostInstanceForDeletion,
          createFiberFromCoroutine,
          createFiberFromYield,
          createFiberFromPortal,
          largerPriority
        };
        var createHostRootFiber = ReactFiber.createHostRootFiber;
        var createFiberRoot$1 = function(containerInfo) {
          var uninitializedFiber = createHostRootFiber();
          var root = {
            current: uninitializedFiber,
            containerInfo,
            isScheduled: false,
            nextScheduledRoot: null,
            context: null,
            pendingContext: null
          };
          uninitializedFiber.stateNode = root;
          return root;
        };
        var ReactFiberRoot = {
          createFiberRoot: createFiberRoot$1
        };
        var defaultShowDialog = function(capturedError) {
          return true;
        };
        var showDialog = defaultShowDialog;
        function logCapturedError$1(capturedError) {
          var logError = showDialog(capturedError);
          if (logError === false) {
            return;
          }
          var error = capturedError.error;
          {
            var componentName = capturedError.componentName, componentStack = capturedError.componentStack, errorBoundaryName = capturedError.errorBoundaryName, errorBoundaryFound = capturedError.errorBoundaryFound, willRetry = capturedError.willRetry;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage = void 0;
            if (errorBoundaryFound && errorBoundaryName) {
              if (willRetry) {
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              } else {
                errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\nRecreating the tree from scratch failed so React will unmount the tree.";
              }
            } else {
              errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nYou can learn more about error boundaries at https://fb.me/react-error-boundaries.";
            }
            var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
            console.error(combinedMessage);
          }
        }
        var injection$1 = {
          injectDialog: function(fn) {
            !(showDialog === defaultShowDialog) ? invariant(false, "The custom dialog was already injected.") : void 0;
            !(typeof fn === "function") ? invariant(false, "Injected showDialog() must be a function.") : void 0;
            showDialog = fn;
          }
        };
        var logCapturedError_1 = logCapturedError$1;
        var ReactFiberErrorLogger = {
          injection: injection$1,
          logCapturedError: logCapturedError_1
        };
        var REACT_COROUTINE_TYPE$1;
        var REACT_YIELD_TYPE$1;
        if (typeof Symbol === "function" && Symbol["for"]) {
          REACT_COROUTINE_TYPE$1 = Symbol["for"]("react.coroutine");
          REACT_YIELD_TYPE$1 = Symbol["for"]("react.yield");
        } else {
          REACT_COROUTINE_TYPE$1 = 60104;
          REACT_YIELD_TYPE$1 = 60105;
        }
        var createCoroutine = function(children, handler, props) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          var coroutine = {
            $$typeof: REACT_COROUTINE_TYPE$1,
            key: key == null ? null : "" + key,
            children,
            handler,
            props
          };
          {
            if (Object.freeze) {
              Object.freeze(coroutine.props);
              Object.freeze(coroutine);
            }
          }
          return coroutine;
        };
        var createYield = function(value) {
          var yieldNode = {
            $$typeof: REACT_YIELD_TYPE$1,
            value
          };
          {
            if (Object.freeze) {
              Object.freeze(yieldNode);
            }
          }
          return yieldNode;
        };
        var isCoroutine = function(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_COROUTINE_TYPE$1;
        };
        var isYield = function(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_YIELD_TYPE$1;
        };
        var REACT_YIELD_TYPE_1 = REACT_YIELD_TYPE$1;
        var REACT_COROUTINE_TYPE_1 = REACT_COROUTINE_TYPE$1;
        var ReactCoroutine = {
          createCoroutine,
          createYield,
          isCoroutine,
          isYield,
          REACT_YIELD_TYPE: REACT_YIELD_TYPE_1,
          REACT_COROUTINE_TYPE: REACT_COROUTINE_TYPE_1
        };
        var REACT_PORTAL_TYPE$1 = typeof Symbol === "function" && Symbol["for"] && Symbol["for"]("react.portal") || 60106;
        var createPortal$1 = function(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          return {
            $$typeof: REACT_PORTAL_TYPE$1,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        };
        var isPortal = function(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_PORTAL_TYPE$1;
        };
        var REACT_PORTAL_TYPE_1 = REACT_PORTAL_TYPE$1;
        var ReactPortal = {
          createPortal: createPortal$1,
          isPortal,
          REACT_PORTAL_TYPE: REACT_PORTAL_TYPE_1
        };
        var REACT_COROUTINE_TYPE = ReactCoroutine.REACT_COROUTINE_TYPE;
        var REACT_YIELD_TYPE = ReactCoroutine.REACT_YIELD_TYPE;
        var REACT_PORTAL_TYPE = ReactPortal.REACT_PORTAL_TYPE;
        {
          var _require3$4 = ReactDebugCurrentFiber_1, getCurrentFiberStackAddendum$5 = _require3$4.getCurrentFiberStackAddendum;
          var warning$24 = require$$0;
          var didWarnAboutMaps = false;
          var ownerHasKeyUseWarning = {};
          var warnForMissingKey = function(child) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            !(typeof child._store === "object") ? invariant(false, "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.") : void 0;
            child._store.validated = true;
            var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.' + (getCurrentFiberStackAddendum$5() || "");
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            warning$24(false, 'Each child in an array or iterator should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.%s', getCurrentFiberStackAddendum$5());
          };
        }
        var createWorkInProgress$2 = ReactFiber.createWorkInProgress;
        var createFiberFromElement$1 = ReactFiber.createFiberFromElement;
        var createFiberFromFragment$1 = ReactFiber.createFiberFromFragment;
        var createFiberFromText$1 = ReactFiber.createFiberFromText;
        var createFiberFromCoroutine$1 = ReactFiber.createFiberFromCoroutine;
        var createFiberFromYield$1 = ReactFiber.createFiberFromYield;
        var createFiberFromPortal$1 = ReactFiber.createFiberFromPortal;
        var isArray = Array.isArray;
        var FunctionalComponent$2 = ReactTypeOfWork.FunctionalComponent;
        var ClassComponent$7 = ReactTypeOfWork.ClassComponent;
        var HostText$5 = ReactTypeOfWork.HostText;
        var HostPortal$5 = ReactTypeOfWork.HostPortal;
        var CoroutineComponent$2 = ReactTypeOfWork.CoroutineComponent;
        var YieldComponent$3 = ReactTypeOfWork.YieldComponent;
        var Fragment$3 = ReactTypeOfWork.Fragment;
        var NoEffect$2 = ReactTypeOfSideEffect.NoEffect;
        var Placement$3 = ReactTypeOfSideEffect.Placement;
        var Deletion$1 = ReactTypeOfSideEffect.Deletion;
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol["for"] && Symbol["for"]("react.element") || 60103;
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable === "undefined") {
            return null;
          }
          var iteratorFn = ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
          return null;
        }
        function coerceRef(current, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function") {
            if (element._owner) {
              var owner = element._owner;
              var inst = void 0;
              if (owner) {
                if (typeof owner.tag === "number") {
                  var ownerFiber = owner;
                  !(ownerFiber.tag === ClassComponent$7) ? invariant(false, "Stateless function components cannot have refs.") : void 0;
                  inst = ownerFiber.stateNode;
                } else {
                  inst = owner.getPublicInstance();
                }
              }
              !inst ? invariant(false, "Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.", mixedRef) : void 0;
              var stringRef = "" + mixedRef;
              if (current !== null && current.ref !== null && current.ref._stringRef === stringRef) {
                return current.ref;
              }
              var ref = function(value) {
                var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              !(typeof mixedRef === "string") ? invariant(false, "Expected ref to be a function or a string.") : void 0;
              !element._owner ? invariant(false, "Element ref was specified as a string (%s) but no owner was set. You may have multiple copies of React loaded. (details: https://fb.me/react-refs-must-have-owner).", mixedRef) : void 0;
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          if (returnFiber.type !== "textarea") {
            var addendum = "";
            {
              addendum = " If you meant to render a collection of children, use an array instead." + (getCurrentFiberStackAddendum$5() || "");
            }
            invariant(false, "Objects are not valid as a React child (found: %s).%s", Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, addendum);
          }
        }
        function warnOnFunctionType() {
          warning$24(false, "Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.%s", getCurrentFiberStackAddendum$5() || "");
        }
        function ChildReconciler(shouldClone, shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            if (!shouldClone) {
              if (childToDelete.alternate === null) {
                return;
              }
              childToDelete = childToDelete.alternate;
            }
            var last = returnFiber.lastEffect;
            if (last !== null) {
              last.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
            childToDelete.nextEffect = null;
            childToDelete.effectTag = Deletion$1;
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, priority) {
            if (shouldClone) {
              var clone = createWorkInProgress$2(fiber, priority);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            } else {
              fiber.pendingWorkPriority = priority;
              fiber.effectTag = NoEffect$2;
              fiber.index = 0;
              fiber.sibling = null;
              return fiber;
            }
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              return lastPlacedIndex;
            }
            var current = newFiber.alternate;
            if (current !== null) {
              var oldIndex = current.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.effectTag = Placement$3;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.effectTag = Placement$3;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.effectTag = Placement$3;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current, textContent, priority) {
            if (current === null || current.tag !== HostText$5) {
              var created = createFiberFromText$1(textContent, returnFiber.internalContextTag, priority);
              created["return"] = returnFiber;
              return created;
            } else {
              var existing = useFiber(current, priority);
              existing.pendingProps = textContent;
              existing["return"] = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current, element, priority) {
            if (current === null || current.type !== element.type) {
              var created = createFiberFromElement$1(element, returnFiber.internalContextTag, priority);
              created.ref = coerceRef(current, element);
              created["return"] = returnFiber;
              return created;
            } else {
              var existing = useFiber(current, priority);
              existing.ref = coerceRef(current, element);
              existing.pendingProps = element.props;
              existing["return"] = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            }
          }
          function updateCoroutine(returnFiber, current, coroutine, priority) {
            if (current === null || current.tag !== CoroutineComponent$2) {
              var created = createFiberFromCoroutine$1(coroutine, returnFiber.internalContextTag, priority);
              created["return"] = returnFiber;
              return created;
            } else {
              var existing = useFiber(current, priority);
              existing.pendingProps = coroutine;
              existing["return"] = returnFiber;
              return existing;
            }
          }
          function updateYield(returnFiber, current, yieldNode, priority) {
            if (current === null || current.tag !== YieldComponent$3) {
              var created = createFiberFromYield$1(yieldNode, returnFiber.internalContextTag, priority);
              created.type = yieldNode.value;
              created["return"] = returnFiber;
              return created;
            } else {
              var existing = useFiber(current, priority);
              existing.type = yieldNode.value;
              existing["return"] = returnFiber;
              return existing;
            }
          }
          function updatePortal(returnFiber, current, portal, priority) {
            if (current === null || current.tag !== HostPortal$5 || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal$1(portal, returnFiber.internalContextTag, priority);
              created["return"] = returnFiber;
              return created;
            } else {
              var existing = useFiber(current, priority);
              existing.pendingProps = portal.children || [];
              existing["return"] = returnFiber;
              return existing;
            }
          }
          function updateFragment(returnFiber, current, fragment, priority) {
            if (current === null || current.tag !== Fragment$3) {
              var created = createFiberFromFragment$1(fragment, returnFiber.internalContextTag, priority);
              created["return"] = returnFiber;
              return created;
            } else {
              var existing = useFiber(current, priority);
              existing.pendingProps = fragment;
              existing["return"] = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, priority) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var created = createFiberFromText$1("" + newChild, returnFiber.internalContextTag, priority);
              created["return"] = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement$1(newChild, returnFiber.internalContextTag, priority);
                  _created.ref = coerceRef(null, newChild);
                  _created["return"] = returnFiber;
                  return _created;
                }
                case REACT_COROUTINE_TYPE: {
                  var _created2 = createFiberFromCoroutine$1(newChild, returnFiber.internalContextTag, priority);
                  _created2["return"] = returnFiber;
                  return _created2;
                }
                case REACT_YIELD_TYPE: {
                  var _created3 = createFiberFromYield$1(newChild, returnFiber.internalContextTag, priority);
                  _created3.type = newChild.value;
                  _created3["return"] = returnFiber;
                  return _created3;
                }
                case REACT_PORTAL_TYPE: {
                  var _created4 = createFiberFromPortal$1(newChild, returnFiber.internalContextTag, priority);
                  _created4["return"] = returnFiber;
                  return _created4;
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created5 = createFiberFromFragment$1(newChild, returnFiber.internalContextTag, priority);
                _created5["return"] = returnFiber;
                return _created5;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, priority) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, priority);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    return updateElement(returnFiber, oldFiber, newChild, priority);
                  } else {
                    return null;
                  }
                }
                case REACT_COROUTINE_TYPE: {
                  if (newChild.key === key) {
                    return updateCoroutine(returnFiber, oldFiber, newChild, priority);
                  } else {
                    return null;
                  }
                }
                case REACT_YIELD_TYPE: {
                  if (key === null) {
                    return updateYield(returnFiber, oldFiber, newChild, priority);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, priority);
                  } else {
                    return null;
                  }
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment(returnFiber, oldFiber, newChild, priority);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, priority) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, priority);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateElement(returnFiber, _matchedFiber, newChild, priority);
                }
                case REACT_COROUTINE_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateCoroutine(returnFiber, _matchedFiber2, newChild, priority);
                }
                case REACT_YIELD_TYPE: {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateYield(returnFiber, _matchedFiber3, newChild, priority);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber4 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber4, newChild, priority);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber5 = existingChildren.get(newIdx) || null;
                return updateFragment(returnFiber, _matchedFiber5, newChild, priority);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_COROUTINE_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  warning$24(false, "Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.%s", key, getCurrentFiberStackAddendum$5());
                  break;
                default:
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, priority) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], priority);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], priority);
                if (!_newFiber) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], priority);
              if (_newFiber2) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren["delete"](_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, priority) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            !(typeof iteratorFn === "function") ? invariant(false, "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.") : void 0;
            {
              if (typeof newChildrenIterable.entries === "function") {
                var possibleMap = newChildrenIterable;
                if (possibleMap.entries === iteratorFn) {
                  warning$24(didWarnAboutMaps, "Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead.%s", getCurrentFiberStackAddendum$5());
                  didWarnAboutMaps = true;
                }
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            !(newChildren != null) ? invariant(false, "An iterable object provided no iterator.") : void 0;
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, priority);
              if (newFiber === null) {
                if (!oldFiber) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, priority);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, priority);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren["delete"](_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, priority) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText$5) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, priority);
              existing.pendingProps = textContent;
              existing["return"] = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText$1(textContent, returnFiber.internalContextTag, priority);
            created["return"] = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, priority) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.type === element.type) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, priority);
                  existing.ref = coerceRef(child, element);
                  existing.pendingProps = element.props;
                  existing["return"] = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromElement$1(element, returnFiber.internalContextTag, priority);
            created.ref = coerceRef(currentFirstChild, element);
            created["return"] = returnFiber;
            return created;
          }
          function reconcileSingleCoroutine(returnFiber, currentFirstChild, coroutine, priority) {
            var key = coroutine.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === CoroutineComponent$2) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, priority);
                  existing.pendingProps = coroutine;
                  existing["return"] = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromCoroutine$1(coroutine, returnFiber.internalContextTag, priority);
            created["return"] = returnFiber;
            return created;
          }
          function reconcileSingleYield(returnFiber, currentFirstChild, yieldNode, priority) {
            var child = currentFirstChild;
            if (child !== null) {
              if (child.tag === YieldComponent$3) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, priority);
                existing.type = yieldNode.value;
                existing["return"] = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
              }
            }
            var created = createFiberFromYield$1(yieldNode, returnFiber.internalContextTag, priority);
            created.type = yieldNode.value;
            created["return"] = returnFiber;
            return created;
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, priority) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal$5 && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, priority);
                  existing.pendingProps = portal.children || [];
                  existing["return"] = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal$1(portal, returnFiber.internalContextTag, priority);
            created["return"] = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, priority) {
            var isObject = typeof newChild === "object" && newChild !== null;
            if (isObject) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, priority));
                case REACT_COROUTINE_TYPE:
                  return placeSingleChild(reconcileSingleCoroutine(returnFiber, currentFirstChild, newChild, priority));
                case REACT_YIELD_TYPE:
                  return placeSingleChild(reconcileSingleYield(returnFiber, currentFirstChild, newChild, priority));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, priority));
              }
            }
            if (typeof newChild === "string" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, priority));
            }
            if (isArray(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, priority);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, priority);
            }
            if (isObject) {
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            if (typeof newChild === "undefined") {
              switch (returnFiber.tag) {
                case ClassComponent$7: {
                  {
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }
                case FunctionalComponent$2: {
                  var Component = returnFiber.type;
                  invariant(false, "%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.", Component.displayName || Component.name || "Component");
                }
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers$1 = ChildReconciler(true, true);
        var reconcileChildFibersInPlace$1 = ChildReconciler(false, true);
        var mountChildFibersInPlace$1 = ChildReconciler(false, false);
        var cloneChildFibers$1 = function(current, workInProgress) {
          !(current === null || workInProgress.child === current.child) ? invariant(false, "Resuming work not yet implemented.") : void 0;
          if (workInProgress.child === null) {
            return;
          }
          var currentChild = workInProgress.child;
          var newChild = createWorkInProgress$2(currentChild, currentChild.pendingWorkPriority);
          newChild.pendingProps = currentChild.pendingProps;
          workInProgress.child = newChild;
          newChild["return"] = workInProgress;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress$2(currentChild, currentChild.pendingWorkPriority);
            newChild.pendingProps = currentChild.pendingProps;
            newChild["return"] = workInProgress;
          }
          newChild.sibling = null;
        };
        var ReactChildFiber = {
          reconcileChildFibers: reconcileChildFibers$1,
          reconcileChildFibersInPlace: reconcileChildFibersInPlace$1,
          mountChildFibersInPlace: mountChildFibersInPlace$1,
          cloneChildFibers: cloneChildFibers$1
        };
        var Update$1 = ReactTypeOfSideEffect.Update;
        var AsyncUpdates$1 = ReactTypeOfInternalContext.AsyncUpdates;
        var cacheContext$1 = ReactFiberContext.cacheContext;
        var getMaskedContext$2 = ReactFiberContext.getMaskedContext;
        var getUnmaskedContext$2 = ReactFiberContext.getUnmaskedContext;
        var isContextConsumer$1 = ReactFiberContext.isContextConsumer;
        var addUpdate$1 = ReactFiberUpdateQueue.addUpdate;
        var addReplaceUpdate$1 = ReactFiberUpdateQueue.addReplaceUpdate;
        var addForceUpdate$1 = ReactFiberUpdateQueue.addForceUpdate;
        var beginUpdateQueue$2 = ReactFiberUpdateQueue.beginUpdateQueue;
        var _require5 = ReactFiberContext;
        var hasContextChanged$2 = _require5.hasContextChanged;
        var isMounted$1 = ReactFiberTreeReflection.isMounted;
        var fakeInternalInstance = {};
        var isArray$1 = Array.isArray;
        {
          var _require7$1 = ReactDebugFiberPerf_1, startPhaseTimer$1 = _require7$1.startPhaseTimer, stopPhaseTimer$1 = _require7$1.stopPhaseTimer;
          var warning$25 = require$$0;
          var warnOnInvalidCallback = function(callback, callerName) {
            warning$25(callback === null || typeof callback === "function", "%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              invariant(false, "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        var ReactFiberClassComponent = function(scheduleUpdate, getPriorityContext, memoizeProps, memoizeState) {
          var updater = {
            isMounted: isMounted$1,
            enqueueSetState: function(instance, partialState, callback) {
              var fiber = ReactInstanceMap_1.get(instance);
              var priorityLevel = getPriorityContext(fiber, false);
              callback = callback === void 0 ? null : callback;
              {
                warnOnInvalidCallback(callback, "setState");
              }
              addUpdate$1(fiber, partialState, callback, priorityLevel);
              scheduleUpdate(fiber, priorityLevel);
            },
            enqueueReplaceState: function(instance, state, callback) {
              var fiber = ReactInstanceMap_1.get(instance);
              var priorityLevel = getPriorityContext(fiber, false);
              callback = callback === void 0 ? null : callback;
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              addReplaceUpdate$1(fiber, state, callback, priorityLevel);
              scheduleUpdate(fiber, priorityLevel);
            },
            enqueueForceUpdate: function(instance, callback) {
              var fiber = ReactInstanceMap_1.get(instance);
              var priorityLevel = getPriorityContext(fiber, false);
              callback = callback === void 0 ? null : callback;
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              addForceUpdate$1(fiber, callback, priorityLevel);
              scheduleUpdate(fiber, priorityLevel);
            }
          };
          function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
            if (oldProps === null || workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate) {
              return true;
            }
            var instance = workInProgress.stateNode;
            var type = workInProgress.type;
            if (typeof instance.shouldComponentUpdate === "function") {
              {
                startPhaseTimer$1(workInProgress, "shouldComponentUpdate");
              }
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);
              {
                stopPhaseTimer$1();
              }
              {
                warning$25(shouldUpdate !== void 0, "%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName_1(workInProgress) || "Unknown");
              }
              return shouldUpdate;
            }
            if (type.prototype && type.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress) {
            var instance = workInProgress.stateNode;
            var type = workInProgress.type;
            {
              var name = getComponentName_1(workInProgress);
              var renderPresent = instance.render;
              warning$25(renderPresent, "%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
              warning$25(noGetInitialStateOnES6, "getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
              warning$25(noGetDefaultPropsOnES6, "getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              var noInstancePropTypes = !instance.propTypes;
              warning$25(noInstancePropTypes, "propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              var noInstanceContextTypes = !instance.contextTypes;
              warning$25(noInstanceContextTypes, "contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== "function";
              warning$25(noComponentShouldUpdate, "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              if (type.prototype && type.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                warning$25(false, "%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName_1(workInProgress) || "A pure component");
              }
              var noComponentDidUnmount = typeof instance.componentDidUnmount !== "function";
              warning$25(noComponentDidUnmount, "%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== "function";
              warning$25(noComponentWillRecieveProps, "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              var hasMutatedProps = instance.props !== workInProgress.pendingProps;
              warning$25(instance.props === void 0 || !hasMutatedProps, "%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              var noInstanceDefaultProps = !instance.defaultProps;
              warning$25(noInstanceDefaultProps, "Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            var state = instance.state;
            if (state && (typeof state !== "object" || isArray$1(state))) {
              invariant(false, "%s.state: must be set to an object or null", getComponentName_1(workInProgress));
            }
            if (typeof instance.getChildContext === "function") {
              !(typeof workInProgress.type.childContextTypes === "object") ? invariant(false, "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", getComponentName_1(workInProgress)) : void 0;
            }
          }
          function resetInputPointers(workInProgress, instance) {
            instance.props = workInProgress.memoizedProps;
            instance.state = workInProgress.memoizedState;
          }
          function adoptClassInstance(workInProgress, instance) {
            instance.updater = updater;
            workInProgress.stateNode = instance;
            ReactInstanceMap_1.set(instance, workInProgress);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress, props) {
            var ctor = workInProgress.type;
            var unmaskedContext = getUnmaskedContext$2(workInProgress);
            var needsContext = isContextConsumer$1(workInProgress);
            var context = needsContext ? getMaskedContext$2(workInProgress, unmaskedContext) : emptyObject;
            var instance = new ctor(props, context);
            adoptClassInstance(workInProgress, instance);
            if (needsContext) {
              cacheContext$1(workInProgress, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress, instance) {
            {
              startPhaseTimer$1(workInProgress, "componentWillMount");
            }
            var oldState = instance.state;
            instance.componentWillMount();
            {
              stopPhaseTimer$1();
            }
            if (oldState !== instance.state) {
              {
                warning$25(false, "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName_1(workInProgress));
              }
              updater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
            {
              startPhaseTimer$1(workInProgress, "componentWillReceiveProps");
            }
            var oldState = instance.state;
            instance.componentWillReceiveProps(newProps, newContext);
            {
              stopPhaseTimer$1();
            }
            if (instance.state !== oldState) {
              {
                warning$25(false, "%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName_1(workInProgress));
              }
              updater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress, priorityLevel) {
            var current = workInProgress.alternate;
            {
              checkClassInstance(workInProgress);
            }
            var instance = workInProgress.stateNode;
            var state = instance.state || null;
            var props = workInProgress.pendingProps;
            !props ? invariant(false, "There must be pending props for an initial mount. This error is likely caused by a bug in React. Please file an issue.") : void 0;
            var unmaskedContext = getUnmaskedContext$2(workInProgress);
            instance.props = props;
            instance.state = state;
            instance.refs = emptyObject;
            instance.context = getMaskedContext$2(workInProgress, unmaskedContext);
            if (ReactFeatureFlags_1.enableAsyncSubtreeAPI && workInProgress.type != null && workInProgress.type.prototype != null && workInProgress.type.prototype.unstable_isAsyncReactComponent === true) {
              workInProgress.internalContextTag |= AsyncUpdates$1;
            }
            if (typeof instance.componentWillMount === "function") {
              callComponentWillMount(workInProgress, instance);
              var updateQueue = workInProgress.updateQueue;
              if (updateQueue !== null) {
                instance.state = beginUpdateQueue$2(current, workInProgress, updateQueue, instance, state, props, priorityLevel);
              }
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress.effectTag |= Update$1;
            }
          }
          function updateClassInstance(current, workInProgress, priorityLevel) {
            var instance = workInProgress.stateNode;
            resetInputPointers(workInProgress, instance);
            var oldProps = workInProgress.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (!newProps) {
              newProps = oldProps;
              !(newProps != null) ? invariant(false, "There should always be pending or memoized props. This error is likely caused by a bug in React. Please file an issue.") : void 0;
            }
            var oldContext = instance.context;
            var newUnmaskedContext = getUnmaskedContext$2(workInProgress);
            var newContext = getMaskedContext$2(workInProgress, newUnmaskedContext);
            if (typeof instance.componentWillReceiveProps === "function" && (oldProps !== newProps || oldContext !== newContext)) {
              callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
            }
            var oldState = workInProgress.memoizedState;
            var newState = void 0;
            if (workInProgress.updateQueue !== null) {
              newState = beginUpdateQueue$2(current, workInProgress, workInProgress.updateQueue, instance, oldState, newProps, priorityLevel);
            } else {
              newState = oldState;
            }
            if (oldProps === newProps && oldState === newState && !hasContextChanged$2() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {
              if (typeof instance.componentDidUpdate === "function") {
                if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                  workInProgress.effectTag |= Update$1;
                }
              }
              return false;
            }
            var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);
            if (shouldUpdate) {
              if (typeof instance.componentWillUpdate === "function") {
                {
                  startPhaseTimer$1(workInProgress, "componentWillUpdate");
                }
                instance.componentWillUpdate(newProps, newState, newContext);
                {
                  stopPhaseTimer$1();
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress.effectTag |= Update$1;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                  workInProgress.effectTag |= Update$1;
                }
              }
              memoizeProps(workInProgress, newProps);
              memoizeState(workInProgress, newState);
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = newContext;
            return shouldUpdate;
          }
          return {
            adoptClassInstance,
            constructClassInstance,
            mountClassInstance,
            updateClassInstance
          };
        };
        var mountChildFibersInPlace = ReactChildFiber.mountChildFibersInPlace;
        var reconcileChildFibers = ReactChildFiber.reconcileChildFibers;
        var reconcileChildFibersInPlace = ReactChildFiber.reconcileChildFibersInPlace;
        var cloneChildFibers = ReactChildFiber.cloneChildFibers;
        var beginUpdateQueue$1 = ReactFiberUpdateQueue.beginUpdateQueue;
        var getMaskedContext$1 = ReactFiberContext.getMaskedContext;
        var getUnmaskedContext$1 = ReactFiberContext.getUnmaskedContext;
        var hasContextChanged$1 = ReactFiberContext.hasContextChanged;
        var pushContextProvider$1 = ReactFiberContext.pushContextProvider;
        var pushTopLevelContextObject$1 = ReactFiberContext.pushTopLevelContextObject;
        var invalidateContextProvider$1 = ReactFiberContext.invalidateContextProvider;
        var IndeterminateComponent$2 = ReactTypeOfWork.IndeterminateComponent;
        var FunctionalComponent$1 = ReactTypeOfWork.FunctionalComponent;
        var ClassComponent$6 = ReactTypeOfWork.ClassComponent;
        var HostRoot$7 = ReactTypeOfWork.HostRoot;
        var HostComponent$7 = ReactTypeOfWork.HostComponent;
        var HostText$4 = ReactTypeOfWork.HostText;
        var HostPortal$4 = ReactTypeOfWork.HostPortal;
        var CoroutineComponent$1 = ReactTypeOfWork.CoroutineComponent;
        var CoroutineHandlerPhase = ReactTypeOfWork.CoroutineHandlerPhase;
        var YieldComponent$2 = ReactTypeOfWork.YieldComponent;
        var Fragment$2 = ReactTypeOfWork.Fragment;
        var NoWork$3 = ReactPriorityLevel.NoWork;
        var OffscreenPriority$1 = ReactPriorityLevel.OffscreenPriority;
        var PerformedWork$1 = ReactTypeOfSideEffect.PerformedWork;
        var Placement$2 = ReactTypeOfSideEffect.Placement;
        var ContentReset$1 = ReactTypeOfSideEffect.ContentReset;
        var Err$1 = ReactTypeOfSideEffect.Err;
        var Ref$1 = ReactTypeOfSideEffect.Ref;
        var ReactCurrentOwner$2 = ReactGlobalSharedState_1.ReactCurrentOwner;
        {
          var ReactDebugCurrentFiber$4 = ReactDebugCurrentFiber_1;
          var _require7 = ReactDebugFiberPerf_1, cancelWorkTimer = _require7.cancelWorkTimer;
          var warning$23 = require$$0;
          var warnedAboutStatelessRefs = {};
        }
        var ReactFiberBeginWork = function(config, hostContext, hydrationContext, scheduleUpdate, getPriorityContext) {
          var shouldSetTextContent = config.shouldSetTextContent, useSyncScheduling = config.useSyncScheduling, shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree;
          var pushHostContext = hostContext.pushHostContext, pushHostContainer = hostContext.pushHostContainer;
          var enterHydrationState = hydrationContext.enterHydrationState, resetHydrationState = hydrationContext.resetHydrationState, tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;
          var _ReactFiberClassCompo = ReactFiberClassComponent(scheduleUpdate, getPriorityContext, memoizeProps, memoizeState), adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance, constructClassInstance = _ReactFiberClassCompo.constructClassInstance, mountClassInstance = _ReactFiberClassCompo.mountClassInstance, updateClassInstance = _ReactFiberClassCompo.updateClassInstance;
          function reconcileChildren(current, workInProgress, nextChildren) {
            var priorityLevel = workInProgress.pendingWorkPriority;
            reconcileChildrenAtPriority(current, workInProgress, nextChildren, priorityLevel);
          }
          function reconcileChildrenAtPriority(current, workInProgress, nextChildren, priorityLevel) {
            if (current === null) {
              workInProgress.child = mountChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel);
            } else if (current.child === workInProgress.child) {
              workInProgress.child = reconcileChildFibers(workInProgress, workInProgress.child, nextChildren, priorityLevel);
            } else {
              workInProgress.child = reconcileChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel);
            }
          }
          function updateFragment(current, workInProgress) {
            var nextChildren = workInProgress.pendingProps;
            if (hasContextChanged$1()) {
              if (nextChildren === null) {
                nextChildren = workInProgress.memoizedProps;
              }
            } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            }
            reconcileChildren(current, workInProgress, nextChildren);
            memoizeProps(workInProgress, nextChildren);
            return workInProgress.child;
          }
          function markRef(current, workInProgress) {
            var ref = workInProgress.ref;
            if (ref !== null && (!current || current.ref !== ref)) {
              workInProgress.effectTag |= Ref$1;
            }
          }
          function updateFunctionalComponent(current, workInProgress) {
            var fn = workInProgress.type;
            var nextProps = workInProgress.pendingProps;
            var memoizedProps = workInProgress.memoizedProps;
            if (hasContextChanged$1()) {
              if (nextProps === null) {
                nextProps = memoizedProps;
              }
            } else {
              if (nextProps === null || memoizedProps === nextProps) {
                return bailoutOnAlreadyFinishedWork(current, workInProgress);
              }
            }
            var unmaskedContext = getUnmaskedContext$1(workInProgress);
            var context = getMaskedContext$1(workInProgress, unmaskedContext);
            var nextChildren;
            {
              ReactCurrentOwner$2.current = workInProgress;
              ReactDebugCurrentFiber$4.setCurrentFiber(workInProgress, "render");
              nextChildren = fn(nextProps, context);
              ReactDebugCurrentFiber$4.setCurrentFiber(workInProgress, null);
            }
            workInProgress.effectTag |= PerformedWork$1;
            reconcileChildren(current, workInProgress, nextChildren);
            memoizeProps(workInProgress, nextProps);
            return workInProgress.child;
          }
          function updateClassComponent(current, workInProgress, priorityLevel) {
            var hasContext = pushContextProvider$1(workInProgress);
            var shouldUpdate = void 0;
            if (current === null) {
              if (!workInProgress.stateNode) {
                constructClassInstance(workInProgress, workInProgress.pendingProps);
                mountClassInstance(workInProgress, priorityLevel);
                shouldUpdate = true;
              } else {
                invariant(false, "Resuming work not yet implemented.");
              }
            } else {
              shouldUpdate = updateClassInstance(current, workInProgress, priorityLevel);
            }
            return finishClassComponent(current, workInProgress, shouldUpdate, hasContext);
          }
          function finishClassComponent(current, workInProgress, shouldUpdate, hasContext) {
            markRef(current, workInProgress);
            if (!shouldUpdate) {
              if (hasContext) {
                invalidateContextProvider$1(workInProgress, false);
              }
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            }
            var instance = workInProgress.stateNode;
            ReactCurrentOwner$2.current = workInProgress;
            var nextChildren = void 0;
            {
              ReactDebugCurrentFiber$4.setCurrentFiber(workInProgress, "render");
              nextChildren = instance.render();
              ReactDebugCurrentFiber$4.setCurrentFiber(workInProgress, null);
            }
            workInProgress.effectTag |= PerformedWork$1;
            reconcileChildren(current, workInProgress, nextChildren);
            memoizeState(workInProgress, instance.state);
            memoizeProps(workInProgress, instance.props);
            if (hasContext) {
              invalidateContextProvider$1(workInProgress, true);
            }
            return workInProgress.child;
          }
          function pushHostRootContext(workInProgress) {
            var root = workInProgress.stateNode;
            if (root.pendingContext) {
              pushTopLevelContextObject$1(workInProgress, root.pendingContext, root.pendingContext !== root.context);
            } else if (root.context) {
              pushTopLevelContextObject$1(workInProgress, root.context, false);
            }
            pushHostContainer(workInProgress, root.containerInfo);
          }
          function updateHostRoot(current, workInProgress, priorityLevel) {
            pushHostRootContext(workInProgress);
            var updateQueue = workInProgress.updateQueue;
            if (updateQueue !== null) {
              var prevState = workInProgress.memoizedState;
              var state = beginUpdateQueue$1(current, workInProgress, updateQueue, null, prevState, null, priorityLevel);
              if (prevState === state) {
                resetHydrationState();
                return bailoutOnAlreadyFinishedWork(current, workInProgress);
              }
              var element = state.element;
              if ((current === null || current.child === null) && enterHydrationState(workInProgress)) {
                workInProgress.effectTag |= Placement$2;
                workInProgress.child = mountChildFibersInPlace(workInProgress, workInProgress.child, element, priorityLevel);
              } else {
                resetHydrationState();
                reconcileChildren(current, workInProgress, element);
              }
              memoizeState(workInProgress, state);
              return workInProgress.child;
            }
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }
          function updateHostComponent(current, workInProgress, renderPriority) {
            pushHostContext(workInProgress);
            if (current === null) {
              tryToClaimNextHydratableInstance(workInProgress);
            }
            var type = workInProgress.type;
            var memoizedProps = workInProgress.memoizedProps;
            var nextProps = workInProgress.pendingProps;
            if (nextProps === null) {
              nextProps = memoizedProps;
              !(nextProps !== null) ? invariant(false, "We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.") : void 0;
            }
            var prevProps = current !== null ? current.memoizedProps : null;
            if (hasContextChanged$1()) {
            } else if (nextProps === null || memoizedProps === nextProps) {
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            }
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps && shouldSetTextContent(type, prevProps)) {
              workInProgress.effectTag |= ContentReset$1;
            }
            markRef(current, workInProgress);
            if (renderPriority !== OffscreenPriority$1 && !useSyncScheduling && shouldDeprioritizeSubtree(type, nextProps)) {
              workInProgress.pendingWorkPriority = OffscreenPriority$1;
              return null;
            }
            reconcileChildren(current, workInProgress, nextChildren);
            memoizeProps(workInProgress, nextProps);
            return workInProgress.child;
          }
          function updateHostText(current, workInProgress) {
            if (current === null) {
              tryToClaimNextHydratableInstance(workInProgress);
            }
            var nextProps = workInProgress.pendingProps;
            if (nextProps === null) {
              nextProps = workInProgress.memoizedProps;
            }
            memoizeProps(workInProgress, nextProps);
            return null;
          }
          function mountIndeterminateComponent(current, workInProgress, priorityLevel) {
            !(current === null) ? invariant(false, "An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.") : void 0;
            var fn = workInProgress.type;
            var props = workInProgress.pendingProps;
            var unmaskedContext = getUnmaskedContext$1(workInProgress);
            var context = getMaskedContext$1(workInProgress, unmaskedContext);
            var value;
            {
              ReactCurrentOwner$2.current = workInProgress;
              value = fn(props, context);
            }
            workInProgress.effectTag |= PerformedWork$1;
            if (typeof value === "object" && value !== null && typeof value.render === "function") {
              workInProgress.tag = ClassComponent$6;
              var hasContext = pushContextProvider$1(workInProgress);
              adoptClassInstance(workInProgress, value);
              mountClassInstance(workInProgress, priorityLevel);
              return finishClassComponent(current, workInProgress, true, hasContext);
            } else {
              workInProgress.tag = FunctionalComponent$1;
              {
                var Component = workInProgress.type;
                if (Component) {
                  warning$23(!Component.childContextTypes, "%s(...): childContextTypes cannot be defined on a functional component.", Component.displayName || Component.name || "Component");
                }
                if (workInProgress.ref !== null) {
                  var info = "";
                  var ownerName = ReactDebugCurrentFiber$4.getCurrentFiberOwnerName();
                  if (ownerName) {
                    info += "\n\nCheck the render method of `" + ownerName + "`.";
                  }
                  var warningKey = ownerName || workInProgress._debugID || "";
                  var debugSource = workInProgress._debugSource;
                  if (debugSource) {
                    warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                  }
                  if (!warnedAboutStatelessRefs[warningKey]) {
                    warnedAboutStatelessRefs[warningKey] = true;
                    warning$23(false, "Stateless function components cannot be given refs. Attempts to access this ref will fail.%s%s", info, ReactDebugCurrentFiber$4.getCurrentFiberStackAddendum());
                  }
                }
              }
              reconcileChildren(current, workInProgress, value);
              memoizeProps(workInProgress, props);
              return workInProgress.child;
            }
          }
          function updateCoroutineComponent(current, workInProgress) {
            var nextCoroutine = workInProgress.pendingProps;
            if (hasContextChanged$1()) {
              if (nextCoroutine === null) {
                nextCoroutine = current && current.memoizedProps;
                !(nextCoroutine !== null) ? invariant(false, "We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.") : void 0;
              }
            } else if (nextCoroutine === null || workInProgress.memoizedProps === nextCoroutine) {
              nextCoroutine = workInProgress.memoizedProps;
            }
            var nextChildren = nextCoroutine.children;
            var priorityLevel = workInProgress.pendingWorkPriority;
            if (current === null) {
              workInProgress.stateNode = mountChildFibersInPlace(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel);
            } else if (current.child === workInProgress.child) {
              workInProgress.stateNode = reconcileChildFibers(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel);
            } else {
              workInProgress.stateNode = reconcileChildFibersInPlace(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel);
            }
            memoizeProps(workInProgress, nextCoroutine);
            return workInProgress.stateNode;
          }
          function updatePortalComponent(current, workInProgress) {
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            var priorityLevel = workInProgress.pendingWorkPriority;
            var nextChildren = workInProgress.pendingProps;
            if (hasContextChanged$1()) {
              if (nextChildren === null) {
                nextChildren = current && current.memoizedProps;
                !(nextChildren != null) ? invariant(false, "We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.") : void 0;
              }
            } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            }
            if (current === null) {
              workInProgress.child = reconcileChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel);
              memoizeProps(workInProgress, nextChildren);
            } else {
              reconcileChildren(current, workInProgress, nextChildren);
              memoizeProps(workInProgress, nextChildren);
            }
            return workInProgress.child;
          }
          function bailoutOnAlreadyFinishedWork(current, workInProgress) {
            {
              cancelWorkTimer(workInProgress);
            }
            cloneChildFibers(current, workInProgress);
            return workInProgress.child;
          }
          function bailoutOnLowPriority(current, workInProgress) {
            {
              cancelWorkTimer(workInProgress);
            }
            switch (workInProgress.tag) {
              case HostRoot$7:
                pushHostRootContext(workInProgress);
                break;
              case ClassComponent$6:
                pushContextProvider$1(workInProgress);
                break;
              case HostPortal$4:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                break;
            }
            return null;
          }
          function memoizeProps(workInProgress, nextProps) {
            workInProgress.memoizedProps = nextProps;
          }
          function memoizeState(workInProgress, nextState) {
            workInProgress.memoizedState = nextState;
          }
          function beginWork(current, workInProgress, priorityLevel) {
            if (workInProgress.pendingWorkPriority === NoWork$3 || workInProgress.pendingWorkPriority > priorityLevel) {
              return bailoutOnLowPriority(current, workInProgress);
            }
            {
              ReactDebugCurrentFiber$4.setCurrentFiber(workInProgress, null);
            }
            switch (workInProgress.tag) {
              case IndeterminateComponent$2:
                return mountIndeterminateComponent(current, workInProgress, priorityLevel);
              case FunctionalComponent$1:
                return updateFunctionalComponent(current, workInProgress);
              case ClassComponent$6:
                return updateClassComponent(current, workInProgress, priorityLevel);
              case HostRoot$7:
                return updateHostRoot(current, workInProgress, priorityLevel);
              case HostComponent$7:
                return updateHostComponent(current, workInProgress, priorityLevel);
              case HostText$4:
                return updateHostText(current, workInProgress);
              case CoroutineHandlerPhase:
                workInProgress.tag = CoroutineComponent$1;
              case CoroutineComponent$1:
                return updateCoroutineComponent(current, workInProgress);
              case YieldComponent$2:
                return null;
              case HostPortal$4:
                return updatePortalComponent(current, workInProgress);
              case Fragment$2:
                return updateFragment(current, workInProgress);
              default:
                invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function beginFailedWork(current, workInProgress, priorityLevel) {
            switch (workInProgress.tag) {
              case ClassComponent$6:
                pushContextProvider$1(workInProgress);
                break;
              case HostRoot$7:
                pushHostRootContext(workInProgress);
                break;
              default:
                invariant(false, "Invalid type of work. This error is likely caused by a bug in React. Please file an issue.");
            }
            workInProgress.effectTag |= Err$1;
            if (current === null) {
              workInProgress.child = null;
            } else if (workInProgress.child !== current.child) {
              workInProgress.child = current.child;
            }
            if (workInProgress.pendingWorkPriority === NoWork$3 || workInProgress.pendingWorkPriority > priorityLevel) {
              return bailoutOnLowPriority(current, workInProgress);
            }
            workInProgress.firstEffect = null;
            workInProgress.lastEffect = null;
            var nextChildren = null;
            reconcileChildrenAtPriority(current, workInProgress, nextChildren, priorityLevel);
            if (workInProgress.tag === ClassComponent$6) {
              var instance = workInProgress.stateNode;
              workInProgress.memoizedProps = instance.props;
              workInProgress.memoizedState = instance.state;
            }
            return workInProgress.child;
          }
          return {
            beginWork,
            beginFailedWork
          };
        };
        var reconcileChildFibers$2 = ReactChildFiber.reconcileChildFibers;
        var popContextProvider$2 = ReactFiberContext.popContextProvider;
        var popTopLevelContextObject$1 = ReactFiberContext.popTopLevelContextObject;
        var IndeterminateComponent$3 = ReactTypeOfWork.IndeterminateComponent;
        var FunctionalComponent$3 = ReactTypeOfWork.FunctionalComponent;
        var ClassComponent$8 = ReactTypeOfWork.ClassComponent;
        var HostRoot$8 = ReactTypeOfWork.HostRoot;
        var HostComponent$8 = ReactTypeOfWork.HostComponent;
        var HostText$6 = ReactTypeOfWork.HostText;
        var HostPortal$6 = ReactTypeOfWork.HostPortal;
        var CoroutineComponent$3 = ReactTypeOfWork.CoroutineComponent;
        var CoroutineHandlerPhase$1 = ReactTypeOfWork.CoroutineHandlerPhase;
        var YieldComponent$4 = ReactTypeOfWork.YieldComponent;
        var Fragment$4 = ReactTypeOfWork.Fragment;
        var Placement$4 = ReactTypeOfSideEffect.Placement;
        var Ref$2 = ReactTypeOfSideEffect.Ref;
        var Update$2 = ReactTypeOfSideEffect.Update;
        var OffscreenPriority$2 = ReactPriorityLevel.OffscreenPriority;
        {
          var ReactDebugCurrentFiber$5 = ReactDebugCurrentFiber_1;
        }
        var ReactFiberCompleteWork = function(config, hostContext, hydrationContext) {
          var createInstance = config.createInstance, createTextInstance = config.createTextInstance, appendInitialChild = config.appendInitialChild, finalizeInitialChildren = config.finalizeInitialChildren, prepareUpdate = config.prepareUpdate;
          var getRootHostContainer = hostContext.getRootHostContainer, popHostContext = hostContext.popHostContext, getHostContext = hostContext.getHostContext, popHostContainer = hostContext.popHostContainer;
          var prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance, prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance, popHydrationState = hydrationContext.popHydrationState;
          function markUpdate(workInProgress) {
            workInProgress.effectTag |= Update$2;
          }
          function markRef(workInProgress) {
            workInProgress.effectTag |= Ref$2;
          }
          function appendAllYields(yields, workInProgress) {
            var node = workInProgress.stateNode;
            if (node) {
              node["return"] = workInProgress;
            }
            while (node !== null) {
              if (node.tag === HostComponent$8 || node.tag === HostText$6 || node.tag === HostPortal$6) {
                invariant(false, "A coroutine cannot have host component children.");
              } else if (node.tag === YieldComponent$4) {
                yields.push(node.type);
              } else if (node.child !== null) {
                node.child["return"] = node;
                node = node.child;
                continue;
              }
              while (node.sibling === null) {
                if (node["return"] === null || node["return"] === workInProgress) {
                  return;
                }
                node = node["return"];
              }
              node.sibling["return"] = node["return"];
              node = node.sibling;
            }
          }
          function moveCoroutineToHandlerPhase(current, workInProgress) {
            var coroutine = workInProgress.memoizedProps;
            !coroutine ? invariant(false, "Should be resolved by now. This error is likely caused by a bug in React. Please file an issue.") : void 0;
            workInProgress.tag = CoroutineHandlerPhase$1;
            var yields = [];
            appendAllYields(yields, workInProgress);
            var fn = coroutine.handler;
            var props = coroutine.props;
            var nextChildren = fn(props, yields);
            var currentFirstChild = current !== null ? current.child : null;
            var priority = workInProgress.pendingWorkPriority;
            workInProgress.child = reconcileChildFibers$2(workInProgress, currentFirstChild, nextChildren, priority);
            return workInProgress.child;
          }
          function appendAllChildren(parent, workInProgress) {
            var node = workInProgress.child;
            while (node !== null) {
              if (node.tag === HostComponent$8 || node.tag === HostText$6) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal$6) {
              } else if (node.child !== null) {
                node = node.child;
                continue;
              }
              if (node === workInProgress) {
                return;
              }
              while (node.sibling === null) {
                if (node["return"] === null || node["return"] === workInProgress) {
                  return;
                }
                node = node["return"];
              }
              node = node.sibling;
            }
          }
          function completeWork(current, workInProgress, renderPriority) {
            {
              ReactDebugCurrentFiber$5.setCurrentFiber(workInProgress, null);
            }
            var newProps = workInProgress.pendingProps;
            if (newProps === null) {
              newProps = workInProgress.memoizedProps;
            } else if (workInProgress.pendingWorkPriority !== OffscreenPriority$2 || renderPriority === OffscreenPriority$2) {
              workInProgress.pendingProps = null;
            }
            switch (workInProgress.tag) {
              case FunctionalComponent$3:
                return null;
              case ClassComponent$8: {
                popContextProvider$2(workInProgress);
                return null;
              }
              case HostRoot$8: {
                popHostContainer(workInProgress);
                popTopLevelContextObject$1(workInProgress);
                var fiberRoot = workInProgress.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current === null || current.child === null) {
                  popHydrationState(workInProgress);
                  workInProgress.effectTag &= ~Placement$4;
                }
                return null;
              }
              case HostComponent$8: {
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current !== null && workInProgress.stateNode != null) {
                  var oldProps = current.memoizedProps;
                  var instance = workInProgress.stateNode;
                  var currentHostContext = getHostContext();
                  var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
                  workInProgress.updateQueue = updatePayload;
                  if (updatePayload) {
                    markUpdate(workInProgress);
                  }
                  if (current.ref !== workInProgress.ref) {
                    markRef(workInProgress);
                  }
                } else {
                  if (!newProps) {
                    !(workInProgress.stateNode !== null) ? invariant(false, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.") : void 0;
                    return null;
                  }
                  var _currentHostContext = getHostContext();
                  var wasHydrated = popHydrationState(workInProgress);
                  if (wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, _currentHostContext)) {
                      markUpdate(workInProgress);
                    }
                  } else {
                    var _instance = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);
                    appendAllChildren(_instance, workInProgress);
                    if (finalizeInitialChildren(_instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress);
                    }
                    workInProgress.stateNode = _instance;
                  }
                  if (workInProgress.ref !== null) {
                    markRef(workInProgress);
                  }
                }
                return null;
              }
              case HostText$6: {
                var newText = newProps;
                if (current && workInProgress.stateNode != null) {
                  var oldText = current.memoizedProps;
                  if (oldText !== newText) {
                    markUpdate(workInProgress);
                  }
                } else {
                  if (typeof newText !== "string") {
                    !(workInProgress.stateNode !== null) ? invariant(false, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.") : void 0;
                    return null;
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext2 = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostTextInstance(workInProgress)) {
                      markUpdate(workInProgress);
                    }
                  } else {
                    workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
                  }
                }
                return null;
              }
              case CoroutineComponent$3:
                return moveCoroutineToHandlerPhase(current, workInProgress);
              case CoroutineHandlerPhase$1:
                workInProgress.tag = CoroutineComponent$3;
                return null;
              case YieldComponent$4:
                return null;
              case Fragment$4:
                return null;
              case HostPortal$6:
                markUpdate(workInProgress);
                popHostContainer(workInProgress);
                return null;
              case IndeterminateComponent$3:
                invariant(false, "An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.");
              default:
                invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return {
            completeWork
          };
        };
        {
          var warning$26 = require$$0;
        }
        var onCommitFiberRoot = null;
        var onCommitFiberUnmount = null;
        var hasLoggedError = false;
        function catchErrors(fn) {
          return function(arg) {
            try {
              return fn(arg);
            } catch (err) {
              if (!hasLoggedError) {
                hasLoggedError = true;
                warning$26(false, "React DevTools encountered an error: %s", err);
              }
            }
          };
        }
        function injectInternals$1(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (!hook.supportsFiber) {
            {
              warning$26(false, "The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools");
            }
            return true;
          }
          try {
            var rendererID = hook.inject(internals);
            onCommitFiberRoot = catchErrors(function(root) {
              return hook.onCommitFiberRoot(rendererID, root);
            });
            onCommitFiberUnmount = catchErrors(function(fiber) {
              return hook.onCommitFiberUnmount(rendererID, fiber);
            });
          } catch (err) {
            {
              warning$26(false, "React DevTools encountered an error: %s.", err);
            }
          }
          return true;
        }
        function onCommitRoot$1(root) {
          if (typeof onCommitFiberRoot === "function") {
            onCommitFiberRoot(root);
          }
        }
        function onCommitUnmount$1(fiber) {
          if (typeof onCommitFiberUnmount === "function") {
            onCommitFiberUnmount(fiber);
          }
        }
        var injectInternals_1 = injectInternals$1;
        var onCommitRoot_1 = onCommitRoot$1;
        var onCommitUnmount_1 = onCommitUnmount$1;
        var ReactFiberDevToolsHook = {
          injectInternals: injectInternals_1,
          onCommitRoot: onCommitRoot_1,
          onCommitUnmount: onCommitUnmount_1
        };
        var ClassComponent$9 = ReactTypeOfWork.ClassComponent;
        var HostRoot$9 = ReactTypeOfWork.HostRoot;
        var HostComponent$9 = ReactTypeOfWork.HostComponent;
        var HostText$7 = ReactTypeOfWork.HostText;
        var HostPortal$7 = ReactTypeOfWork.HostPortal;
        var CoroutineComponent$4 = ReactTypeOfWork.CoroutineComponent;
        var commitCallbacks$1 = ReactFiberUpdateQueue.commitCallbacks;
        var onCommitUnmount = ReactFiberDevToolsHook.onCommitUnmount;
        var invokeGuardedCallback$2 = ReactErrorUtils_1.invokeGuardedCallback;
        var hasCaughtError$1 = ReactErrorUtils_1.hasCaughtError;
        var clearCaughtError$1 = ReactErrorUtils_1.clearCaughtError;
        var Placement$5 = ReactTypeOfSideEffect.Placement;
        var Update$3 = ReactTypeOfSideEffect.Update;
        var Callback$1 = ReactTypeOfSideEffect.Callback;
        var ContentReset$2 = ReactTypeOfSideEffect.ContentReset;
        {
          var _require5$1 = ReactDebugFiberPerf_1, startPhaseTimer$2 = _require5$1.startPhaseTimer, stopPhaseTimer$2 = _require5$1.stopPhaseTimer;
        }
        var ReactFiberCommitWork = function(config, captureError) {
          var commitMount = config.commitMount, commitUpdate = config.commitUpdate, resetTextContent = config.resetTextContent, commitTextUpdate = config.commitTextUpdate, appendChild = config.appendChild, appendChildToContainer = config.appendChildToContainer, insertBefore = config.insertBefore, insertInContainerBefore = config.insertInContainerBefore, removeChild = config.removeChild, removeChildFromContainer = config.removeChildFromContainer, getPublicInstance = config.getPublicInstance;
          {
            var callComponentWillUnmountWithTimerInDev = function(current, instance) {
              startPhaseTimer$2(current, "componentWillUnmount");
              instance.props = current.memoizedProps;
              instance.state = current.memoizedState;
              instance.componentWillUnmount();
              stopPhaseTimer$2();
            };
          }
          function safelyCallComponentWillUnmount(current, instance) {
            {
              invokeGuardedCallback$2(null, callComponentWillUnmountWithTimerInDev, null, current, instance);
              if (hasCaughtError$1()) {
                var unmountError = clearCaughtError$1();
                captureError(current, unmountError);
              }
            }
          }
          function safelyDetachRef(current) {
            var ref = current.ref;
            if (ref !== null) {
              {
                invokeGuardedCallback$2(null, ref, null, null);
                if (hasCaughtError$1()) {
                  var refError = clearCaughtError$1();
                  captureError(current, refError);
                }
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber["return"];
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent["return"];
            }
            invariant(false, "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent$9 || fiber.tag === HostRoot$9 || fiber.tag === HostPortal$7;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node["return"] === null || isHostParent(node["return"])) {
                    return null;
                  }
                  node = node["return"];
                }
                node.sibling["return"] = node["return"];
                node = node.sibling;
                while (node.tag !== HostComponent$9 && node.tag !== HostText$7) {
                  if (node.effectTag & Placement$5) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal$7) {
                    continue siblings;
                  } else {
                    node.child["return"] = node;
                    node = node.child;
                  }
                }
                if (!(node.effectTag & Placement$5)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            var parent = void 0;
            var isContainer = void 0;
            switch (parentFiber.tag) {
              case HostComponent$9:
                parent = parentFiber.stateNode;
                isContainer = false;
                break;
              case HostRoot$9:
                parent = parentFiber.stateNode.containerInfo;
                isContainer = true;
                break;
              case HostPortal$7:
                parent = parentFiber.stateNode.containerInfo;
                isContainer = true;
                break;
              default:
                invariant(false, "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (parentFiber.effectTag & ContentReset$2) {
              resetTextContent(parent);
              parentFiber.effectTag &= ~ContentReset$2;
            }
            var before = getHostSibling(finishedWork);
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent$9 || node.tag === HostText$7) {
                if (before) {
                  if (isContainer) {
                    insertInContainerBefore(parent, node.stateNode, before);
                  } else {
                    insertBefore(parent, node.stateNode, before);
                  }
                } else {
                  if (isContainer) {
                    appendChildToContainer(parent, node.stateNode);
                  } else {
                    appendChild(parent, node.stateNode);
                  }
                }
              } else if (node.tag === HostPortal$7) {
              } else if (node.child !== null) {
                node.child["return"] = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node["return"] === null || node["return"] === finishedWork) {
                  return;
                }
                node = node["return"];
              }
              node.sibling["return"] = node["return"];
              node = node.sibling;
            }
          }
          function commitNestedUnmounts(root) {
            var node = root;
            while (true) {
              commitUnmount(node);
              if (node.child !== null && node.tag !== HostPortal$7) {
                node.child["return"] = node;
                node = node.child;
                continue;
              }
              if (node === root) {
                return;
              }
              while (node.sibling === null) {
                if (node["return"] === null || node["return"] === root) {
                  return;
                }
                node = node["return"];
              }
              node.sibling["return"] = node["return"];
              node = node.sibling;
            }
          }
          function unmountHostComponents(current) {
            var node = current;
            var currentParentIsValid = false;
            var currentParent = void 0;
            var currentParentIsContainer = void 0;
            while (true) {
              if (!currentParentIsValid) {
                var parent = node["return"];
                findParent:
                  while (true) {
                    !(parent !== null) ? invariant(false, "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.") : void 0;
                    switch (parent.tag) {
                      case HostComponent$9:
                        currentParent = parent.stateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot$9:
                        currentParent = parent.stateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal$7:
                        currentParent = parent.stateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }
                    parent = parent["return"];
                  }
                currentParentIsValid = true;
              }
              if (node.tag === HostComponent$9 || node.tag === HostText$7) {
                commitNestedUnmounts(node);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node.stateNode);
                } else {
                  removeChild(currentParent, node.stateNode);
                }
              } else if (node.tag === HostPortal$7) {
                currentParent = node.stateNode.containerInfo;
                if (node.child !== null) {
                  node.child["return"] = node;
                  node = node.child;
                  continue;
                }
              } else {
                commitUnmount(node);
                if (node.child !== null) {
                  node.child["return"] = node;
                  node = node.child;
                  continue;
                }
              }
              if (node === current) {
                return;
              }
              while (node.sibling === null) {
                if (node["return"] === null || node["return"] === current) {
                  return;
                }
                node = node["return"];
                if (node.tag === HostPortal$7) {
                  currentParentIsValid = false;
                }
              }
              node.sibling["return"] = node["return"];
              node = node.sibling;
            }
          }
          function commitDeletion(current) {
            unmountHostComponents(current);
            current["return"] = null;
            current.child = null;
            if (current.alternate) {
              current.alternate.child = null;
              current.alternate["return"] = null;
            }
          }
          function commitUnmount(current) {
            if (typeof onCommitUnmount === "function") {
              onCommitUnmount(current);
            }
            switch (current.tag) {
              case ClassComponent$9: {
                safelyDetachRef(current);
                var instance = current.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current, instance);
                }
                return;
              }
              case HostComponent$9: {
                safelyDetachRef(current);
                return;
              }
              case CoroutineComponent$4: {
                commitNestedUnmounts(current.stateNode);
                return;
              }
              case HostPortal$7: {
                unmountHostComponents(current);
                return;
              }
            }
          }
          function commitWork(current, finishedWork) {
            switch (finishedWork.tag) {
              case ClassComponent$9: {
                return;
              }
              case HostComponent$9: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current !== null ? current.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
                  }
                }
                return;
              }
              case HostText$7: {
                !(finishedWork.stateNode !== null) ? invariant(false, "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.") : void 0;
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current !== null ? current.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot$9: {
                return;
              }
              case HostPortal$7: {
                return;
              }
              default: {
                invariant(false, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitLifeCycles(current, finishedWork) {
            switch (finishedWork.tag) {
              case ClassComponent$9: {
                var instance = finishedWork.stateNode;
                if (finishedWork.effectTag & Update$3) {
                  if (current === null) {
                    {
                      startPhaseTimer$2(finishedWork, "componentDidMount");
                    }
                    instance.props = finishedWork.memoizedProps;
                    instance.state = finishedWork.memoizedState;
                    instance.componentDidMount();
                    {
                      stopPhaseTimer$2();
                    }
                  } else {
                    var prevProps = current.memoizedProps;
                    var prevState = current.memoizedState;
                    {
                      startPhaseTimer$2(finishedWork, "componentDidUpdate");
                    }
                    instance.props = finishedWork.memoizedProps;
                    instance.state = finishedWork.memoizedState;
                    instance.componentDidUpdate(prevProps, prevState);
                    {
                      stopPhaseTimer$2();
                    }
                  }
                }
                if (finishedWork.effectTag & Callback$1 && finishedWork.updateQueue !== null) {
                  commitCallbacks$1(finishedWork, finishedWork.updateQueue, instance);
                }
                return;
              }
              case HostRoot$9: {
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  var _instance = finishedWork.child && finishedWork.child.stateNode;
                  commitCallbacks$1(finishedWork, updateQueue, _instance);
                }
                return;
              }
              case HostComponent$9: {
                var _instance2 = finishedWork.stateNode;
                if (current === null && finishedWork.effectTag & Update$3) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props, finishedWork);
                }
                return;
              }
              case HostText$7: {
                return;
              }
              case HostPortal$7: {
                return;
              }
              default: {
                invariant(false, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              switch (finishedWork.tag) {
                case HostComponent$9:
                  ref(getPublicInstance(instance));
                  break;
                default:
                  ref(instance);
              }
            }
          }
          function commitDetachRef(current) {
            var currentRef = current.ref;
            if (currentRef !== null) {
              currentRef(null);
            }
          }
          return {
            commitPlacement,
            commitDeletion,
            commitWork,
            commitLifeCycles,
            commitAttachRef,
            commitDetachRef
          };
        };
        var createCursor$2 = ReactFiberStack.createCursor;
        var pop$2 = ReactFiberStack.pop;
        var push$2 = ReactFiberStack.push;
        var NO_CONTEXT = {};
        var ReactFiberHostContext = function(config) {
          var getChildHostContext = config.getChildHostContext, getRootHostContext = config.getRootHostContext;
          var contextStackCursor2 = createCursor$2(NO_CONTEXT);
          var contextFiberStackCursor = createCursor$2(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor$2(NO_CONTEXT);
          function requiredContext(c) {
            !(c !== NO_CONTEXT) ? invariant(false, "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.") : void 0;
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push$2(rootInstanceStackCursor, nextRootInstance, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            push$2(contextFiberStackCursor, fiber, fiber);
            push$2(contextStackCursor2, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop$2(contextStackCursor2, fiber);
            pop$2(contextFiberStackCursor, fiber);
            pop$2(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor2.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor2.current);
            var nextContext = getChildHostContext(context, fiber.type, rootInstance);
            if (context === nextContext) {
              return;
            }
            push$2(contextFiberStackCursor, fiber, fiber);
            push$2(contextStackCursor2, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop$2(contextStackCursor2, fiber);
            pop$2(contextFiberStackCursor, fiber);
          }
          function resetHostContainer() {
            contextStackCursor2.current = NO_CONTEXT;
            rootInstanceStackCursor.current = NO_CONTEXT;
          }
          return {
            getHostContext,
            getRootHostContainer,
            popHostContainer,
            popHostContext,
            pushHostContainer,
            pushHostContext,
            resetHostContainer
          };
        };
        var HostComponent$10 = ReactTypeOfWork.HostComponent;
        var HostText$8 = ReactTypeOfWork.HostText;
        var HostRoot$10 = ReactTypeOfWork.HostRoot;
        var Deletion$2 = ReactTypeOfSideEffect.Deletion;
        var Placement$6 = ReactTypeOfSideEffect.Placement;
        var createFiberFromHostInstanceForDeletion$1 = ReactFiber.createFiberFromHostInstanceForDeletion;
        var ReactFiberHydrationContext = function(config) {
          var shouldSetTextContent = config.shouldSetTextContent, canHydrateInstance = config.canHydrateInstance, canHydrateTextInstance = config.canHydrateTextInstance, getNextHydratableSibling = config.getNextHydratableSibling, getFirstHydratableChild = config.getFirstHydratableChild, hydrateInstance = config.hydrateInstance, hydrateTextInstance = config.hydrateTextInstance, didNotHydrateInstance = config.didNotHydrateInstance, didNotFindHydratableInstance = config.didNotFindHydratableInstance, didNotFindHydratableTextInstance = config.didNotFindHydratableTextInstance;
          if (!(canHydrateInstance && canHydrateTextInstance && getNextHydratableSibling && getFirstHydratableChild && hydrateInstance && hydrateTextInstance && didNotHydrateInstance && didNotFindHydratableInstance && didNotFindHydratableTextInstance)) {
            return {
              enterHydrationState: function() {
                return false;
              },
              resetHydrationState: function() {
              },
              tryToClaimNextHydratableInstance: function() {
              },
              prepareToHydrateHostInstance: function() {
                invariant(false, "Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
              },
              prepareToHydrateHostTextInstance: function() {
                invariant(false, "Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
              },
              popHydrationState: function(fiber) {
                return false;
              }
            };
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
          }
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot$10:
                  didNotHydrateInstance(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent$10:
                  didNotHydrateInstance(returnFiber.stateNode, instance);
                  break;
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion$1();
            childToDelete.stateNode = instance;
            childToDelete["return"] = returnFiber;
            childToDelete.effectTag = Deletion$2;
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.effectTag |= Placement$6;
            {
              var parentInstance;
              switch (returnFiber.tag) {
                case HostComponent$10:
                  parentInstance = returnFiber.stateNode;
                  break;
                default:
                  return;
              }
              switch (fiber.tag) {
                case HostComponent$10:
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  didNotFindHydratableInstance(parentInstance, type, props);
                  break;
                case HostText$8:
                  var text = fiber.pendingProps;
                  didNotFindHydratableTextInstance(parentInstance, text);
                  break;
              }
            }
          }
          function canHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent$10: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                return canHydrateInstance(nextInstance, type, props);
              }
              case HostText$8: {
                var text = fiber.pendingProps;
                return canHydrateTextInstance(nextInstance, text);
              }
              default:
                return false;
            }
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            if (!canHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(nextInstance);
              if (!nextInstance || !canHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
            }
            fiber.stateNode = nextInstance;
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var shouldUpdate = hydrateTextInstance(textInstance, fiber.memoizedProps, fiber);
            return shouldUpdate;
          }
          function popToNextHostParent(fiber) {
            var parent = fiber["return"];
            while (parent !== null && parent.tag !== HostComponent$10 && parent.tag !== HostRoot$10) {
              parent = parent["return"];
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            var type = fiber.type;
            if (fiber.tag !== HostComponent$10 || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
              var nextInstance = nextHydratableInstance;
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
            popToNextHostParent(fiber);
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            return true;
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
          }
          return {
            enterHydrationState,
            resetHydrationState,
            tryToClaimNextHydratableInstance,
            prepareToHydrateHostInstance,
            prepareToHydrateHostTextInstance,
            popHydrationState
          };
        };
        var ReactFiberInstrumentation$2 = {
          debugTool: null
        };
        var ReactFiberInstrumentation_1 = ReactFiberInstrumentation$2;
        var popContextProvider$1 = ReactFiberContext.popContextProvider;
        var reset$1 = ReactFiberStack.reset;
        var getStackAddendumByWorkInProgressFiber$2 = ReactFiberComponentTreeHook.getStackAddendumByWorkInProgressFiber;
        var logCapturedError = ReactFiberErrorLogger.logCapturedError;
        var invokeGuardedCallback$1 = ReactErrorUtils_1.invokeGuardedCallback;
        var hasCaughtError = ReactErrorUtils_1.hasCaughtError;
        var clearCaughtError = ReactErrorUtils_1.clearCaughtError;
        var ReactCurrentOwner$1 = ReactGlobalSharedState_1.ReactCurrentOwner;
        var createWorkInProgress$1 = ReactFiber.createWorkInProgress;
        var largerPriority$1 = ReactFiber.largerPriority;
        var onCommitRoot = ReactFiberDevToolsHook.onCommitRoot;
        var NoWork$2 = ReactPriorityLevel.NoWork;
        var SynchronousPriority$1 = ReactPriorityLevel.SynchronousPriority;
        var TaskPriority$1 = ReactPriorityLevel.TaskPriority;
        var HighPriority = ReactPriorityLevel.HighPriority;
        var LowPriority = ReactPriorityLevel.LowPriority;
        var OffscreenPriority = ReactPriorityLevel.OffscreenPriority;
        var AsyncUpdates = ReactTypeOfInternalContext.AsyncUpdates;
        var PerformedWork = ReactTypeOfSideEffect.PerformedWork;
        var Placement$1 = ReactTypeOfSideEffect.Placement;
        var Update = ReactTypeOfSideEffect.Update;
        var PlacementAndUpdate = ReactTypeOfSideEffect.PlacementAndUpdate;
        var Deletion = ReactTypeOfSideEffect.Deletion;
        var ContentReset = ReactTypeOfSideEffect.ContentReset;
        var Callback = ReactTypeOfSideEffect.Callback;
        var Err = ReactTypeOfSideEffect.Err;
        var Ref = ReactTypeOfSideEffect.Ref;
        var HostRoot$6 = ReactTypeOfWork.HostRoot;
        var HostComponent$6 = ReactTypeOfWork.HostComponent;
        var HostPortal$3 = ReactTypeOfWork.HostPortal;
        var ClassComponent$5 = ReactTypeOfWork.ClassComponent;
        var getUpdatePriority$1 = ReactFiberUpdateQueue.getUpdatePriority;
        var _require14 = ReactFiberContext;
        var resetContext$1 = _require14.resetContext;
        {
          var warning$22 = require$$0;
          var ReactFiberInstrumentation$1 = ReactFiberInstrumentation_1;
          var ReactDebugCurrentFiber$3 = ReactDebugCurrentFiber_1;
          var _require15 = ReactDebugFiberPerf_1, recordEffect = _require15.recordEffect, recordScheduleUpdate = _require15.recordScheduleUpdate, startWorkTimer = _require15.startWorkTimer, stopWorkTimer = _require15.stopWorkTimer, stopFailedWorkTimer = _require15.stopFailedWorkTimer, startWorkLoopTimer = _require15.startWorkLoopTimer, stopWorkLoopTimer = _require15.stopWorkLoopTimer, startCommitTimer = _require15.startCommitTimer, stopCommitTimer = _require15.stopCommitTimer, startCommitHostEffectsTimer = _require15.startCommitHostEffectsTimer, stopCommitHostEffectsTimer = _require15.stopCommitHostEffectsTimer, startCommitLifeCyclesTimer = _require15.startCommitLifeCyclesTimer, stopCommitLifeCyclesTimer = _require15.stopCommitLifeCyclesTimer;
          var warnAboutUpdateOnUnmounted = function(instance) {
            var ctor = instance.constructor;
            warning$22(false, "Can only update a mounted or mounting component. This usually means you called setState, replaceState, or forceUpdate on an unmounted component. This is a no-op.\n\nPlease check the code for the %s component.", ctor && (ctor.displayName || ctor.name) || "ReactClass");
          };
          var warnAboutInvalidUpdates = function(instance) {
            switch (ReactDebugCurrentFiber$3.phase) {
              case "getChildContext":
                warning$22(false, "setState(...): Cannot call setState() inside getChildContext()");
                break;
              case "render":
                warning$22(false, "Cannot update during an existing state transition (such as within `render` or another component's constructor). Render methods should be a pure function of props and state; constructor side-effects are an anti-pattern, but can be moved to `componentWillMount`.");
                break;
            }
          };
        }
        var timeHeuristicForUnitOfWork = 1;
        var ReactFiberScheduler = function(config) {
          var hostContext = ReactFiberHostContext(config);
          var hydrationContext = ReactFiberHydrationContext(config);
          var popHostContainer = hostContext.popHostContainer, popHostContext = hostContext.popHostContext, resetHostContainer = hostContext.resetHostContainer;
          var _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleUpdate, getPriorityContext), beginWork = _ReactFiberBeginWork.beginWork, beginFailedWork = _ReactFiberBeginWork.beginFailedWork;
          var _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, hydrationContext), completeWork = _ReactFiberCompleteWo.completeWork;
          var _ReactFiberCommitWork = ReactFiberCommitWork(config, captureError), commitPlacement = _ReactFiberCommitWork.commitPlacement, commitDeletion = _ReactFiberCommitWork.commitDeletion, commitWork = _ReactFiberCommitWork.commitWork, commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles, commitAttachRef = _ReactFiberCommitWork.commitAttachRef, commitDetachRef = _ReactFiberCommitWork.commitDetachRef;
          var scheduleDeferredCallback = config.scheduleDeferredCallback, useSyncScheduling = config.useSyncScheduling, prepareForCommit = config.prepareForCommit, resetAfterCommit = config.resetAfterCommit;
          var priorityContext = NoWork$2;
          var isPerformingWork = false;
          var deadlineHasExpired = false;
          var isBatchingUpdates = false;
          var isUnbatchingUpdates = false;
          var nextUnitOfWork = null;
          var nextPriorityLevel = NoWork$2;
          var nextEffect = null;
          var pendingCommit = null;
          var nextScheduledRoot = null;
          var lastScheduledRoot = null;
          var isCallbackScheduled = false;
          var capturedErrors = null;
          var failedBoundaries = null;
          var commitPhaseBoundaries = null;
          var firstUncaughtError = null;
          var didFatal = false;
          var isCommitting2 = false;
          var isUnmounting = false;
          var NESTED_UPDATE_LIMIT = 1e3;
          var nestedUpdateCount = 0;
          var nextRenderedTree = null;
          function resetContextStack() {
            reset$1();
            resetContext$1();
            resetHostContainer();
          }
          function resetNextUnitOfWork() {
            while (nextScheduledRoot !== null && nextScheduledRoot.current.pendingWorkPriority === NoWork$2) {
              nextScheduledRoot.isScheduled = false;
              var next = nextScheduledRoot.nextScheduledRoot;
              nextScheduledRoot.nextScheduledRoot = null;
              if (nextScheduledRoot === lastScheduledRoot) {
                nextScheduledRoot = null;
                lastScheduledRoot = null;
                nextPriorityLevel = NoWork$2;
                return null;
              }
              nextScheduledRoot = next;
            }
            var root = nextScheduledRoot;
            var highestPriorityRoot = null;
            var highestPriorityLevel = NoWork$2;
            while (root !== null) {
              if (root.current.pendingWorkPriority !== NoWork$2 && (highestPriorityLevel === NoWork$2 || highestPriorityLevel > root.current.pendingWorkPriority)) {
                highestPriorityLevel = root.current.pendingWorkPriority;
                highestPriorityRoot = root;
              }
              root = root.nextScheduledRoot;
            }
            if (highestPriorityRoot !== null) {
              nextPriorityLevel = highestPriorityLevel;
              resetContextStack();
              nextUnitOfWork = createWorkInProgress$1(highestPriorityRoot.current, highestPriorityLevel);
              if (highestPriorityRoot !== nextRenderedTree) {
                nestedUpdateCount = 0;
                nextRenderedTree = highestPriorityRoot;
              }
              return;
            }
            nextPriorityLevel = NoWork$2;
            nextUnitOfWork = null;
            nextRenderedTree = null;
            return;
          }
          function commitAllHostEffects() {
            while (nextEffect !== null) {
              {
                ReactDebugCurrentFiber$3.setCurrentFiber(nextEffect, null);
                recordEffect();
              }
              var effectTag = nextEffect.effectTag;
              if (effectTag & ContentReset) {
                config.resetTextContent(nextEffect.stateNode);
              }
              if (effectTag & Ref) {
                var current = nextEffect.alternate;
                if (current !== null) {
                  commitDetachRef(current);
                }
              }
              var primaryEffectTag = effectTag & ~(Callback | Err | ContentReset | Ref | PerformedWork);
              switch (primaryEffectTag) {
                case Placement$1: {
                  commitPlacement(nextEffect);
                  nextEffect.effectTag &= ~Placement$1;
                  break;
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect);
                  nextEffect.effectTag &= ~Placement$1;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
                case Update: {
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
                case Deletion: {
                  isUnmounting = true;
                  commitDeletion(nextEffect);
                  isUnmounting = false;
                  break;
                }
              }
              nextEffect = nextEffect.nextEffect;
            }
            {
              ReactDebugCurrentFiber$3.resetCurrentFiber();
            }
          }
          function commitAllLifeCycles() {
            while (nextEffect !== null) {
              var effectTag = nextEffect.effectTag;
              if (effectTag & (Update | Callback)) {
                {
                  recordEffect();
                }
                var current = nextEffect.alternate;
                commitLifeCycles(current, nextEffect);
              }
              if (effectTag & Ref) {
                {
                  recordEffect();
                }
                commitAttachRef(nextEffect);
              }
              if (effectTag & Err) {
                {
                  recordEffect();
                }
                commitErrorHandling(nextEffect);
              }
              var next = nextEffect.nextEffect;
              nextEffect.nextEffect = null;
              nextEffect = next;
            }
          }
          function commitAllWork(finishedWork) {
            isCommitting2 = true;
            {
              startCommitTimer();
            }
            pendingCommit = null;
            var root = finishedWork.stateNode;
            !(root.current !== finishedWork) ? invariant(false, "Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.") : void 0;
            if (nextPriorityLevel === SynchronousPriority$1 || nextPriorityLevel === TaskPriority$1) {
              nestedUpdateCount++;
            }
            ReactCurrentOwner$1.current = null;
            var firstEffect = void 0;
            if (finishedWork.effectTag > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
              } else {
                firstEffect = finishedWork;
              }
            } else {
              firstEffect = finishedWork.firstEffect;
            }
            prepareForCommit();
            nextEffect = firstEffect;
            {
              startCommitHostEffectsTimer();
            }
            while (nextEffect !== null) {
              var didError = false;
              var _error = void 0;
              {
                invokeGuardedCallback$1(null, commitAllHostEffects, null);
                if (hasCaughtError()) {
                  didError = true;
                  _error = clearCaughtError();
                }
              }
              if (didError) {
                !(nextEffect !== null) ? invariant(false, "Should have next effect. This error is likely caused by a bug in React. Please file an issue.") : void 0;
                captureError(nextEffect, _error);
                if (nextEffect !== null) {
                  nextEffect = nextEffect.nextEffect;
                }
              }
            }
            {
              stopCommitHostEffectsTimer();
            }
            resetAfterCommit();
            root.current = finishedWork;
            nextEffect = firstEffect;
            {
              startCommitLifeCyclesTimer();
            }
            while (nextEffect !== null) {
              var _didError = false;
              var _error2 = void 0;
              {
                invokeGuardedCallback$1(null, commitAllLifeCycles, null);
                if (hasCaughtError()) {
                  _didError = true;
                  _error2 = clearCaughtError();
                }
              }
              if (_didError) {
                !(nextEffect !== null) ? invariant(false, "Should have next effect. This error is likely caused by a bug in React. Please file an issue.") : void 0;
                captureError(nextEffect, _error2);
                if (nextEffect !== null) {
                  nextEffect = nextEffect.nextEffect;
                }
              }
            }
            isCommitting2 = false;
            {
              stopCommitLifeCyclesTimer();
              stopCommitTimer();
            }
            if (typeof onCommitRoot === "function") {
              onCommitRoot(finishedWork.stateNode);
            }
            if (ReactFiberInstrumentation$1.debugTool) {
              ReactFiberInstrumentation$1.debugTool.onCommitWork(finishedWork);
            }
            if (commitPhaseBoundaries) {
              commitPhaseBoundaries.forEach(scheduleErrorRecovery);
              commitPhaseBoundaries = null;
            }
            resetNextUnitOfWork();
          }
          function resetWorkPriority(workInProgress, renderPriority) {
            if (workInProgress.pendingWorkPriority !== NoWork$2 && workInProgress.pendingWorkPriority > renderPriority) {
              return;
            }
            var newPriority = getUpdatePriority$1(workInProgress);
            var child = workInProgress.child;
            while (child !== null) {
              newPriority = largerPriority$1(newPriority, child.pendingWorkPriority);
              child = child.sibling;
            }
            workInProgress.pendingWorkPriority = newPriority;
          }
          function completeUnitOfWork(workInProgress) {
            while (true) {
              var current = workInProgress.alternate;
              var next = completeWork(current, workInProgress, nextPriorityLevel);
              var returnFiber = workInProgress["return"];
              var siblingFiber = workInProgress.sibling;
              resetWorkPriority(workInProgress, nextPriorityLevel);
              if (next !== null) {
                {
                  stopWorkTimer(workInProgress);
                }
                if (ReactFiberInstrumentation$1.debugTool) {
                  ReactFiberInstrumentation$1.debugTool.onCompleteWork(workInProgress);
                }
                return next;
              }
              if (returnFiber !== null) {
                if (returnFiber.firstEffect === null) {
                  returnFiber.firstEffect = workInProgress.firstEffect;
                }
                if (workInProgress.lastEffect !== null) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                  }
                  returnFiber.lastEffect = workInProgress.lastEffect;
                }
                var effectTag = workInProgress.effectTag;
                if (effectTag > PerformedWork) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress;
                  } else {
                    returnFiber.firstEffect = workInProgress;
                  }
                  returnFiber.lastEffect = workInProgress;
                }
              }
              {
                stopWorkTimer(workInProgress);
              }
              if (ReactFiberInstrumentation$1.debugTool) {
                ReactFiberInstrumentation$1.debugTool.onCompleteWork(workInProgress);
              }
              if (siblingFiber !== null) {
                return siblingFiber;
              } else if (returnFiber !== null) {
                workInProgress = returnFiber;
                continue;
              } else {
                pendingCommit = workInProgress;
                return null;
              }
            }
            return null;
          }
          function performUnitOfWork(workInProgress) {
            var current = workInProgress.alternate;
            {
              startWorkTimer(workInProgress);
            }
            var next = beginWork(current, workInProgress, nextPriorityLevel);
            if (ReactFiberInstrumentation$1.debugTool) {
              ReactFiberInstrumentation$1.debugTool.onBeginWork(workInProgress);
            }
            if (next === null) {
              next = completeUnitOfWork(workInProgress);
            }
            ReactCurrentOwner$1.current = null;
            {
              ReactDebugCurrentFiber$3.resetCurrentFiber();
            }
            return next;
          }
          function performFailedUnitOfWork(workInProgress) {
            var current = workInProgress.alternate;
            {
              startWorkTimer(workInProgress);
            }
            var next = beginFailedWork(current, workInProgress, nextPriorityLevel);
            if (ReactFiberInstrumentation$1.debugTool) {
              ReactFiberInstrumentation$1.debugTool.onBeginWork(workInProgress);
            }
            if (next === null) {
              next = completeUnitOfWork(workInProgress);
            }
            ReactCurrentOwner$1.current = null;
            {
              ReactDebugCurrentFiber$3.resetCurrentFiber();
            }
            return next;
          }
          function performDeferredWork(deadline) {
            performWork(OffscreenPriority, deadline);
          }
          function handleCommitPhaseErrors() {
            if (capturedErrors !== null && capturedErrors.size > 0 && nextPriorityLevel === TaskPriority$1) {
              while (nextUnitOfWork !== null) {
                if (hasCapturedError(nextUnitOfWork)) {
                  nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
                } else {
                  nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
                }
                if (nextUnitOfWork === null) {
                  !(pendingCommit !== null) ? invariant(false, "Should have a pending commit. This error is likely caused by a bug in React. Please file an issue.") : void 0;
                  priorityContext = TaskPriority$1;
                  commitAllWork(pendingCommit);
                  priorityContext = nextPriorityLevel;
                  if (capturedErrors === null || capturedErrors.size === 0 || nextPriorityLevel !== TaskPriority$1) {
                    break;
                  }
                }
              }
            }
          }
          function workLoop(minPriorityLevel, deadline) {
            if (pendingCommit !== null) {
              priorityContext = TaskPriority$1;
              commitAllWork(pendingCommit);
              handleCommitPhaseErrors();
            } else if (nextUnitOfWork === null) {
              resetNextUnitOfWork();
            }
            if (nextPriorityLevel === NoWork$2 || nextPriorityLevel > minPriorityLevel) {
              return;
            }
            priorityContext = nextPriorityLevel;
            loop:
              do {
                if (nextPriorityLevel <= TaskPriority$1) {
                  while (nextUnitOfWork !== null) {
                    nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
                    if (nextUnitOfWork === null) {
                      !(pendingCommit !== null) ? invariant(false, "Should have a pending commit. This error is likely caused by a bug in React. Please file an issue.") : void 0;
                      priorityContext = TaskPriority$1;
                      commitAllWork(pendingCommit);
                      priorityContext = nextPriorityLevel;
                      handleCommitPhaseErrors();
                      if (nextPriorityLevel === NoWork$2 || nextPriorityLevel > minPriorityLevel || nextPriorityLevel > TaskPriority$1) {
                        break;
                      }
                    }
                  }
                } else if (deadline !== null) {
                  while (nextUnitOfWork !== null && !deadlineHasExpired) {
                    if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
                      nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
                      if (nextUnitOfWork === null) {
                        !(pendingCommit !== null) ? invariant(false, "Should have a pending commit. This error is likely caused by a bug in React. Please file an issue.") : void 0;
                        if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
                          priorityContext = TaskPriority$1;
                          commitAllWork(pendingCommit);
                          priorityContext = nextPriorityLevel;
                          handleCommitPhaseErrors();
                          if (nextPriorityLevel === NoWork$2 || nextPriorityLevel > minPriorityLevel || nextPriorityLevel < HighPriority) {
                            break;
                          }
                        } else {
                          deadlineHasExpired = true;
                        }
                      }
                    } else {
                      deadlineHasExpired = true;
                    }
                  }
                }
                switch (nextPriorityLevel) {
                  case SynchronousPriority$1:
                  case TaskPriority$1:
                    if (nextPriorityLevel <= minPriorityLevel) {
                      continue loop;
                    }
                    break loop;
                  case HighPriority:
                  case LowPriority:
                  case OffscreenPriority:
                    if (deadline === null) {
                      break loop;
                    }
                    if (!deadlineHasExpired && nextPriorityLevel <= minPriorityLevel) {
                      continue loop;
                    }
                    break loop;
                  case NoWork$2:
                    break loop;
                  default:
                    invariant(false, "Switch statement should be exhuastive. This error is likely caused by a bug in React. Please file an issue.");
                }
              } while (true);
          }
          function performWorkCatchBlock(failedWork, boundary, minPriorityLevel, deadline) {
            unwindContexts(failedWork, boundary);
            nextUnitOfWork = performFailedUnitOfWork(boundary);
            workLoop(minPriorityLevel, deadline);
          }
          function performWork(minPriorityLevel, deadline) {
            {
              startWorkLoopTimer();
            }
            !!isPerformingWork ? invariant(false, "performWork was called recursively. This error is likely caused by a bug in React. Please file an issue.") : void 0;
            isPerformingWork = true;
            var previousPriorityContext = priorityContext;
            var didError = false;
            var error = null;
            {
              invokeGuardedCallback$1(null, workLoop, null, minPriorityLevel, deadline);
              if (hasCaughtError()) {
                didError = true;
                error = clearCaughtError();
              }
            }
            while (didError) {
              if (didFatal) {
                firstUncaughtError = error;
                break;
              }
              var failedWork = nextUnitOfWork;
              if (failedWork === null) {
                didFatal = true;
                continue;
              }
              var boundary = captureError(failedWork, error);
              !(boundary !== null) ? invariant(false, "Should have found an error boundary. This error is likely caused by a bug in React. Please file an issue.") : void 0;
              if (didFatal) {
                continue;
              }
              didError = false;
              error = null;
              {
                invokeGuardedCallback$1(null, performWorkCatchBlock, null, failedWork, boundary, minPriorityLevel, deadline);
                if (hasCaughtError()) {
                  didError = true;
                  error = clearCaughtError();
                  continue;
                }
              }
              break;
            }
            priorityContext = previousPriorityContext;
            if (deadline !== null) {
              isCallbackScheduled = false;
            }
            if (nextPriorityLevel > TaskPriority$1 && !isCallbackScheduled) {
              scheduleDeferredCallback(performDeferredWork);
              isCallbackScheduled = true;
            }
            var errorToThrow = firstUncaughtError;
            isPerformingWork = false;
            deadlineHasExpired = false;
            didFatal = false;
            firstUncaughtError = null;
            capturedErrors = null;
            failedBoundaries = null;
            nextRenderedTree = null;
            nestedUpdateCount = 0;
            {
              stopWorkLoopTimer();
            }
            if (errorToThrow !== null) {
              throw errorToThrow;
            }
          }
          function captureError(failedWork, error) {
            ReactCurrentOwner$1.current = null;
            {
              ReactDebugCurrentFiber$3.resetCurrentFiber();
            }
            var boundary = null;
            var errorBoundaryFound = false;
            var willRetry = false;
            var errorBoundaryName = null;
            if (failedWork.tag === HostRoot$6) {
              boundary = failedWork;
              if (isFailedBoundary(failedWork)) {
                didFatal = true;
              }
            } else {
              var node = failedWork["return"];
              while (node !== null && boundary === null) {
                if (node.tag === ClassComponent$5) {
                  var instance = node.stateNode;
                  if (typeof instance.componentDidCatch === "function") {
                    errorBoundaryFound = true;
                    errorBoundaryName = getComponentName_1(node);
                    boundary = node;
                    willRetry = true;
                  }
                } else if (node.tag === HostRoot$6) {
                  boundary = node;
                }
                if (isFailedBoundary(node)) {
                  if (isUnmounting) {
                    return null;
                  }
                  if (commitPhaseBoundaries !== null && (commitPhaseBoundaries.has(node) || node.alternate !== null && commitPhaseBoundaries.has(node.alternate))) {
                    return null;
                  }
                  boundary = null;
                  willRetry = false;
                }
                node = node["return"];
              }
            }
            if (boundary !== null) {
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new Set();
              }
              failedBoundaries.add(boundary);
              var _componentStack = getStackAddendumByWorkInProgressFiber$2(failedWork);
              var _componentName = getComponentName_1(failedWork);
              if (capturedErrors === null) {
                capturedErrors = /* @__PURE__ */ new Map();
              }
              var capturedError = {
                componentName: _componentName,
                componentStack: _componentStack,
                error,
                errorBoundary: errorBoundaryFound ? boundary.stateNode : null,
                errorBoundaryFound,
                errorBoundaryName,
                willRetry
              };
              capturedErrors.set(boundary, capturedError);
              try {
                logCapturedError(capturedError);
              } catch (e) {
                console.error(e);
              }
              if (isCommitting2) {
                if (commitPhaseBoundaries === null) {
                  commitPhaseBoundaries = /* @__PURE__ */ new Set();
                }
                commitPhaseBoundaries.add(boundary);
              } else {
                scheduleErrorRecovery(boundary);
              }
              return boundary;
            } else if (firstUncaughtError === null) {
              firstUncaughtError = error;
            }
            return null;
          }
          function hasCapturedError(fiber) {
            return capturedErrors !== null && (capturedErrors.has(fiber) || fiber.alternate !== null && capturedErrors.has(fiber.alternate));
          }
          function isFailedBoundary(fiber) {
            return failedBoundaries !== null && (failedBoundaries.has(fiber) || fiber.alternate !== null && failedBoundaries.has(fiber.alternate));
          }
          function commitErrorHandling(effectfulFiber) {
            var capturedError = void 0;
            if (capturedErrors !== null) {
              capturedError = capturedErrors.get(effectfulFiber);
              capturedErrors["delete"](effectfulFiber);
              if (capturedError == null) {
                if (effectfulFiber.alternate !== null) {
                  effectfulFiber = effectfulFiber.alternate;
                  capturedError = capturedErrors.get(effectfulFiber);
                  capturedErrors["delete"](effectfulFiber);
                }
              }
            }
            !(capturedError != null) ? invariant(false, "No error for given unit of work. This error is likely caused by a bug in React. Please file an issue.") : void 0;
            switch (effectfulFiber.tag) {
              case ClassComponent$5:
                var instance = effectfulFiber.stateNode;
                var info = {
                  componentStack: capturedError.componentStack
                };
                instance.componentDidCatch(capturedError.error, info);
                return;
              case HostRoot$6:
                if (firstUncaughtError === null) {
                  firstUncaughtError = capturedError.error;
                }
                return;
              default:
                invariant(false, "Invalid type of work. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function unwindContexts(from, to) {
            var node = from;
            while (node !== null) {
              switch (node.tag) {
                case ClassComponent$5:
                  popContextProvider$1(node);
                  break;
                case HostComponent$6:
                  popHostContext(node);
                  break;
                case HostRoot$6:
                  popHostContainer(node);
                  break;
                case HostPortal$3:
                  popHostContainer(node);
                  break;
              }
              if (node === to || node.alternate === to) {
                {
                  stopFailedWorkTimer(node);
                }
                break;
              } else {
                stopWorkTimer(node);
              }
              node = node["return"];
            }
          }
          function scheduleRoot(root, priorityLevel) {
            if (priorityLevel === NoWork$2) {
              return;
            }
            if (!root.isScheduled) {
              root.isScheduled = true;
              if (lastScheduledRoot) {
                lastScheduledRoot.nextScheduledRoot = root;
                lastScheduledRoot = root;
              } else {
                nextScheduledRoot = root;
                lastScheduledRoot = root;
              }
            }
          }
          function scheduleUpdate(fiber, priorityLevel) {
            return scheduleUpdateImpl(fiber, priorityLevel, false);
          }
          function scheduleUpdateImpl(fiber, priorityLevel, isErrorRecovery) {
            {
              recordScheduleUpdate();
            }
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              didFatal = true;
              invariant(false, "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            if (!isPerformingWork && priorityLevel <= nextPriorityLevel) {
              nextUnitOfWork = null;
            }
            {
              if (!isErrorRecovery && fiber.tag === ClassComponent$5) {
                var instance = fiber.stateNode;
                warnAboutInvalidUpdates(instance);
              }
            }
            var node = fiber;
            var shouldContinue = true;
            while (node !== null && shouldContinue) {
              shouldContinue = false;
              if (node.pendingWorkPriority === NoWork$2 || node.pendingWorkPriority > priorityLevel) {
                shouldContinue = true;
                node.pendingWorkPriority = priorityLevel;
              }
              if (node.alternate !== null) {
                if (node.alternate.pendingWorkPriority === NoWork$2 || node.alternate.pendingWorkPriority > priorityLevel) {
                  shouldContinue = true;
                  node.alternate.pendingWorkPriority = priorityLevel;
                }
              }
              if (node["return"] === null) {
                if (node.tag === HostRoot$6) {
                  var root = node.stateNode;
                  scheduleRoot(root, priorityLevel);
                  if (!isPerformingWork) {
                    switch (priorityLevel) {
                      case SynchronousPriority$1:
                        if (isUnbatchingUpdates) {
                          performWork(SynchronousPriority$1, null);
                        } else {
                          performWork(TaskPriority$1, null);
                        }
                        break;
                      case TaskPriority$1:
                        !isBatchingUpdates ? invariant(false, "Task updates can only be scheduled as a nested update or inside batchedUpdates.") : void 0;
                        break;
                      default:
                        if (!isCallbackScheduled) {
                          scheduleDeferredCallback(performDeferredWork);
                          isCallbackScheduled = true;
                        }
                    }
                  }
                } else {
                  {
                    if (!isErrorRecovery && fiber.tag === ClassComponent$5) {
                      warnAboutUpdateOnUnmounted(fiber.stateNode);
                    }
                  }
                  return;
                }
              }
              node = node["return"];
            }
          }
          function getPriorityContext(fiber, forceAsync) {
            var priorityLevel = priorityContext;
            if (priorityLevel === NoWork$2) {
              if (!useSyncScheduling || fiber.internalContextTag & AsyncUpdates || forceAsync) {
                priorityLevel = LowPriority;
              } else {
                priorityLevel = SynchronousPriority$1;
              }
            }
            if (priorityLevel === SynchronousPriority$1 && (isPerformingWork || isBatchingUpdates)) {
              return TaskPriority$1;
            }
            return priorityLevel;
          }
          function scheduleErrorRecovery(fiber) {
            scheduleUpdateImpl(fiber, TaskPriority$1, true);
          }
          function batchedUpdates2(fn, a) {
            var previousIsBatchingUpdates = isBatchingUpdates;
            isBatchingUpdates = true;
            try {
              return fn(a);
            } finally {
              isBatchingUpdates = previousIsBatchingUpdates;
              if (!isPerformingWork && !isBatchingUpdates) {
                performWork(TaskPriority$1, null);
              }
            }
          }
          function unbatchedUpdates(fn) {
            var previousIsUnbatchingUpdates = isUnbatchingUpdates;
            var previousIsBatchingUpdates = isBatchingUpdates;
            isUnbatchingUpdates = isBatchingUpdates;
            isBatchingUpdates = false;
            try {
              return fn();
            } finally {
              isBatchingUpdates = previousIsBatchingUpdates;
              isUnbatchingUpdates = previousIsUnbatchingUpdates;
            }
          }
          function flushSync(batch) {
            var previousIsBatchingUpdates = isBatchingUpdates;
            var previousPriorityContext = priorityContext;
            isBatchingUpdates = true;
            priorityContext = SynchronousPriority$1;
            try {
              return batch();
            } finally {
              isBatchingUpdates = previousIsBatchingUpdates;
              priorityContext = previousPriorityContext;
              !!isPerformingWork ? invariant(false, "flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.") : void 0;
              performWork(TaskPriority$1, null);
            }
          }
          function deferredUpdates(fn) {
            var previousPriorityContext = priorityContext;
            priorityContext = LowPriority;
            try {
              return fn();
            } finally {
              priorityContext = previousPriorityContext;
            }
          }
          return {
            scheduleUpdate,
            getPriorityContext,
            batchedUpdates: batchedUpdates2,
            unbatchedUpdates,
            flushSync,
            deferredUpdates
          };
        };
        var getContextFiber = function(arg) {
          invariant(false, "Missing injection for fiber getContextForSubtree");
        };
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyObject;
          }
          var instance = ReactInstanceMap_1.get(parentComponent);
          if (typeof instance.tag === "number") {
            return getContextFiber(instance);
          } else {
            return instance._processChildContext(instance._context);
          }
        }
        getContextForSubtree._injectFiber = function(fn) {
          getContextFiber = fn;
        };
        var getContextForSubtree_1 = getContextForSubtree;
        var addTopLevelUpdate = ReactFiberUpdateQueue.addTopLevelUpdate;
        var findCurrentUnmaskedContext = ReactFiberContext.findCurrentUnmaskedContext;
        var isContextProvider = ReactFiberContext.isContextProvider;
        var processChildContext = ReactFiberContext.processChildContext;
        var createFiberRoot = ReactFiberRoot.createFiberRoot;
        var HostComponent$3 = ReactTypeOfWork.HostComponent;
        {
          var warning$18 = require$$0;
          var ReactFiberInstrumentation = ReactFiberInstrumentation_1;
          var ReactDebugCurrentFiber$1 = ReactDebugCurrentFiber_1;
          var getComponentName$4 = getComponentName_1;
        }
        var findCurrentHostFiber$1 = ReactFiberTreeReflection.findCurrentHostFiber;
        var findCurrentHostFiberWithNoPortals$1 = ReactFiberTreeReflection.findCurrentHostFiberWithNoPortals;
        getContextForSubtree_1._injectFiber(function(fiber) {
          var parentContext = findCurrentUnmaskedContext(fiber);
          return isContextProvider(fiber) ? processChildContext(fiber, parentContext, false) : parentContext;
        });
        var ReactFiberReconciler = function(config) {
          var getPublicInstance = config.getPublicInstance;
          var _ReactFiberScheduler = ReactFiberScheduler(config), scheduleUpdate = _ReactFiberScheduler.scheduleUpdate, getPriorityContext = _ReactFiberScheduler.getPriorityContext, batchedUpdates2 = _ReactFiberScheduler.batchedUpdates, unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates, flushSync = _ReactFiberScheduler.flushSync, deferredUpdates = _ReactFiberScheduler.deferredUpdates;
          function scheduleTopLevelUpdate(current, element, callback) {
            {
              if (ReactDebugCurrentFiber$1.phase === "render" && ReactDebugCurrentFiber$1.current !== null) {
                warning$18(false, "Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName$4(ReactDebugCurrentFiber$1.current) || "Unknown");
              }
            }
            var forceAsync = ReactFeatureFlags_1.enableAsyncSubtreeAPI && element != null && element.type != null && element.type.prototype != null && element.type.prototype.unstable_isAsyncReactComponent === true;
            var priorityLevel = getPriorityContext(current, forceAsync);
            var nextState = { element };
            callback = callback === void 0 ? null : callback;
            {
              warning$18(callback === null || typeof callback === "function", "render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            }
            addTopLevelUpdate(current, nextState, callback, priorityLevel);
            scheduleUpdate(current, priorityLevel);
          }
          return {
            createContainer: function(containerInfo) {
              return createFiberRoot(containerInfo);
            },
            updateContainer: function(element, container, parentComponent, callback) {
              var current = container.current;
              {
                if (ReactFiberInstrumentation.debugTool) {
                  if (current.alternate === null) {
                    ReactFiberInstrumentation.debugTool.onMountContainer(container);
                  } else if (element === null) {
                    ReactFiberInstrumentation.debugTool.onUnmountContainer(container);
                  } else {
                    ReactFiberInstrumentation.debugTool.onUpdateContainer(container);
                  }
                }
              }
              var context = getContextForSubtree_1(parentComponent);
              if (container.context === null) {
                container.context = context;
              } else {
                container.pendingContext = context;
              }
              scheduleTopLevelUpdate(current, element, callback);
            },
            batchedUpdates: batchedUpdates2,
            unbatchedUpdates,
            deferredUpdates,
            flushSync,
            getPublicRootInstance: function(container) {
              var containerFiber = container.current;
              if (!containerFiber.child) {
                return null;
              }
              switch (containerFiber.child.tag) {
                case HostComponent$3:
                  return getPublicInstance(containerFiber.child.stateNode);
                default:
                  return containerFiber.child.stateNode;
              }
            },
            findHostInstance: function(fiber) {
              var hostFiber = findCurrentHostFiber$1(fiber);
              if (hostFiber === null) {
                return null;
              }
              return hostFiber.stateNode;
            },
            findHostInstanceWithNoPortals: function(fiber) {
              var hostFiber = findCurrentHostFiberWithNoPortals$1(fiber);
              if (hostFiber === null) {
                return null;
              }
              return hostFiber.stateNode;
            }
          };
        };
        var TEXT_NODE$3 = HTMLNodeType_1.TEXT_NODE;
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root, offset) {
          var node = getLeafNode(root);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE$3) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        var getNodeForCharacterOffset_1 = getNodeForCharacterOffset;
        var contentKey = null;
        function getTextContentAccessor() {
          if (!contentKey && ExecutionEnvironment.canUseDOM) {
            contentKey = "textContent" in document.documentElement ? "textContent" : "innerText";
          }
          return contentKey;
        }
        var getTextContentAccessor_1 = getTextContentAccessor;
        function isCollapsed(anchorNode, anchorOffset, focusNode$$1, focusOffset) {
          return anchorNode === focusNode$$1 && anchorOffset === focusOffset;
        }
        function getModernOffsets(node) {
          var selection = window.getSelection && window.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode;
          var anchorOffset = selection.anchorOffset;
          var focusNode$$1 = selection.focusNode;
          var focusOffset = selection.focusOffset;
          var currentRange = selection.getRangeAt(0);
          try {
            currentRange.startContainer.nodeType;
            currentRange.endContainer.nodeType;
          } catch (e) {
            return null;
          }
          var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
          var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
          var tempRange = currentRange.cloneRange();
          tempRange.selectNodeContents(node);
          tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
          var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
          var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
          var end = start + rangeLength;
          var detectionRange = document.createRange();
          detectionRange.setStart(anchorNode, anchorOffset);
          detectionRange.setEnd(focusNode$$1, focusOffset);
          var isBackward = detectionRange.collapsed;
          return {
            start: isBackward ? end : start,
            end: isBackward ? start : end
          };
        }
        function setModernOffsets(node, offsets) {
          if (!window.getSelection) {
            return;
          }
          var selection = window.getSelection();
          var length = node[getTextContentAccessor_1()].length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset_1(node, start);
          var endMarker = getNodeForCharacterOffset_1(node, end);
          if (startMarker && endMarker) {
            var range = document.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        var ReactDOMSelection = {
          getOffsets: getModernOffsets,
          setOffsets: setModernOffsets
        };
        var ReactDOMSelection_1 = ReactDOMSelection;
        var ELEMENT_NODE$2 = HTMLNodeType_1.ELEMENT_NODE;
        function isInDocument(node) {
          return containsNode(document.documentElement, node);
        }
        var ReactInputSelection = {
          hasSelectionCapabilities: function(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && elem.type === "text" || nodeName === "textarea" || elem.contentEditable === "true");
          },
          getSelectionInformation: function() {
            var focusedElem = getActiveElement();
            return {
              focusedElem,
              selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
            };
          },
          restoreSelection: function(priorSelectionInformation) {
            var curFocusedElem = getActiveElement();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
                ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE$2) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              focusNode(priorFocusedElem);
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          },
          getSelection: function(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = ReactDOMSelection_1.getOffsets(input);
            }
            return selection || { start: 0, end: 0 };
          },
          setSelection: function(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              ReactDOMSelection_1.setOffsets(input, offsets);
            }
          }
        };
        var ReactInputSelection_1 = ReactInputSelection;
        var ReactVersion = "16.0.0";
        var ELEMENT_NODE$3 = HTMLNodeType_1.ELEMENT_NODE;
        var ReactCurrentOwner$3 = ReactGlobalSharedState_1.ReactCurrentOwner;
        {
          var warning$27 = require$$0;
        }
        var findFiber = function(arg) {
          invariant(false, "Missing injection for fiber findDOMNode");
        };
        var findStack = function(arg) {
          invariant(false, "Missing injection for stack findDOMNode");
        };
        var findDOMNode = function(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null) {
              var isFiber = typeof owner.tag === "number";
              var warnedAboutRefsInRender = isFiber ? owner.stateNode._warnedAboutRefsInRender : owner._warnedAboutRefsInRender;
              warning$27(warnedAboutRefsInRender, "%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName_1(owner) || "A component");
              if (isFiber) {
                owner.stateNode._warnedAboutRefsInRender = true;
              } else {
                owner._warnedAboutRefsInRender = true;
              }
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE$3) {
            return componentOrElement;
          }
          var inst = ReactInstanceMap_1.get(componentOrElement);
          if (inst) {
            if (typeof inst.tag === "number") {
              return findFiber(inst);
            } else {
              return findStack(inst);
            }
          }
          if (typeof componentOrElement.render === "function") {
            invariant(false, "Unable to find node on an unmounted component.");
          } else {
            invariant(false, "Element appears to be neither ReactComponent nor DOMNode. Keys: %s", Object.keys(componentOrElement));
          }
        };
        findDOMNode._injectFiber = function(fn) {
          findFiber = fn;
        };
        findDOMNode._injectStack = function(fn) {
          findStack = fn;
        };
        var findDOMNode_1 = findDOMNode;
        var lowPriorityWarning$1 = function() {
        };
        {
          var printWarning = function(format) {
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            var argIndex = 0;
            var message = "Warning: " + format.replace(/%s/g, function() {
              return args[argIndex++];
            });
            if (typeof console !== "undefined") {
              console.warn(message);
            }
            try {
              throw new Error(message);
            } catch (x) {
            }
          };
          lowPriorityWarning$1 = function(condition, format) {
            if (format === void 0) {
              throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
            }
            if (!condition) {
              for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                args[_key2 - 2] = arguments[_key2];
              }
              printWarning.apply(void 0, [format].concat(args));
            }
          };
        }
        var lowPriorityWarning_1 = lowPriorityWarning$1;
        var validateDOMNesting$1 = emptyFunction;
        {
          var warning$28 = require$$0;
          var _require$13 = ReactDebugCurrentFiber_1, getCurrentFiberStackAddendum$6 = _require$13.getCurrentFiberStackAddendum;
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          var updatedAncestorInfo$1 = function(oldInfo, tag, instance) {
            var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
            var info = { tag, instance };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var findOwnerStack = function(instance) {
            if (!instance) {
              return [];
            }
            var stack = [];
            do {
              stack.push(instance);
            } while (instance = instance._currentElement._owner);
            stack.reverse();
            return stack;
          };
          var getOwnerInfo = function(childInstance, childTag, ancestorInstance, ancestorTag, isParent) {
            var childOwner = childInstance && childInstance._currentElement._owner;
            var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
            var childOwners = findOwnerStack(childOwner);
            var ancestorOwners = findOwnerStack(ancestorOwner);
            var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
            var i;
            var deepestCommon = -1;
            for (i = 0; i < minStackLen; i++) {
              if (childOwners[i] === ancestorOwners[i]) {
                deepestCommon = i;
              } else {
                break;
              }
            }
            var UNKNOWN = "(unknown)";
            var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function(inst) {
              return getComponentName_1(inst) || UNKNOWN;
            });
            var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function(inst) {
              return getComponentName_1(inst) || UNKNOWN;
            });
            var ownerInfo = [].concat(
              deepestCommon !== -1 ? getComponentName_1(childOwners[deepestCommon]) || UNKNOWN : [],
              ancestorOwnerNames,
              ancestorTag,
              isParent ? [] : ["..."],
              childOwnerNames,
              childTag
            ).join(" > ");
            return ownerInfo;
          };
          var didWarn = {};
          validateDOMNesting$1 = function(childTag, childText, childInstance, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              warning$28(childTag == null, "validateDOMNesting: when childText is passed, childTag should be null");
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorInstance = invalidParentOrAncestor.instance;
            var ancestorTag = invalidParentOrAncestor.tag;
            var addendum;
            if (childInstance != null) {
              addendum = " See " + getOwnerInfo(childInstance, childTag, ancestorInstance, ancestorTag, !!invalidParent) + ".";
            } else {
              addendum = getCurrentFiberStackAddendum$6();
            }
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag + "|" + addendum;
            if (didWarn[warnKey]) {
              return;
            }
            didWarn[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody> to your code to match the DOM tree generated by the browser.";
              }
              warning$28(false, "validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
            } else {
              warning$28(false, "validateDOMNesting(...): %s cannot appear as a descendant of <%s>.%s", tagDisplayName, ancestorTag, addendum);
            }
          };
          validateDOMNesting$1.updatedAncestorInfo = updatedAncestorInfo$1;
          validateDOMNesting$1.isTagValidInContext = function(tag, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
          };
        }
        var validateDOMNesting_1 = validateDOMNesting$1;
        var HostComponent$11 = ReactTypeOfWork.HostComponent;
        function getParent(inst) {
          if (inst._hostParent !== void 0) {
            return inst._hostParent;
          }
          if (typeof inst.tag === "number") {
            do {
              inst = inst["return"];
            } while (inst && inst.tag !== HostComponent$11);
            if (inst) {
              return inst;
            }
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var depthA = 0;
          for (var tempA = instA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = instB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            instA = getParent(instA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            instB = getParent(instB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (instA === instB || instA === instB.alternate) {
              return instA;
            }
            instA = getParent(instA);
            instB = getParent(instB);
          }
          return null;
        }
        function isAncestor(instA, instB) {
          while (instB) {
            if (instA === instB || instA === instB.alternate) {
              return true;
            }
            instB = getParent(instB);
          }
          return false;
        }
        function getParentInstance(inst) {
          return getParent(inst);
        }
        function traverseTwoPhase(inst, fn, arg) {
          var path = [];
          while (inst) {
            path.push(inst);
            inst = getParent(inst);
          }
          var i;
          for (i = path.length; i-- > 0; ) {
            fn(path[i], "captured", arg);
          }
          for (i = 0; i < path.length; i++) {
            fn(path[i], "bubbled", arg);
          }
        }
        function traverseEnterLeave(from, to, fn, argFrom, argTo) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          var pathFrom = [];
          while (from && from !== common) {
            pathFrom.push(from);
            from = getParent(from);
          }
          var pathTo = [];
          while (to && to !== common) {
            pathTo.push(to);
            to = getParent(to);
          }
          var i;
          for (i = 0; i < pathFrom.length; i++) {
            fn(pathFrom[i], "bubbled", argFrom);
          }
          for (i = pathTo.length; i-- > 0; ) {
            fn(pathTo[i], "captured", argTo);
          }
        }
        var ReactTreeTraversal = {
          isAncestor,
          getLowestCommonAncestor,
          getParentInstance,
          traverseTwoPhase,
          traverseEnterLeave
        };
        var getListener = EventPluginHub_1.getListener;
        {
          var warning$29 = require$$0;
        }
        function listenerAtPhase(inst, event, propagationPhase) {
          var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
          return getListener(inst, registrationName);
        }
        function accumulateDirectionalDispatches(inst, phase, event) {
          {
            warning$29(inst, "Dispatching inst must not be null");
          }
          var listener = listenerAtPhase(inst, event, phase);
          if (listener) {
            event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst);
          }
        }
        function accumulateTwoPhaseDispatchesSingle(event) {
          if (event && event.dispatchConfig.phasedRegistrationNames) {
            ReactTreeTraversal.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
          }
        }
        function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
          if (event && event.dispatchConfig.phasedRegistrationNames) {
            var targetInst = event._targetInst;
            var parentInst = targetInst ? ReactTreeTraversal.getParentInstance(targetInst) : null;
            ReactTreeTraversal.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
          }
        }
        function accumulateDispatches(inst, ignoredDirection, event) {
          if (inst && event && event.dispatchConfig.registrationName) {
            var registrationName = event.dispatchConfig.registrationName;
            var listener = getListener(inst, registrationName);
            if (listener) {
              event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener);
              event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst);
            }
          }
        }
        function accumulateDirectDispatchesSingle(event) {
          if (event && event.dispatchConfig.registrationName) {
            accumulateDispatches(event._targetInst, null, event);
          }
        }
        function accumulateTwoPhaseDispatches(events) {
          forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingle);
        }
        function accumulateTwoPhaseDispatchesSkipTarget(events) {
          forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
        }
        function accumulateEnterLeaveDispatches(leave, enter, from, to) {
          ReactTreeTraversal.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
        }
        function accumulateDirectDispatches(events) {
          forEachAccumulated_1(events, accumulateDirectDispatchesSingle);
        }
        var EventPropagators = {
          accumulateTwoPhaseDispatches,
          accumulateTwoPhaseDispatchesSkipTarget,
          accumulateDirectDispatches,
          accumulateEnterLeaveDispatches
        };
        var EventPropagators_1 = EventPropagators;
        var compositionState = {
          _root: null,
          _startText: null,
          _fallbackText: null
        };
        var FallbackCompositionState = {
          initialize: function(nativeEventTarget) {
            compositionState._root = nativeEventTarget;
            compositionState._startText = FallbackCompositionState.getText();
            return true;
          },
          reset: function() {
            compositionState._root = null;
            compositionState._startText = null;
            compositionState._fallbackText = null;
          },
          getData: function() {
            if (compositionState._fallbackText) {
              return compositionState._fallbackText;
            }
            var start;
            var startValue = compositionState._startText;
            var startLength = startValue.length;
            var end;
            var endValue = FallbackCompositionState.getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            compositionState._fallbackText = endValue.slice(start, sliceTail);
            return compositionState._fallbackText;
          },
          getText: function() {
            if ("value" in compositionState._root) {
              return compositionState._root.value;
            }
            return compositionState._root[getTextContentAccessor_1()];
          }
        };
        var FallbackCompositionState_1 = FallbackCompositionState;
        var didWarnForAddedNewProperty = false;
        var isProxySupported = typeof Proxy === "function";
        var EVENT_POOL_SIZE = 10;
        {
          var warning$30 = require$$0;
        }
        var shouldBeReleasedProperties = ["dispatchConfig", "_targetInst", "nativeEvent", "isDefaultPrevented", "isPropagationStopped", "_dispatchListeners", "_dispatchInstances"];
        var EventInterface = {
          type: null,
          target: null,
          currentTarget: emptyFunction.thatReturnsNull,
          eventPhase: null,
          bubbles: null,
          cancelable: null,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: null,
          isTrusted: null
        };
        function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
          {
            delete this.nativeEvent;
            delete this.preventDefault;
            delete this.stopPropagation;
          }
          this.dispatchConfig = dispatchConfig;
          this._targetInst = targetInst;
          this.nativeEvent = nativeEvent;
          var Interface = this.constructor.Interface;
          for (var propName in Interface) {
            if (!Interface.hasOwnProperty(propName)) {
              continue;
            }
            {
              delete this[propName];
            }
            var normalize = Interface[propName];
            if (normalize) {
              this[propName] = normalize(nativeEvent);
            } else {
              if (propName === "target") {
                this.target = nativeEventTarget;
              } else {
                this[propName] = nativeEvent[propName];
              }
            }
          }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
          if (defaultPrevented) {
            this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
          } else {
            this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
          }
          this.isPropagationStopped = emptyFunction.thatReturnsFalse;
          return this;
        }
        _assign(SyntheticEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.preventDefault) {
              event.preventDefault();
            } else if (typeof event.returnValue !== "unknown") {
              event.returnValue = false;
            }
            this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.stopPropagation) {
              event.stopPropagation();
            } else if (typeof event.cancelBubble !== "unknown") {
              event.cancelBubble = true;
            }
            this.isPropagationStopped = emptyFunction.thatReturnsTrue;
          },
          persist: function() {
            this.isPersistent = emptyFunction.thatReturnsTrue;
          },
          isPersistent: emptyFunction.thatReturnsFalse,
          destructor: function() {
            var Interface = this.constructor.Interface;
            for (var propName in Interface) {
              {
                Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
              }
            }
            for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
              this[shouldBeReleasedProperties[i]] = null;
            }
            {
              Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null));
              Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", emptyFunction));
              Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", emptyFunction));
            }
          }
        });
        SyntheticEvent.Interface = EventInterface;
        SyntheticEvent.augmentClass = function(Class, Interface) {
          var Super = this;
          var E = function() {
          };
          E.prototype = Super.prototype;
          var prototype = new E();
          _assign(prototype, Class.prototype);
          Class.prototype = prototype;
          Class.prototype.constructor = Class;
          Class.Interface = _assign({}, Super.Interface, Interface);
          Class.augmentClass = Super.augmentClass;
          addEventPoolingTo(Class);
        };
        {
          if (isProxySupported) {
            SyntheticEvent = new Proxy(SyntheticEvent, {
              construct: function(target, args) {
                return this.apply(target, Object.create(target.prototype), args);
              },
              apply: function(constructor, that, args) {
                return new Proxy(constructor.apply(that, args), {
                  set: function(target, prop, value) {
                    if (prop !== "isPersistent" && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
                      warning$30(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're seeing this, you're adding a new property in the synthetic event object. The property is never released. See https://fb.me/react-event-pooling for more information.");
                      didWarnForAddedNewProperty = true;
                    }
                    target[prop] = value;
                    return true;
                  }
                });
              }
            });
          }
        }
        addEventPoolingTo(SyntheticEvent);
        var SyntheticEvent_1 = SyntheticEvent;
        function getPooledWarningPropertyDefinition(propName, getVal) {
          var isFunction = typeof getVal === "function";
          return {
            configurable: true,
            set,
            get
          };
          function set(val) {
            var action = isFunction ? "setting the method" : "setting the property";
            warn(action, "This is effectively a no-op");
            return val;
          }
          function get() {
            var action = isFunction ? "accessing the method" : "accessing the property";
            var result = isFunction ? "This is a no-op function" : "This is set to null";
            warn(action, result);
            return getVal;
          }
          function warn(action, result) {
            var warningCondition = false;
            warning$30(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, you're %s `%s` on a released/nullified synthetic event. %s. If you must keep the original synthetic event around, use event.persist(). See https://fb.me/react-event-pooling for more information.", action, propName, result);
          }
        }
        function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
          var EventConstructor = this;
          if (EventConstructor.eventPool.length) {
            var instance = EventConstructor.eventPool.pop();
            EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
            return instance;
          }
          return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
        }
        function releasePooledEvent(event) {
          var EventConstructor = this;
          !(event instanceof EventConstructor) ? invariant(false, "Trying to release an event instance  into a pool of a different type.") : void 0;
          event.destructor();
          if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
            EventConstructor.eventPool.push(event);
          }
        }
        function addEventPoolingTo(EventConstructor) {
          EventConstructor.eventPool = [];
          EventConstructor.getPooled = getPooledEvent;
          EventConstructor.release = releasePooledEvent;
        }
        var CompositionEventInterface = {
          data: null
        };
        function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
          return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticEvent_1.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
        var SyntheticCompositionEvent_1 = SyntheticCompositionEvent;
        var InputEventInterface = {
          data: null
        };
        function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
          return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticEvent_1.augmentClass(SyntheticInputEvent, InputEventInterface);
        var SyntheticInputEvent_1 = SyntheticInputEvent;
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (ExecutionEnvironment.canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && "TextEvent" in window && !documentMode && !isPresto();
        var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        function isPresto() {
          var opera = window.opera;
          return typeof opera === "object" && typeof opera.version === "function" && parseInt(opera.version(), 10) <= 12;
        }
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        var eventTypes = {
          beforeInput: {
            phasedRegistrationNames: {
              bubbled: "onBeforeInput",
              captured: "onBeforeInputCapture"
            },
            dependencies: ["topCompositionEnd", "topKeyPress", "topTextInput", "topPaste"]
          },
          compositionEnd: {
            phasedRegistrationNames: {
              bubbled: "onCompositionEnd",
              captured: "onCompositionEndCapture"
            },
            dependencies: ["topBlur", "topCompositionEnd", "topKeyDown", "topKeyPress", "topKeyUp", "topMouseDown"]
          },
          compositionStart: {
            phasedRegistrationNames: {
              bubbled: "onCompositionStart",
              captured: "onCompositionStartCapture"
            },
            dependencies: ["topBlur", "topCompositionStart", "topKeyDown", "topKeyPress", "topKeyUp", "topMouseDown"]
          },
          compositionUpdate: {
            phasedRegistrationNames: {
              bubbled: "onCompositionUpdate",
              captured: "onCompositionUpdateCapture"
            },
            dependencies: ["topBlur", "topCompositionUpdate", "topKeyDown", "topKeyPress", "topKeyUp", "topMouseDown"]
          }
        };
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(topLevelType) {
          switch (topLevelType) {
            case "topCompositionStart":
              return eventTypes.compositionStart;
            case "topCompositionEnd":
              return eventTypes.compositionEnd;
            case "topCompositionUpdate":
              return eventTypes.compositionUpdate;
          }
        }
        function isFallbackCompositionStart(topLevelType, nativeEvent) {
          return topLevelType === "topKeyDown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(topLevelType, nativeEvent) {
          switch (topLevelType) {
            case "topKeyUp":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "topKeyDown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "topKeyPress":
            case "topMouseDown":
            case "topBlur":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        var isComposing = false;
        function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(topLevelType);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
              eventType = eventTypes.compositionStart;
            }
          } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
            eventType = eventTypes.compositionEnd;
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData) {
            if (!isComposing && eventType === eventTypes.compositionStart) {
              isComposing = FallbackCompositionState_1.initialize(nativeEventTarget);
            } else if (eventType === eventTypes.compositionEnd) {
              if (isComposing) {
                fallbackData = FallbackCompositionState_1.getData();
              }
            }
          }
          var event = SyntheticCompositionEvent_1.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
          if (fallbackData) {
            event.data = fallbackData;
          } else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) {
              event.data = customData;
            }
          }
          EventPropagators_1.accumulateTwoPhaseDispatches(event);
          return event;
        }
        function getNativeBeforeInputChars(topLevelType, nativeEvent) {
          switch (topLevelType) {
            case "topCompositionEnd":
              return getDataFromCustomEvent(nativeEvent);
            case "topKeyPress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "topTextInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
          if (isComposing) {
            if (topLevelType === "topCompositionEnd" || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
              var chars = FallbackCompositionState_1.getData();
              FallbackCompositionState_1.reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (topLevelType) {
            case "topPaste":
              return null;
            case "topKeyPress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "topCompositionEnd":
              return useFallbackCompositionData ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var event = SyntheticInputEvent_1.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
          event.data = chars;
          EventPropagators_1.accumulateTwoPhaseDispatches(event);
          return event;
        }
        var BeforeInputEventPlugin = {
          eventTypes,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
          }
        };
        var BeforeInputEventPlugin_1 = BeforeInputEventPlugin;
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        var isTextInputElement_1 = isTextInputElement;
        var eventTypes$1 = {
          change: {
            phasedRegistrationNames: {
              bubbled: "onChange",
              captured: "onChangeCapture"
            },
            dependencies: ["topBlur", "topChange", "topClick", "topFocus", "topInput", "topKeyDown", "topKeyUp", "topSelectionChange"]
          }
        };
        function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
          var event = SyntheticEvent_1.getPooled(eventTypes$1.change, inst, nativeEvent, target);
          event.type = "change";
          ReactControlledComponent_1.enqueueStateRestore(target);
          EventPropagators_1.accumulateTwoPhaseDispatches(event);
          return event;
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget_1(nativeEvent));
          ReactGenericBatching_1.batchedUpdates(runEventInBatch, event);
        }
        function runEventInBatch(event) {
          EventPluginHub_1.enqueueEvents(event);
          EventPluginHub_1.processEventQueue(false);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = ReactDOMComponentTree_1.getNodeFromInstance(targetInst);
          if (inputValueTracking_1.updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(topLevelType, targetInst) {
          if (topLevelType === "topChange") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (ExecutionEnvironment.canUseDOM) {
          isInputEventSupported = isEventSupported_1("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
          if (topLevelType === "topFocus") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (topLevelType === "topBlur") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
          if (topLevelType === "topSelectionChange" || topLevelType === "topKeyUp" || topLevelType === "topKeyDown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(topLevelType, targetInst) {
          if (topLevelType === "topClick") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
          if (topLevelType === "topInput" || topLevelType === "topChange") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(inst, node) {
          if (inst == null) {
            return;
          }
          var state = inst._wrapperState || node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          var value = "" + node.value;
          if (node.getAttribute("value") !== value) {
            node.setAttribute("value", value);
          }
        }
        var ChangeEventPlugin = {
          eventTypes: eventTypes$1,
          _isInputEventSupported: isInputEventSupported,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var targetNode = targetInst ? ReactDOMComponentTree_1.getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement_1(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(topLevelType, targetInst);
              if (inst) {
                var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
                return event;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(topLevelType, targetNode, targetInst);
            }
            if (topLevelType === "topBlur") {
              handleControlledInputBlur(targetInst, targetNode);
            }
          }
        };
        var ChangeEventPlugin_1 = ChangeEventPlugin;
        var DOMEventPluginOrder = ["ResponderEventPlugin", "SimpleEventPlugin", "TapEventPlugin", "EnterLeaveEventPlugin", "ChangeEventPlugin", "SelectEventPlugin", "BeforeInputEventPlugin"];
        var DOMEventPluginOrder_1 = DOMEventPluginOrder;
        var UIEventInterface = {
          view: function(event) {
            if (event.view) {
              return event.view;
            }
            var target = getEventTarget_1(event);
            if (target.window === target) {
              return target;
            }
            var doc = target.ownerDocument;
            if (doc) {
              return doc.defaultView || doc.parentWindow;
            } else {
              return window;
            }
          },
          detail: function(event) {
            return event.detail || 0;
          }
        };
        function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
          return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticEvent_1.augmentClass(SyntheticUIEvent, UIEventInterface);
        var SyntheticUIEvent_1 = SyntheticUIEvent;
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var getEventModifierState_1 = getEventModifierState;
        var MouseEventInterface = {
          screenX: null,
          screenY: null,
          clientX: null,
          clientY: null,
          pageX: null,
          pageY: null,
          ctrlKey: null,
          shiftKey: null,
          altKey: null,
          metaKey: null,
          getModifierState: getEventModifierState_1,
          button: null,
          buttons: null,
          relatedTarget: function(event) {
            return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
          }
        };
        function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
          return SyntheticUIEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticUIEvent_1.augmentClass(SyntheticMouseEvent, MouseEventInterface);
        var SyntheticMouseEvent_1 = SyntheticMouseEvent;
        var eventTypes$2 = {
          mouseEnter: {
            registrationName: "onMouseEnter",
            dependencies: ["topMouseOut", "topMouseOver"]
          },
          mouseLeave: {
            registrationName: "onMouseLeave",
            dependencies: ["topMouseOut", "topMouseOver"]
          }
        };
        var EnterLeaveEventPlugin = {
          eventTypes: eventTypes$2,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            if (topLevelType === "topMouseOver" && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
              return null;
            }
            if (topLevelType !== "topMouseOut" && topLevelType !== "topMouseOver") {
              return null;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (topLevelType === "topMouseOut") {
              from = targetInst;
              var related = nativeEvent.relatedTarget || nativeEvent.toElement;
              to = related ? ReactDOMComponentTree_1.getClosestInstanceFromNode(related) : null;
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return null;
            }
            var fromNode = from == null ? win : ReactDOMComponentTree_1.getNodeFromInstance(from);
            var toNode = to == null ? win : ReactDOMComponentTree_1.getNodeFromInstance(to);
            var leave = SyntheticMouseEvent_1.getPooled(eventTypes$2.mouseLeave, from, nativeEvent, nativeEventTarget);
            leave.type = "mouseleave";
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = SyntheticMouseEvent_1.getPooled(eventTypes$2.mouseEnter, to, nativeEvent, nativeEventTarget);
            enter.type = "mouseenter";
            enter.target = toNode;
            enter.relatedTarget = fromNode;
            EventPropagators_1.accumulateEnterLeaveDispatches(leave, enter, from, to);
            return [leave, enter];
          }
        };
        var EnterLeaveEventPlugin_1 = EnterLeaveEventPlugin;
        var DOCUMENT_NODE$2 = HTMLNodeType_1.DOCUMENT_NODE;
        var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && "documentMode" in document && document.documentMode <= 11;
        var eventTypes$3 = {
          select: {
            phasedRegistrationNames: {
              bubbled: "onSelect",
              captured: "onSelectCapture"
            },
            dependencies: ["topBlur", "topContextMenu", "topFocus", "topKeyDown", "topKeyUp", "topMouseDown", "topMouseUp", "topSelectionChange"]
          }
        };
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        var isListeningToAllDependencies = ReactBrowserEventEmitter_1.isListeningToAllDependencies;
        function getSelection(node) {
          if ("selectionStart" in node && ReactInputSelection_1.hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else if (window.getSelection) {
            var selection = window.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function constructSelectEvent(nativeEvent, nativeEventTarget) {
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement()) {
            return null;
          }
          var currentSelection = getSelection(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var syntheticEvent = SyntheticEvent_1.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
            syntheticEvent.type = "select";
            syntheticEvent.target = activeElement$1;
            EventPropagators_1.accumulateTwoPhaseDispatches(syntheticEvent);
            return syntheticEvent;
          }
          return null;
        }
        var SelectEventPlugin = {
          eventTypes: eventTypes$3,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : nativeEventTarget.nodeType === DOCUMENT_NODE$2 ? nativeEventTarget : nativeEventTarget.ownerDocument;
            if (!doc || !isListeningToAllDependencies("onSelect", doc)) {
              return null;
            }
            var targetNode = targetInst ? ReactDOMComponentTree_1.getNodeFromInstance(targetInst) : window;
            switch (topLevelType) {
              case "topFocus":
                if (isTextInputElement_1(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "topBlur":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "topMouseDown":
                mouseDown = true;
                break;
              case "topContextMenu":
              case "topMouseUp":
                mouseDown = false;
                return constructSelectEvent(nativeEvent, nativeEventTarget);
              case "topSelectionChange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "topKeyDown":
              case "topKeyUp":
                return constructSelectEvent(nativeEvent, nativeEventTarget);
            }
            return null;
          }
        };
        var SelectEventPlugin_1 = SelectEventPlugin;
        var AnimationEventInterface = {
          animationName: null,
          elapsedTime: null,
          pseudoElement: null
        };
        function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
          return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticEvent_1.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);
        var SyntheticAnimationEvent_1 = SyntheticAnimationEvent;
        var ClipboardEventInterface = {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        };
        function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
          return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticEvent_1.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
        var SyntheticClipboardEvent_1 = SyntheticClipboardEvent;
        var FocusEventInterface = {
          relatedTarget: null
        };
        function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
          return SyntheticUIEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticUIEvent_1.augmentClass(SyntheticFocusEvent, FocusEventInterface);
        var SyntheticFocusEvent_1 = SyntheticFocusEvent;
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        var getEventCharCode_1 = getEventCharCode;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          8: "Backspace",
          9: "Tab",
          12: "Clear",
          13: "Enter",
          16: "Shift",
          17: "Control",
          18: "Alt",
          19: "Pause",
          20: "CapsLock",
          27: "Escape",
          32: " ",
          33: "PageUp",
          34: "PageDown",
          35: "End",
          36: "Home",
          37: "ArrowLeft",
          38: "ArrowUp",
          39: "ArrowRight",
          40: "ArrowDown",
          45: "Insert",
          46: "Delete",
          112: "F1",
          113: "F2",
          114: "F3",
          115: "F4",
          116: "F5",
          117: "F6",
          118: "F7",
          119: "F8",
          120: "F9",
          121: "F10",
          122: "F11",
          123: "F12",
          144: "NumLock",
          145: "ScrollLock",
          224: "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode_1(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var getEventKey_1 = getEventKey;
        var KeyboardEventInterface = {
          key: getEventKey_1,
          location: null,
          ctrlKey: null,
          shiftKey: null,
          altKey: null,
          metaKey: null,
          repeat: null,
          locale: null,
          getModifierState: getEventModifierState_1,
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode_1(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode_1(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        };
        function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
          return SyntheticUIEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticUIEvent_1.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
        var SyntheticKeyboardEvent_1 = SyntheticKeyboardEvent;
        var DragEventInterface = {
          dataTransfer: null
        };
        function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
          return SyntheticMouseEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticMouseEvent_1.augmentClass(SyntheticDragEvent, DragEventInterface);
        var SyntheticDragEvent_1 = SyntheticDragEvent;
        var TouchEventInterface = {
          touches: null,
          targetTouches: null,
          changedTouches: null,
          altKey: null,
          metaKey: null,
          ctrlKey: null,
          shiftKey: null,
          getModifierState: getEventModifierState_1
        };
        function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
          return SyntheticUIEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticUIEvent_1.augmentClass(SyntheticTouchEvent, TouchEventInterface);
        var SyntheticTouchEvent_1 = SyntheticTouchEvent;
        var TransitionEventInterface = {
          propertyName: null,
          elapsedTime: null,
          pseudoElement: null
        };
        function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
          return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticEvent_1.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);
        var SyntheticTransitionEvent_1 = SyntheticTransitionEvent;
        var WheelEventInterface = {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: null,
          deltaMode: null
        };
        function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
          return SyntheticMouseEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticMouseEvent_1.augmentClass(SyntheticWheelEvent, WheelEventInterface);
        var SyntheticWheelEvent_1 = SyntheticWheelEvent;
        var eventTypes$4 = {};
        var topLevelEventsToDispatchConfig = {};
        ["abort", "animationEnd", "animationIteration", "animationStart", "blur", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "doubleClick", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "focus", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "progress", "rateChange", "reset", "scroll", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "toggle", "touchCancel", "touchEnd", "touchMove", "touchStart", "transitionEnd", "volumeChange", "waiting", "wheel"].forEach(function(event) {
          var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
          var onEvent = "on" + capitalizedEvent;
          var topEvent = "top" + capitalizedEvent;
          var type = {
            phasedRegistrationNames: {
              bubbled: onEvent,
              captured: onEvent + "Capture"
            },
            dependencies: [topEvent]
          };
          eventTypes$4[event] = type;
          topLevelEventsToDispatchConfig[topEvent] = type;
        });
        var SimpleEventPlugin = {
          eventTypes: eventTypes$4,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
            if (!dispatchConfig) {
              return null;
            }
            var EventConstructor;
            switch (topLevelType) {
              case "topAbort":
              case "topCancel":
              case "topCanPlay":
              case "topCanPlayThrough":
              case "topClose":
              case "topDurationChange":
              case "topEmptied":
              case "topEncrypted":
              case "topEnded":
              case "topError":
              case "topInput":
              case "topInvalid":
              case "topLoad":
              case "topLoadedData":
              case "topLoadedMetadata":
              case "topLoadStart":
              case "topPause":
              case "topPlay":
              case "topPlaying":
              case "topProgress":
              case "topRateChange":
              case "topReset":
              case "topSeeked":
              case "topSeeking":
              case "topStalled":
              case "topSubmit":
              case "topSuspend":
              case "topTimeUpdate":
              case "topToggle":
              case "topVolumeChange":
              case "topWaiting":
                EventConstructor = SyntheticEvent_1;
                break;
              case "topKeyPress":
                if (getEventCharCode_1(nativeEvent) === 0) {
                  return null;
                }
              case "topKeyDown":
              case "topKeyUp":
                EventConstructor = SyntheticKeyboardEvent_1;
                break;
              case "topBlur":
              case "topFocus":
                EventConstructor = SyntheticFocusEvent_1;
                break;
              case "topClick":
                if (nativeEvent.button === 2) {
                  return null;
                }
              case "topDoubleClick":
              case "topMouseDown":
              case "topMouseMove":
              case "topMouseUp":
              case "topMouseOut":
              case "topMouseOver":
              case "topContextMenu":
                EventConstructor = SyntheticMouseEvent_1;
                break;
              case "topDrag":
              case "topDragEnd":
              case "topDragEnter":
              case "topDragExit":
              case "topDragLeave":
              case "topDragOver":
              case "topDragStart":
              case "topDrop":
                EventConstructor = SyntheticDragEvent_1;
                break;
              case "topTouchCancel":
              case "topTouchEnd":
              case "topTouchMove":
              case "topTouchStart":
                EventConstructor = SyntheticTouchEvent_1;
                break;
              case "topAnimationEnd":
              case "topAnimationIteration":
              case "topAnimationStart":
                EventConstructor = SyntheticAnimationEvent_1;
                break;
              case "topTransitionEnd":
                EventConstructor = SyntheticTransitionEvent_1;
                break;
              case "topScroll":
                EventConstructor = SyntheticUIEvent_1;
                break;
              case "topWheel":
                EventConstructor = SyntheticWheelEvent_1;
                break;
              case "topCopy":
              case "topCut":
              case "topPaste":
                EventConstructor = SyntheticClipboardEvent_1;
                break;
            }
            !EventConstructor ? invariant(false, "SimpleEventPlugin: Unhandled event type, `%s`.", topLevelType) : void 0;
            var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
            EventPropagators_1.accumulateTwoPhaseDispatches(event);
            return event;
          }
        };
        var SimpleEventPlugin_1 = SimpleEventPlugin;
        ReactDOMEventListener_1.setHandleTopLevel(ReactBrowserEventEmitter_1.handleTopLevel);
        EventPluginHub_1.injection.injectEventPluginOrder(DOMEventPluginOrder_1);
        EventPluginUtils_1.injection.injectComponentTree(ReactDOMComponentTree_1);
        EventPluginHub_1.injection.injectEventPluginsByName({
          SimpleEventPlugin: SimpleEventPlugin_1,
          EnterLeaveEventPlugin: EnterLeaveEventPlugin_1,
          ChangeEventPlugin: ChangeEventPlugin_1,
          SelectEventPlugin: SelectEventPlugin_1,
          BeforeInputEventPlugin: BeforeInputEventPlugin_1
        });
        var MUST_USE_PROPERTY = DOMProperty_1.injection.MUST_USE_PROPERTY;
        var HAS_BOOLEAN_VALUE = DOMProperty_1.injection.HAS_BOOLEAN_VALUE;
        var HAS_NUMERIC_VALUE = DOMProperty_1.injection.HAS_NUMERIC_VALUE;
        var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty_1.injection.HAS_POSITIVE_NUMERIC_VALUE;
        var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty_1.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
        var HAS_STRING_BOOLEAN_VALUE = DOMProperty_1.injection.HAS_STRING_BOOLEAN_VALUE;
        var HTMLDOMPropertyConfig = {
          Properties: {
            allowFullScreen: HAS_BOOLEAN_VALUE,
            allowTransparency: HAS_STRING_BOOLEAN_VALUE,
            async: HAS_BOOLEAN_VALUE,
            autoPlay: HAS_BOOLEAN_VALUE,
            capture: HAS_BOOLEAN_VALUE,
            checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
            cols: HAS_POSITIVE_NUMERIC_VALUE,
            contentEditable: HAS_STRING_BOOLEAN_VALUE,
            controls: HAS_BOOLEAN_VALUE,
            "default": HAS_BOOLEAN_VALUE,
            defer: HAS_BOOLEAN_VALUE,
            disabled: HAS_BOOLEAN_VALUE,
            download: HAS_OVERLOADED_BOOLEAN_VALUE,
            draggable: HAS_STRING_BOOLEAN_VALUE,
            formNoValidate: HAS_BOOLEAN_VALUE,
            hidden: HAS_BOOLEAN_VALUE,
            loop: HAS_BOOLEAN_VALUE,
            multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
            muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
            noValidate: HAS_BOOLEAN_VALUE,
            open: HAS_BOOLEAN_VALUE,
            playsInline: HAS_BOOLEAN_VALUE,
            readOnly: HAS_BOOLEAN_VALUE,
            required: HAS_BOOLEAN_VALUE,
            reversed: HAS_BOOLEAN_VALUE,
            rows: HAS_POSITIVE_NUMERIC_VALUE,
            rowSpan: HAS_NUMERIC_VALUE,
            scoped: HAS_BOOLEAN_VALUE,
            seamless: HAS_BOOLEAN_VALUE,
            selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
            size: HAS_POSITIVE_NUMERIC_VALUE,
            start: HAS_NUMERIC_VALUE,
            span: HAS_POSITIVE_NUMERIC_VALUE,
            spellCheck: HAS_STRING_BOOLEAN_VALUE,
            style: 0,
            itemScope: HAS_BOOLEAN_VALUE,
            acceptCharset: 0,
            className: 0,
            htmlFor: 0,
            httpEquiv: 0,
            value: HAS_STRING_BOOLEAN_VALUE
          },
          DOMAttributeNames: {
            acceptCharset: "accept-charset",
            className: "class",
            htmlFor: "for",
            httpEquiv: "http-equiv"
          },
          DOMMutationMethods: {
            value: function(node, value) {
              if (value == null) {
                return node.removeAttribute("value");
              }
              if (node.type !== "number" || node.hasAttribute("value") === false) {
                node.setAttribute("value", "" + value);
              } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
                node.setAttribute("value", "" + value);
              }
            }
          }
        };
        var HTMLDOMPropertyConfig_1 = HTMLDOMPropertyConfig;
        var HAS_STRING_BOOLEAN_VALUE$1 = DOMProperty_1.injection.HAS_STRING_BOOLEAN_VALUE;
        var NS = {
          xlink: "http://www.w3.org/1999/xlink",
          xml: "http://www.w3.org/XML/1998/namespace"
        };
        var ATTRS = ["accent-height", "alignment-baseline", "arabic-form", "baseline-shift", "cap-height", "clip-path", "clip-rule", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "dominant-baseline", "enable-background", "fill-opacity", "fill-rule", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "glyph-name", "glyph-orientation-horizontal", "glyph-orientation-vertical", "horiz-adv-x", "horiz-origin-x", "image-rendering", "letter-spacing", "lighting-color", "marker-end", "marker-mid", "marker-start", "overline-position", "overline-thickness", "paint-order", "panose-1", "pointer-events", "rendering-intent", "shape-rendering", "stop-color", "stop-opacity", "strikethrough-position", "strikethrough-thickness", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke-width", "text-anchor", "text-decoration", "text-rendering", "underline-position", "underline-thickness", "unicode-bidi", "unicode-range", "units-per-em", "v-alphabetic", "v-hanging", "v-ideographic", "v-mathematical", "vector-effect", "vert-adv-y", "vert-origin-x", "vert-origin-y", "word-spacing", "writing-mode", "x-height", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xmlns:xlink", "xml:lang", "xml:space"];
        var SVGDOMPropertyConfig = {
          Properties: {
            autoReverse: HAS_STRING_BOOLEAN_VALUE$1,
            externalResourcesRequired: HAS_STRING_BOOLEAN_VALUE$1,
            preserveAlpha: HAS_STRING_BOOLEAN_VALUE$1
          },
          DOMAttributeNames: {
            autoReverse: "autoReverse",
            externalResourcesRequired: "externalResourcesRequired",
            preserveAlpha: "preserveAlpha"
          },
          DOMAttributeNamespaces: {
            xlinkActuate: NS.xlink,
            xlinkArcrole: NS.xlink,
            xlinkHref: NS.xlink,
            xlinkRole: NS.xlink,
            xlinkShow: NS.xlink,
            xlinkTitle: NS.xlink,
            xlinkType: NS.xlink,
            xmlBase: NS.xml,
            xmlLang: NS.xml,
            xmlSpace: NS.xml
          }
        };
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        ATTRS.forEach(function(original) {
          var reactName = original.replace(CAMELIZE, capitalize);
          SVGDOMPropertyConfig.Properties[reactName] = 0;
          SVGDOMPropertyConfig.DOMAttributeNames[reactName] = original;
        });
        var SVGDOMPropertyConfig_1 = SVGDOMPropertyConfig;
        DOMProperty_1.injection.injectDOMPropertyConfig(HTMLDOMPropertyConfig_1);
        DOMProperty_1.injection.injectDOMPropertyConfig(SVGDOMPropertyConfig_1);
        var injectInternals = ReactFiberDevToolsHook.injectInternals;
        var ELEMENT_NODE = HTMLNodeType_1.ELEMENT_NODE;
        var TEXT_NODE = HTMLNodeType_1.TEXT_NODE;
        var COMMENT_NODE = HTMLNodeType_1.COMMENT_NODE;
        var DOCUMENT_NODE = HTMLNodeType_1.DOCUMENT_NODE;
        var DOCUMENT_FRAGMENT_NODE = HTMLNodeType_1.DOCUMENT_FRAGMENT_NODE;
        var ROOT_ATTRIBUTE_NAME = DOMProperty_1.ROOT_ATTRIBUTE_NAME;
        var getChildNamespace = DOMNamespaces.getChildNamespace;
        var createElement = ReactDOMFiberComponent_1.createElement;
        var createTextNode = ReactDOMFiberComponent_1.createTextNode;
        var setInitialProperties = ReactDOMFiberComponent_1.setInitialProperties;
        var diffProperties = ReactDOMFiberComponent_1.diffProperties;
        var updateProperties = ReactDOMFiberComponent_1.updateProperties;
        var diffHydratedProperties = ReactDOMFiberComponent_1.diffHydratedProperties;
        var diffHydratedText = ReactDOMFiberComponent_1.diffHydratedText;
        var warnForDeletedHydratableElement = ReactDOMFiberComponent_1.warnForDeletedHydratableElement;
        var warnForDeletedHydratableText = ReactDOMFiberComponent_1.warnForDeletedHydratableText;
        var warnForInsertedHydratedElement = ReactDOMFiberComponent_1.warnForInsertedHydratedElement;
        var warnForInsertedHydratedText = ReactDOMFiberComponent_1.warnForInsertedHydratedText;
        var precacheFiberNode = ReactDOMComponentTree_1.precacheFiberNode;
        var updateFiberProps = ReactDOMComponentTree_1.updateFiberProps;
        {
          var lowPriorityWarning = lowPriorityWarning_1;
          var warning = require$$0;
          var validateDOMNesting = validateDOMNesting_1;
          var updatedAncestorInfo = validateDOMNesting.updatedAncestorInfo;
          if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            warning(false, "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. http://fb.me/react-polyfills");
          }
        }
        ReactControlledComponent_1.injection.injectFiberControlledHostComponent(ReactDOMFiberComponent_1);
        findDOMNode_1._injectFiber(function(fiber) {
          return DOMRenderer.findHostInstance(fiber);
        });
        var eventsEnabled = null;
        var selectionInformation = null;
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function shouldHydrateDueToLegacyHeuristic(container) {
          var rootElement = getReactRootElementInContainer(container);
          return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
        }
        function shouldAutoFocusHostComponent(type, props) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
          }
          return false;
        }
        var DOMRenderer = ReactFiberReconciler({
          getRootHostContext: function(rootContainerInstance) {
            var type = void 0;
            var namespace = void 0;
            if (rootContainerInstance.nodeType === DOCUMENT_NODE) {
              type = "#document";
              var root = rootContainerInstance.documentElement;
              namespace = root ? root.namespaceURI : getChildNamespace(null, "");
            } else {
              var container = rootContainerInstance.nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
            }
            {
              var validatedTag = type.toLowerCase();
              var _ancestorInfo = updatedAncestorInfo(null, validatedTag, null);
              return { namespace, ancestorInfo: _ancestorInfo };
            }
            return namespace;
          },
          getChildHostContext: function(parentHostContext, type) {
            {
              var parentHostContextDev = parentHostContext;
              var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type, null);
              return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };
            }
            var parentNamespace = parentHostContext;
            return getChildNamespace(parentNamespace, type);
          },
          getPublicInstance: function(instance) {
            return instance;
          },
          prepareForCommit: function() {
            eventsEnabled = ReactBrowserEventEmitter_1.isEnabled();
            selectionInformation = ReactInputSelection_1.getSelectionInformation();
            ReactBrowserEventEmitter_1.setEnabled(false);
          },
          resetAfterCommit: function() {
            ReactInputSelection_1.restoreSelection(selectionInformation);
            selectionInformation = null;
            ReactBrowserEventEmitter_1.setEnabled(eventsEnabled);
            eventsEnabled = null;
          },
          createInstance: function(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace = void 0;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
                validateDOMNesting(null, string, null, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          },
          appendInitialChild: function(parentInstance, child) {
            parentInstance.appendChild(child);
          },
          finalizeInitialChildren: function(domElement, type, props, rootContainerInstance) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            return shouldAutoFocusHostComponent(type, props);
          },
          prepareUpdate: function(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
                validateDOMNesting(null, string, null, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
          },
          commitMount: function(domElement, type, newProps, internalInstanceHandle) {
            domElement.focus();
          },
          commitUpdate: function(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps);
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
          },
          shouldSetTextContent: function(type, props) {
            return type === "textarea" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && typeof props.dangerouslySetInnerHTML.__html === "string";
          },
          resetTextContent: function(domElement) {
            domElement.textContent = "";
          },
          shouldDeprioritizeSubtree: function(type, props) {
            return !!props.hidden;
          },
          createTextInstance: function(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, null, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          },
          commitTextUpdate: function(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          },
          appendChild: function(parentInstance, child) {
            parentInstance.appendChild(child);
          },
          appendChildToContainer: function(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, container);
            } else {
              container.appendChild(child);
            }
          },
          insertBefore: function(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          },
          insertInContainerBefore: function(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          },
          removeChild: function(parentInstance, child) {
            parentInstance.removeChild(child);
          },
          removeChildFromContainer: function(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          },
          canHydrateInstance: function(instance, type, props) {
            return instance.nodeType === ELEMENT_NODE && type === instance.nodeName.toLowerCase();
          },
          canHydrateTextInstance: function(instance, text) {
            if (text === "") {
              return false;
            }
            return instance.nodeType === TEXT_NODE;
          },
          getNextHydratableSibling: function(instance) {
            var node = instance.nextSibling;
            while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE) {
              node = node.nextSibling;
            }
            return node;
          },
          getFirstHydratableChild: function(parentInstance) {
            var next = parentInstance.firstChild;
            while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE) {
              next = next.nextSibling;
            }
            return next;
          },
          hydrateInstance: function(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace = void 0;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
          },
          hydrateTextInstance: function(textInstance, text, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text);
          },
          didNotHydrateInstance: function(parentInstance, instance) {
            if (instance.nodeType === 1) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          },
          didNotFindHydratableInstance: function(parentInstance, type, props) {
            warnForInsertedHydratedElement(parentInstance, type, props);
          },
          didNotFindHydratableTextInstance: function(parentInstance, text) {
            warnForInsertedHydratedText(parentInstance, text);
          },
          scheduleDeferredCallback: ReactDOMFrameScheduling.rIC,
          useSyncScheduling: !ReactDOMFeatureFlags_1.fiberAsyncScheduling
        });
        ReactGenericBatching_1.injection.injectFiberBatchedUpdates(DOMRenderer.batchedUpdates);
        var warnedAboutHydrateAPI = false;
        function renderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          !isValidContainer(container) ? invariant(false, "Target container is not a DOM element.") : void 0;
          {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = DOMRenderer.findHostInstanceWithNoPortals(container._reactRootContainer.current);
              if (hostInstance) {
                warning(hostInstance.parentNode === container, "render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && ReactDOMComponentTree_1.getInstanceFromNode(rootEl));
            warning(!hasNonRootReactChild || isRootRenderedBySomeReact, "render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            warning(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== "BODY", "render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
          }
          var root = container._reactRootContainer;
          if (!root) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
            if (!shouldHydrate) {
              var warned = false;
              var rootSibling = void 0;
              while (rootSibling = container.lastChild) {
                {
                  if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    warning(false, "render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                  }
                }
                container.removeChild(rootSibling);
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                lowPriorityWarning(false, "render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v17. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
              }
            }
            var newRoot = DOMRenderer.createContainer(container);
            root = container._reactRootContainer = newRoot;
            DOMRenderer.unbatchedUpdates(function() {
              DOMRenderer.updateContainer(children, newRoot, parentComponent, callback);
            });
          } else {
            DOMRenderer.updateContainer(children, root, parentComponent, callback);
          }
          return DOMRenderer.getPublicRootInstance(root);
        }
        function createPortal(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          !isValidContainer(container) ? invariant(false, "Target container is not a DOM element.") : void 0;
          return ReactPortal.createPortal(children, container, null, key);
        }
        var ReactDOMFiber = {
          createPortal,
          hydrate: function(element, container, callback) {
            return renderSubtreeIntoContainer(null, element, container, true, callback);
          },
          render: function(element, container, callback) {
            return renderSubtreeIntoContainer(null, element, container, false, callback);
          },
          unstable_renderSubtreeIntoContainer: function(parentComponent, element, containerNode, callback) {
            !(parentComponent != null && ReactInstanceMap_1.has(parentComponent)) ? invariant(false, "parentComponent must be a valid React Component") : void 0;
            return renderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          },
          unmountComponentAtNode: function(container) {
            !isValidContainer(container) ? invariant(false, "unmountComponentAtNode(...): Target container is not a DOM element.") : void 0;
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !ReactDOMComponentTree_1.getInstanceFromNode(rootEl);
                warning(!renderedByDifferentReact, "unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
              DOMRenderer.unbatchedUpdates(function() {
                renderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && ReactDOMComponentTree_1.getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === 1 && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                warning(!hasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
              return false;
            }
          },
          findDOMNode: findDOMNode_1,
          unstable_createPortal: createPortal,
          unstable_batchedUpdates: ReactGenericBatching_1.batchedUpdates,
          unstable_deferredUpdates: DOMRenderer.deferredUpdates,
          flushSync: DOMRenderer.flushSync,
          __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
            EventPluginHub: EventPluginHub_1,
            EventPluginRegistry: EventPluginRegistry_1,
            EventPropagators: EventPropagators_1,
            ReactControlledComponent: ReactControlledComponent_1,
            ReactDOMComponentTree: ReactDOMComponentTree_1,
            ReactDOMEventListener: ReactDOMEventListener_1
          }
        };
        var foundDevTools = injectInternals({
          findFiberByHostInstance: ReactDOMComponentTree_1.getClosestInstanceFromNode,
          findHostInstanceByFiber: DOMRenderer.findHostInstance,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && ExecutionEnvironment.canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://fb.me/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://fb.me/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        var ReactDOMFiberEntry = ReactDOMFiber;
        module.exports = ReactDOMFiberEntry;
      })();
    }
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports, module) {
    "use strict";
    if (false) {
      checkDCE();
      module.exports = null;
    } else {
      module.exports = require_react_dom_development();
    }
  }
});

// dep:react-dom
var react_dom_default = require_react_dom();
export {
  react_dom_default as default
};
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v16.0.0
 * react-dom.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=react-dom.js.map
